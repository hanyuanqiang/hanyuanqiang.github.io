-- MySQL dump 10.13  Distrib 5.7.21, for Win64 (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	5.7.21-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_article`
--

DROP TABLE IF EXISTS `t_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` text NOT NULL,
  `createTime` datetime DEFAULT CURRENT_TIMESTAMP,
  `keywords` varchar(200) DEFAULT NULL,
  `source` varchar(30) DEFAULT NULL,
  `title` varchar(100) NOT NULL,
  `updateTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `visitAuth` varchar(30) DEFAULT NULL,
  `typeId` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_j6r0b7vue46uvy8wcndw62ow4` (`title`),
  KEY `FK6r1dlmwv7ci6dt7d4vx9s21ui` (`typeId`),
  CONSTRAINT `FK6r1dlmwv7ci6dt7d4vx9s21ui` FOREIGN KEY (`typeId`) REFERENCES `t_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article`
--

LOCK TABLES `t_article` WRITE;
/*!40000 ALTER TABLE `t_article` DISABLE KEYS */;
INSERT INTO `t_article` VALUES (1,'<p>1.计算机存储信息的最小单位，称之为位(bit)，音译比特，二进制的一个‘0’或一个‘1’叫一位。\r\n</p><p>2.计算机存储容量基本单位是字节(Byte)，音译为拜特，8个二进制位组成一个字节，一个标准英文字母占一个字节位置，一个标准汉字占两个字节位置。\r\n</p><p>3.计算机容量大小以字节数来度量，1024位进制：\r\n</p><p>1024B(Byte)&nbsp;=&nbsp;1KB\r\n</p><p>1024KB=1MB\r\n</p><p>1024MB=1GB\r\n</p><p>1024GB=1TB</p><p><br></p>','2016-10-09 18:29:47','字节，byte，位，bit','原创','关于位(bit)和字节(byte)','2018-03-07 17:46:36','所有人可见',7),(2,'<p></p><ul><li>泛型是指参数化类型的能力。使用泛型能定义带泛型类型的类或方法，之后编译器会使用具体类型来替换泛型类型。</li><li>泛型的主要优势是能过在编译时而不是运行时发现错误。</li><li>不能使用泛型类型参数来创建实例。</li><li>不能使用泛型类型参数来创建数组。</li><li>不能在静态环境中使用类的泛型类型参数。</li><li>在异常类中不能使用泛型类型参数。</li></ul><p></p><p><br></p>','2016-10-09 22:33:15','java泛型','原创','关于泛型','2018-03-07 17:46:36','所有人可见',7),(3,'<p>1、选择排序</p><p>&nbsp;&nbsp;&nbsp; 选择排序法先找出数列中最小的数，然后将它放在数列的最前面。接下来在剩下的数中找到最小数，将它放到第一个数的后面，以此类推，直到数列中只剩下一个数为止。具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.chapter01;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/8.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SelectionSort</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span></span>{\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;nums.length;i++){\r\n            <span class=\"hljs-keyword\">int</span> min = nums[i];\r\n            <span class=\"hljs-keyword\">int</span> index = i;\r\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = i+<span class=\"hljs-number\">1</span>;j&lt;nums.length;j++){\r\n                <span class=\"hljs-keyword\">if</span> (nums[j]&lt;min){\r\n                    min = nums[j];\r\n                    index = j;\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> (index!=i){\r\n                nums[index] = nums[i];\r\n                nums[i] = min;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span>[] nums = {<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">52</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">37</span>,<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">1</span>};\r\n        sort(nums);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> n:nums) {\r\n            System.out.print(n+<span class=\"hljs-string\">\" \"</span>);\r\n        }\r\n    }\r\n\r\n}\r\n</code></pre><p><br></p><p>2、插入排序</p><p>&nbsp;&nbsp;&nbsp; 插入排序算法是在已经排好序的子数列中反复插入一个新元素来对数列值进行排序的，直到整个数列全部排好序。具体代码如下：<br></p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.chapter01;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/8.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InsertionSort</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] nums)</span></span>{\r\n\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;nums.length;i++){\r\n            <span class=\"hljs-keyword\">int</span> currentNum = nums[i];\r\n            <span class=\"hljs-keyword\">int</span> j;\r\n            <span class=\"hljs-keyword\">for</span>(j = i-<span class=\"hljs-number\">1</span>;j&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;nums[j]&gt;currentNum;j--){\r\n                nums[j+<span class=\"hljs-number\">1</span>] = nums[j];\r\n            }\r\n            nums[j+<span class=\"hljs-number\">1</span>] = currentNum;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span>[] nums = {<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">15</span>,<span class=\"hljs-number\">52</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">37</span>,<span class=\"hljs-number\">43</span>,<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">1</span>};\r\n        sort(nums);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> n:nums) {\r\n            System.out.print(n+<span class=\"hljs-string\">\" \"</span>);\r\n        }\r\n    }\r\n\r\n}\r\n</code></pre><p><br></p><p>3、冒泡排序</p><p>&nbsp; &nbsp; 在每次遍历中，比较连续相邻的元素，如果某一元素是降序，则互换它们的值；否则保持不变。代码如下：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\">package com.hyq.chapter03;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/11.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BubbleSort</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bubbleSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] list)</span></span>{\r\n        <span class=\"hljs-keyword\">boolean</span> needNextPass = <span class=\"hljs-keyword\">true</span>;\r\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;list.length&amp;&amp;needNextPass;k++){\r\n            needNextPass = <span class=\"hljs-keyword\">false</span>;\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;list.length-k;i++){\r\n                <span class=\"hljs-keyword\">if</span> (list[i]&gt;list[i+<span class=\"hljs-number\">1</span>]){\r\n                    <span class=\"hljs-keyword\">int</span> temp = list[i];\r\n                    list[i] = list[i+<span class=\"hljs-number\">1</span>];\r\n                    list[i+<span class=\"hljs-number\">1</span>] = temp;\r\n                    needNextPass = <span class=\"hljs-keyword\">true</span>;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span>[] list = {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>};\r\n        bubbleSort(list);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;list.length;i++){\r\n            System.out.print(list[i]+<span class=\"hljs-string\">\" \"</span>);\r\n        }\r\n    }\r\n}\r\n</code></pre><p><br></p><p>4、归并排序</p><p>&nbsp; &nbsp; 归并排序算法可以递归的描述为：算法将数组分为两半，对每部分递归的应用归并排序。在两部分都排好序后，对它们进行归并。代码如下：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.chapter03;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/11.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MergeSort</span> </span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] list)</span></span>{\r\n        <span class=\"hljs-keyword\">if</span> (list.length&gt;<span class=\"hljs-number\">1</span>){\r\n            <span class=\"hljs-keyword\">int</span>[] firstHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[list.length/<span class=\"hljs-number\">2</span>];\r\n            System.arraycopy(list,<span class=\"hljs-number\">0</span>,firstHalf,<span class=\"hljs-number\">0</span>,list.length/<span class=\"hljs-number\">2</span>);\r\n            mergeSort(firstHalf);\r\n\r\n            <span class=\"hljs-keyword\">int</span> secondHalfLength = list.length-list.length/<span class=\"hljs-number\">2</span>;\r\n            <span class=\"hljs-keyword\">int</span>[] secondHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[secondHalfLength];\r\n            System.arraycopy(list,list.length/<span class=\"hljs-number\">2</span>,secondHalf,<span class=\"hljs-number\">0</span>,secondHalfLength);\r\n            mergeSort(secondHalf);\r\n\r\n            <span class=\"hljs-keyword\">int</span>[] temp = merge(firstHalf,secondHalf);\r\n            System.arraycopy(temp,<span class=\"hljs-number\">0</span>,list,<span class=\"hljs-number\">0</span>,temp.length);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span>[] merge(<span class=\"hljs-keyword\">int</span>[] list1,<span class=\"hljs-keyword\">int</span>[] list2){\r\n        <span class=\"hljs-keyword\">int</span>[] temp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[list1.length+list2.length];\r\n        <span class=\"hljs-keyword\">int</span> current1 = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">int</span> current2 = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">int</span> current3 = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (current1&lt;list1.length&amp;&amp;current2&lt;list2.length){\r\n            <span class=\"hljs-keyword\">if</span> (list1[current1]&lt;list2[current2]){\r\n                temp[current3++] = list1[current1++];\r\n            }<span class=\"hljs-keyword\">else</span>{\r\n                temp[current3++] = list2[current2++];\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (current1&lt;list1.length){\r\n            temp[current3++] = list1[current1++];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (current2&lt;list2.length){\r\n            temp[current3++] = list2[current2++];\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> temp;\r\n    }\r\n\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n        <span class=\"hljs-keyword\">int</span>[] list = {<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">83</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">11</span>};\r\n        mergeSort(list);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i&lt;list.length;i++){\r\n            System.out.print(list[i]+<span class=\"hljs-string\">\" \"</span>);\r\n        }\r\n    }\r\n}\r\n</code></pre><p><br></p><p>5、快速排序</p><p>&nbsp;&nbsp;&nbsp; 快速排序算法在数组中选择一个称为主元(pivot)的元素将数组分为两部分，使得第一部分所有元素都小于或等于主元，而第二部分中的所有元素都大于主元。对第一部分递归的应用快速排序算法，然后对第二部分递归的应用快速排序算法。具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.chapter03;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/11.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">QuickSort</span> </span>{\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] list)</span></span>{\r\n        quickSort(list,<span class=\"hljs-number\">0</span>,list.length-<span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] list,<span class=\"hljs-keyword\">int</span> first,<span class=\"hljs-keyword\">int</span> last)</span></span>{\r\n        <span class=\"hljs-keyword\">if</span> (last&gt;first){\r\n            <span class=\"hljs-keyword\">int</span> pivotIndex = partition(list,first,last);\r\n            quickSort(list,first,pivotIndex-<span class=\"hljs-number\">1</span>);\r\n            quickSort(list,pivotIndex+<span class=\"hljs-number\">1</span>,last);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">partition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] list,<span class=\"hljs-keyword\">int</span> first,<span class=\"hljs-keyword\">int</span> last)</span></span>{\r\n        num++;\r\n\r\n        <span class=\"hljs-keyword\">int</span> pivot = list[first];\r\n        <span class=\"hljs-keyword\">int</span> low = first+<span class=\"hljs-number\">1</span>;\r\n        <span class=\"hljs-keyword\">int</span> high = last;\r\n\r\n        <span class=\"hljs-keyword\">while</span>(high&gt;low){\r\n            <span class=\"hljs-comment\">//查找第一个大于pivot的元素</span>\r\n            <span class=\"hljs-keyword\">while</span> (low&lt;=high&amp;&amp;list[low]&lt;=pivot){\r\n                low++;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">//查找第一个小于pivot的元素</span>\r\n            <span class=\"hljs-keyword\">while</span>(low&lt;=high&amp;&amp;list[high]&gt;pivot){\r\n                high--;\r\n            }\r\n\r\n            <span class=\"hljs-comment\">//交换元素</span>\r\n            <span class=\"hljs-keyword\">if</span> (high&gt;low){\r\n                <span class=\"hljs-keyword\">int</span> temp = list[high];\r\n                list[high] = list[low];\r\n                list[low] = temp;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">while</span> (high&gt;first&amp;&amp;list[high]&gt;=pivot){\r\n            high--;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (pivot&gt;list[high]){\r\n            list[first] = list[high];\r\n            list[high] = pivot;\r\n            <span class=\"hljs-keyword\">return</span> high;\r\n        }<span class=\"hljs-keyword\">else</span>{\r\n            <span class=\"hljs-keyword\">return</span> first;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\r\n        <span class=\"hljs-keyword\">int</span>[] list = {<span class=\"hljs-number\">21</span>,<span class=\"hljs-number\">32</span>,<span class=\"hljs-number\">55</span>,<span class=\"hljs-number\">216</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">62</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">57</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">44</span>,-<span class=\"hljs-number\">99</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">54</span>,<span class=\"hljs-number\">124</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">777</span>,<span class=\"hljs-number\">67</span>,<span class=\"hljs-number\">87</span>,-<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>};\r\n        quickSort(list);\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i:list) {\r\n            System.out.print(i+<span class=\"hljs-string\">\" \"</span>);\r\n        }\r\n        System.out.println();\r\n        System.out.println(num);\r\n    }\r\n}\r\n</code></pre><p><br></p>','2016-10-11 14:15:41','排序算法，选择排序，插入排序，冒泡排序，归并排序，快速排序','原创','排序算法','2018-03-07 17:46:36','所有人可见',8),(4,'<p>AOP（Aspect Orient Programming），也就是面向切面编程，作为面向对象编程的一种补充，已经成为一种比较成熟的编程方式。AOP专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在javaEE中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理，安全检查，缓存，对象池管理等，AOP已经成为一种非常常用的解决方案。下面通过模拟学生的CRUD来进行AOP 的简单实现：</p><p><font color=\"#c0c0c0\"><b>首先使用Spring AOP 功能必须添加这三个jar包：aopalliance.jar、aspectjrt.jar、aspectjweaver.jar</b></font><br></p><p>1、先定义一个接口类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.service;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentService</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n}\r\n</code></pre><p>2、接口的简单实现类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.service.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.aspect.service.StudentService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StudentService</span></span>{\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"添加学生操作\"</span>);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"删除学生操作\"</span>);\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"更新学生操作\"</span>);\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"student\"</span>;\r\n	}\r\n	\r\n}\r\n</code></pre><p>3、定义一个切面类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.advice;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyAspect</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行before.......\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行after.......\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">around</span><span class=\"hljs-params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行around(前)..........\"</span>);\r\n		joinPoint.proceed();\r\n		System.out.println(<span class=\"hljs-string\">\"执行around(后)..........\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行afterReturning.......\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint jp,Throwable ex)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行afterThrowing..........\"</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"异常信息：\"</span>+ex.getMessage());\r\n	}\r\n	\r\n}\r\n</code></pre><p>4、定义配置文件bean-aspect.xml</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n	<span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\r\n	<span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/aop\"</span>\r\n	<span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/context\"</span>\r\n	<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\r\n	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\r\n	http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\r\n    http://www.springframework.org/schema/aop\r\n    http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span>\r\n    \r\n    <span class=\"hljs-comment\">&lt;!-- 定义切面bean --&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAspect\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hyq.aspect.advice.MyAspect\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\r\n    \r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspect</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myAspect\"</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">\"myAspect\"</span>&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">\"execution(* com.hyq.aspect..*(..))\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"businessService\"</span>/&gt;</span>\r\n			<span class=\"hljs-comment\">&lt;!-- 前置通知 --&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:before</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"before\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"businessService\"</span>/&gt;</span>\r\n			<span class=\"hljs-comment\">&lt;!-- 后置通知 --&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"after\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"businessService\"</span>/&gt;</span>\r\n			<span class=\"hljs-comment\">&lt;!-- 环绕通知 --&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:around</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"around\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"businessService\"</span>/&gt;</span>\r\n			<span class=\"hljs-comment\">&lt;!-- 返回通知 --&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-returning</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"afterReturning\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"businessService\"</span>/&gt;</span>\r\n			<span class=\"hljs-comment\">&lt;!-- 异常通知 --&gt;</span>\r\n			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:after-throwing</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"afterThrowing\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"businessService\"</span> <span class=\"hljs-attr\">throwing</span>=<span class=\"hljs-string\">\"ex\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:aspect</span>&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"studentService\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hyq.aspect.service.impl.StudentServiceImpl\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span>\r\n	\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></code></pre><p>5、定义一个测试类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.aspect.service.StudentService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AspectTest</span> </span>{\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-aspect.xml\"</span>);\r\n		StudentService service = (StudentService)ctx.getBean(<span class=\"hljs-string\">\"studentService\"</span>);\r\n		service.add(<span class=\"hljs-string\">\"张三\"</span>);\r\n		System.out.println();\r\n		service.update(<span class=\"hljs-string\">\"李四\"</span>);\r\n		System.out.println();\r\n		service.delete(<span class=\"hljs-string\">\"王五\"</span>);\r\n	}\r\n}\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/73eb1d38-38f1-4e7c-9d71-3f8a08085989.png\" alt=\"搜狗截图20161016193457\" style=\"max-width: 100%;\" class=\"\"></p><p>可以看到输出结果报错，原因是delete方法返回的int类型是基本类型，把int换成Integer则不会报错。还有一点要注意，在AspectTest.java中：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\">StudentService service = (StudentService)ctx.getBean(<span class=\"hljs-string\">\"studentService\"</span>);</code></pre><p>不能写成：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\">StudentService service = (StudentServiceImpl)ctx.getBean(<span class=\"hljs-string\">\"studentService\"</span>);</code></pre><p>否则会出现类型转换错误：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"apache hljs\" codemark=\"1\"><span class=\"hljs-attribute\">Exception</span> in thread <span class=\"hljs-string\">\"main\"</span> java.lang.ClassCastException: com.sun.proxy.$Proxy2 cannot be cast to com.hyq.aspect.service.impl.StudentServiceImpl\r\n	<span class=\"hljs-attribute\">at</span> com.hyq.aspect.test.AspectTest.main(AspectTest.java:12)\r\n</code></pre><p>虽然解决这个错误可以把bean-aspect.xml中的 &lt;aop:config&gt;配置中加入属性 proxy-target-class=\"true\"，但不建议这么做。</p><p>访问目标方法最简单的做法是定义增强处理方法时将第一个参数定义为JoinPoint类型，当该增强处理方法被调用时，该JoinPoint参数就代表了织入增强处理的连接点。JoinPoint里包含如下几个常用方法：</p><p>Object[] getArgs()：返回执行目标方法时的参数</p><p>Signatrue getSignature()：返回被增强的方法的相关信息</p><p>Object getTarget()：返回被织入增强处理的目标对象</p><p>例如获取类名：joinPoint.getTarget().getClass()、获取方法名：joinPoint.getSignature().getName()、获取方法第一个参数：joinPoint.getArgs()[0]</p><p><br></p>','2016-10-16 19:07:47','Spring AOP','原创','SpringAOP——使用配置文件实现','2018-03-18 18:07:38','所有人可见',9),(5,'<p>AOP（Aspect Orient Programming），也就是面向切面编程，作为面向对象编程的一种补充，已经成为一种比较成熟的编程方式。AOP专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在javaEE中，常常通过AOP来处理一些具有横切性质的系统级服务，如事务管理，安全检查，缓存，对象池管理等，AOP已经成为一种非常常用的解决方案。下面通过模拟学生的CRUD来进行AOP 的简单实现：</p><p>首先使用Spring AOP 功能必须添加这三个jar包：aopalliance.jar、aspectjrt.jar、aspectjweaver.jar</p><span>1、先定义一个接口类</span><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.service;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentService</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(String student)</span></span>;\r\n	\r\n}\r\n</code></pre><span>2、接口的简单实现类</span><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.service.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.aspect.service.StudentService;\r\n<span class=\"hljs-meta\">@Service</span>(<span class=\"hljs-string\">\"studentService\"</span>)\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StudentService</span></span>{\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"添加学生：\"</span>+student);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"删除学生：\"</span>+student);\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(String student)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"更新学生：\"</span>+student);\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"student\"</span>;\r\n	}\r\n	\r\n}\r\n</code></pre><span>3、定义一个切面类</span><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.advice;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.After;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Around;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;\r\n<span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;\r\n<span class=\"hljs-meta\">@Component</span>\r\n<span class=\"hljs-meta\">@Aspect</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyAspect</span> </span>{\r\n\r\n	<span class=\"hljs-meta\">@Pointcut</span>(<span class=\"hljs-string\">\"execution(* com.hyq.aspect..*(..))\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">aspect</span><span class=\"hljs-params\">()</span></span>{}\r\n	\r\n	<span class=\"hljs-meta\">@Before</span>(<span class=\"hljs-string\">\"aspect()\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">before</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行before---方法名为：\"</span>+joinPoint.getTarget().getClass());\r\n	}\r\n	\r\n	<span class=\"hljs-meta\">@After</span>(<span class=\"hljs-string\">\"aspect()\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">after</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行after---类名为：\"</span>+joinPoint.getTarget().getClass());\r\n	}\r\n	\r\n	<span class=\"hljs-meta\">@Around</span>(<span class=\"hljs-string\">\"aspect()\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">around</span><span class=\"hljs-params\">(ProceedingJoinPoint joinPoint)</span> <span class=\"hljs-keyword\">throws</span> Throwable</span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行around(前)..........\"</span>);\r\n		Object[] args = joinPoint.getArgs();\r\n		<span class=\"hljs-keyword\">if</span>(args!=<span class=\"hljs-keyword\">null</span>&amp;&amp;args.length&gt;<span class=\"hljs-number\">0</span>){\r\n			args[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"[新增前缀]\"</span>+args[<span class=\"hljs-number\">0</span>];\r\n		}\r\n		joinPoint.proceed(args);\r\n		System.out.println(<span class=\"hljs-string\">\"执行around(后)..........\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-meta\">@AfterReturning</span>(pointcut=<span class=\"hljs-string\">\"aspect()\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterReturning</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行afterReturning.......\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-meta\">@AfterThrowing</span>(pointcut=<span class=\"hljs-string\">\"aspect()\"</span>,throwing=<span class=\"hljs-string\">\"ex\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">afterThrowing</span><span class=\"hljs-params\">(JoinPoint jp,Throwable ex)</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"执行afterThrowing..........\"</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"异常信息：\"</span>+ex.getMessage());\r\n	}\r\n	\r\n}\r\n</code></pre><span>4、定义配置文件bean-aspect.xml</span><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n	<span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\r\n	<span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/aop\"</span>\r\n	<span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/context\"</span>\r\n	<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\r\n	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\r\n	http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\r\n    http://www.springframework.org/schema/aop\r\n    http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span>\r\n    \r\n    <span class=\"hljs-comment\">&lt;!-- 激活组件扫描功能,在包com.hyq.aspect及其子包下面自动扫描通过注解配置的组件 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"com.hyq.aspect\"</span>/&gt;</span>\r\n	<span class=\"hljs-comment\">&lt;!-- 激活自动代理功能 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span>\r\n	\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></code></pre><span>5、定义一个测试类</span><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.aspect.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.aspect.service.StudentService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AspectTest</span> </span>{\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-aspect.xml\"</span>);\r\n		StudentService service = (StudentService)ctx.getBean(<span class=\"hljs-string\">\"studentService\"</span>);\r\n		service.add(<span class=\"hljs-string\">\"张三\"</span>);\r\n		System.out.println();\r\n		service.update(<span class=\"hljs-string\">\"李四\"</span>);\r\n		System.out.println();\r\n		service.delete(<span class=\"hljs-string\">\"王五\"</span>);\r\n	}\r\n}\r\n</code></pre><p>运行输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/cba15701-eae1-4fbb-b044-7be8713fe597.png\" alt=\"搜狗截图\" style=\"max-width:100%;\"></p><p>至于其他要注意的参考<span><a href=\"/blog/article_foreDetail?articleId=21\" target=\"_blank\" style=\"\">Spring AOP ——使用配置文件实现</a><span> <br></span></span></p><p><br></p>','2016-10-16 22:46:13','Spring AOP ——使用配置文件实现','原创','SpringAOP——使用注解实现','2018-03-18 18:07:38','所有人可见',9),(6,'<p>execution是Spring AOP中最主要的切入点指示符，该切入点的用法相对复杂，execution表达式的格式如下：</p><p><font size=\"4\" color=\"#000000\"><font color=\"#808080\">execution(</font><font color=\"#008080\">modifiers-pattern</font><font color=\"#808080\">?</font> <font color=\"#880000\">ret-type-pattern</font> <font color=\"#800080\">declaring-type-pattern</font><font color=\"#808080\">?</font><font color=\"#0000ff\">name-pattern</font><font color=\"#808080\">(</font><font color=\"#00ffff\">param-pattern</font><font color=\"#808080\">)</font> <font color=\"#c0c0c0\">throws-pattern</font><font color=\"#808080\">?)</font></font></p><p>上面格式中的execution是不变的，用于作为execution表达式的开头，整个表达式中的解释如下:</p><ul><li><font color=\"#008080\">modifiers-pattern</font>：指定方法的修饰符，支持通配符，该部分可以省略。</li></ul><ul><li><font color=\"#880000\">ret-type-pattern</font>：指定方法的返回值类型，支持通配符，可以使用\"*\"通配符来匹配所有的返回值类型。</li></ul><ul><li><font color=\"#800080\">declaring-type-pattern</font>：指定方法所属的类，支持通配符，该部分可以省略。</li></ul><ul><li><font color=\"#0000ff\">name-pattern</font>：指定匹配指定的方法名，支持通配符，可以使用\"*\"通配符来匹配所有方法。</li></ul><ul><li><font color=\"#00ffff\">param-pattern</font>：指定方法声明中的形参列表，支持两个通配符，即\"*\"和\"..\"，其中“*”代表一个任意类型的参数，而“..”代表零个或多个任意类型的参数。例如，()匹配一个不接受任何参数的方法，而(..)匹配一个接受任意数量参数的方法，(*)匹配了一个接受一个任何类型的参数的方法，(*,String)匹配了一个接受两个参数的方法，其中第一个参数是任意类型，第二个参数必须是String类型。</li></ul><ul><li><font color=\"#c0c0c0\">throws-pattern</font>：指定方法声明抛出的异常，支持通配符，该部分可以省略。</li></ul><p><br></p>','2016-10-16 23:16:41','Spring AOP，切入点指示符','原创','SpringAOP——切入点指示符','2018-03-07 17:46:36','所有人可见',9),(7,'<p>在配置EhCache缓存实现之前，首先要添加相关的jar包：ehcache-core-2.6.11.jar、slf4j-api-1.7.21.jar。其中ehcache-core-2.6.11.jar是EhCache的核心jar包，而slf4j-api-1.7.21.jar则是该缓存工具所使用的日志工具。</p><p>为了使用EhCache，同样需要在应用的类加载路径下面添加一个ehcache.xml配置文件，代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ehcache</span>&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">diskStore</span> <span class=\"hljs-attr\">path</span>=<span class=\"hljs-string\">\"java.io.tmpdir\"</span>/&gt;</span>\r\n	<span class=\"hljs-comment\">&lt;!-- 配置默认的缓存区 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">defaultCache</span> \r\n		<span class=\"hljs-attr\">maxElementsInMemory</span>=<span class=\"hljs-string\">\"10000\"</span>		\r\n		<span class=\"hljs-attr\">eternal</span>=<span class=\"hljs-string\">\"false\"</span>\r\n		<span class=\"hljs-attr\">timeToIdleSeconds</span>=<span class=\"hljs-string\">\"120\"</span>\r\n		<span class=\"hljs-attr\">timeToLiveSeconds</span>=<span class=\"hljs-string\">\"120\"</span>\r\n		<span class=\"hljs-attr\">maxElementsOnDisk</span>=<span class=\"hljs-string\">\"10000000\"</span>\r\n		<span class=\"hljs-attr\">diskExpiryThreadIntervalSeconds</span>=<span class=\"hljs-string\">\"120\"</span>\r\n		<span class=\"hljs-attr\">memoryStoreEvictionPolicy</span>=<span class=\"hljs-string\">\"LRU\"</span>/&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 配置名为users的缓存区 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"users\"</span>\r\n		<span class=\"hljs-attr\">maxElementsInMemory</span>=<span class=\"hljs-string\">\"10000\"</span>\r\n		<span class=\"hljs-attr\">eternal</span>=<span class=\"hljs-string\">\"false\"</span>\r\n		<span class=\"hljs-attr\">overflowToDisk</span>=<span class=\"hljs-string\">\"true\"</span>\r\n		<span class=\"hljs-attr\">timeToIdleSeconds</span>=<span class=\"hljs-string\">\"300\"</span>\r\n		<span class=\"hljs-attr\">timeToLiveSeconds</span>=<span class=\"hljs-string\">\"600\"</span> /&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- \r\n	 maxElementsInMemory : 设置属性中最多可以放多少个对象 \r\n	 eternal:设置缓存是否永久有效\r\n	 timeToIdleSeconds:设置缓存的对象多少秒没有被使用就会清理掉\r\n	 timeToLiveSeconds:设置缓存的对象在过期之前可以缓存多少秒\r\n	 diskPersistent:设置缓存是否被持久化到硬盘中，保存路径由&lt;diskStore.../&gt;元素指定\r\n	 --&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"users1\"</span>\r\n		<span class=\"hljs-attr\">maxElementsInMemory</span>=<span class=\"hljs-string\">\"10000\"</span>\r\n		<span class=\"hljs-attr\">eternal</span>=<span class=\"hljs-string\">\"false\"</span>\r\n		<span class=\"hljs-attr\">overflowToDisk</span>=<span class=\"hljs-string\">\"true\"</span>\r\n		<span class=\"hljs-attr\">timeToIdleSeconds</span>=<span class=\"hljs-string\">\"300\"</span>\r\n		<span class=\"hljs-attr\">timeToLiveSeconds</span>=<span class=\"hljs-string\">\"600\"</span> /&gt;</span>\r\n		\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"users2\"</span>\r\n		<span class=\"hljs-attr\">maxElementsInMemory</span>=<span class=\"hljs-string\">\"10000\"</span>\r\n		<span class=\"hljs-attr\">eternal</span>=<span class=\"hljs-string\">\"false\"</span>\r\n		<span class=\"hljs-attr\">overflowToDisk</span>=<span class=\"hljs-string\">\"true\"</span>\r\n		<span class=\"hljs-attr\">timeToIdleSeconds</span>=<span class=\"hljs-string\">\"300\"</span>\r\n		<span class=\"hljs-attr\">timeToLiveSeconds</span>=<span class=\"hljs-string\">\"600\"</span> /&gt;</span>\r\n	\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ehcache</span>&gt;</span></code></pre><p>上面配置了一个匿名的、默认的缓存区和多个有名字的缓存区(user、user1、user2)<br></p><p>1、定义一个实体类User</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.entity;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">User</span> </span>{\r\n	<span class=\"hljs-keyword\">private</span> String name;\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> age;\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> name;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> age;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">User</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	\r\n}\r\n</code></pre><p>2、定义一个接口类UserService</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.service;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UserService</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUsersByNameAndAge</span><span class=\"hljs-params\">(String name,<span class=\"hljs-keyword\">int</span> age)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getAnotherUser</span><span class=\"hljs-params\">(String name,<span class=\"hljs-keyword\">int</span> age)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictUser</span><span class=\"hljs-params\">(String name,<span class=\"hljs-keyword\">int</span> age)</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictAll</span><span class=\"hljs-params\">()</span></span>;\r\n	\r\n}\r\n</code></pre><p>3、定义接口实现类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.service.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.CacheEvict;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.Cacheable;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-meta\">@Service</span>(<span class=\"hljs-string\">\"userService\"</span>)\r\n<span class=\"hljs-meta\">@Cacheable</span>(value=<span class=\"hljs-string\">\"users\"</span>)\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserService</span></span>{\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUsersByNameAndAge</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getAnotherUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>)	<span class=\"hljs-comment\">//从users缓存区中清除含有指定参数的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"---正在清空(\"</span>+name+<span class=\"hljs-string\">\",\"</span>+age+<span class=\"hljs-string\">\")对应的缓存---\"</span>);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>,allEntries=<span class=\"hljs-keyword\">true</span>)		<span class=\"hljs-comment\">//清除users缓存区中所有的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictAll</span><span class=\"hljs-params\">()</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"--正在清空整个缓存--\"</span>);\r\n	}\r\n\r\n}\r\n</code></pre><p>4、定义配置文件bean-cache.xml</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n	<span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\r\n	<span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/aop\"</span>\r\n	<span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span>\r\n	<span class=\"hljs-attr\">xmlns:cache</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/cache\"</span>\r\n	<span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/context\"</span>\r\n	<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\r\n	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\r\n	http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\r\n    http://www.springframework.org/schema/aop\r\n    http://www.springframework.org/schema/aop/spring-aop.xsd\r\n    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\"</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 配置EhCache的CacheManager 通过configLocation指定ehcache.xml文件的位置 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ehCacheManager\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.ehcache.EhCacheManagerFactoryBean\"</span>\r\n		<span class=\"hljs-attr\">p:configLocation</span>=<span class=\"hljs-string\">\"classpath:ehcache.xml\"</span>\r\n		<span class=\"hljs-attr\">p:shared</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\r\n	<span class=\"hljs-comment\">&lt;!-- 配置基于EhCache的缓存管理器，并将EhCache的CacheManager注入该缓存管理器Bean中 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"cacheManager\"</span>\r\n		<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.cache.ehcache.EhCacheCacheManager\"</span>\r\n		<span class=\"hljs-attr\">p:cacheManager-ref</span>=<span class=\"hljs-string\">\"ehCacheManager\"</span>/&gt;</span>\r\n	<span class=\"hljs-comment\">&lt;!-- \r\n		启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 \r\n		&lt;cache:annotation-driven/&gt;有一个cache-manager属性用来指定当前所使用的CacheManager对应的bean的名称，默认是cacheManager，所以当我们的CacheManager的id为cacheManager时我们可以不指定该参数，否则就需要我们指定了。\r\n	      &lt;cache:annotation-driven/&gt;还可以指定一个mode属性，可选值有proxy和aspectj。默认是使用proxy。当mode为proxy时，只有缓存方法在外部被调用的时候Spring Cache才会发生作用，这也就意味着如果一个缓存方法在其声明对象内部被调用时Spring Cache是不会发生作用的。而mode为aspectj时就不会有这种问题。另外使用proxy时，只有public方法上的@Cacheable等标注才会起作用，如果需要非public方法上的方法也可以使用Spring Cache时把mode设置为aspectj。\r\n	       此外，&lt;cache:annotation-driven/&gt;还可以指定一个proxy-target-class属性，表示是否要代理class，默认为false。我们前面提到的@Cacheable、@cacheEvict等也可以标注在接口上，这对于基于接口的代理来说是没有什么问题的，但是需要注意的是当我们设置proxy-target-class为true或者mode为aspectj时，是直接基于class进行操作的，定义在接口上的@Cacheable等Cache注解不会被识别到，那对应的Spring Cache也不会起作用了。\r\n	       需要注意的是&lt;cache:annotation-driven/&gt;只会去寻找定义在同一个ApplicationContext下的@Cacheable等缓存注解。\r\n	--&gt;</span>\r\n	 \r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">cache:annotation-driven</span> /&gt;</span>\r\n    <span class=\"hljs-comment\">&lt;!-- 激活组件扫描功能,在包com.hyq.cache及其子包下面自动扫描通过注解配置的组件 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">\"com.hyq.cache\"</span>/&gt;</span>\r\n	\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></code></pre><p>5、定义一个测试类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CacheTest</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-cache.xml\"</span>);\r\n		UserService us = ctx.getBean(<span class=\"hljs-string\">\"userService\"</span>,UserService.class);\r\n		User user1 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		User user2 = us.getUsersByNameAndAge(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user2? \"</span>+(user1==user2));		<span class=\"hljs-comment\">//方法参数相同，输出true</span>\r\n		User user3 = us.getUsersByNameAndAge(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">12</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user2==user3? \"</span>+(user2==user3));		<span class=\"hljs-comment\">//方法参数不同，输出false</span>\r\n		us.evictUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);	<span class=\"hljs-comment\">//清除指定参数的缓存</span>\r\n		User user4  = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);		<span class=\"hljs-comment\">//原来相同参数的缓存已清除，重新生成一个新的对象</span>\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user4?  \"</span>+(user1==user4));	<span class=\"hljs-comment\">//输出false</span>\r\n		us.evictAll();	<span class=\"hljs-comment\">//清除所有缓存</span>\r\n		User user5 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		User user6 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">12</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user3==user6?  \"</span>+(user3==user6));		<span class=\"hljs-comment\">//输出false</span>\r\n		System.out.println(<span class=\"hljs-string\">\"user4==user5?  \"</span>+(user4==user5));		<span class=\"hljs-comment\">//输出false</span>\r\n		\r\n	}\r\n	\r\n}\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/63754669-5c3d-4d62-9467-af3378697233.png\" alt=\"搜狗截图20161017131442\" style=\"max-width:100%;\"></p><p>其他说明：接口实现类@Cacheable有如下属性：</p><ul><li>value：必须属性。该属性可指定多个缓存区的名字，用于指定将方法返回值放入指定的缓存区内。</li><li>key：通过SpEL表达式显式治死你个缓存的key。例如key=“#name” 表示只要调用的方法具有相同的name参数，Spring缓存机制就会生效。</li><li>condition：该属性指定一个返回boolean值的SpEL表达式，只有当该表达式返回true时，Spring才会缓存方法返回值。例如condition=“#age&lt;100” 表示Spring缓存生效的条件是#age&lt;100，这样只要调用方法时age参数小于100，Spring缓存机制就会生效。</li><li>unless：该属性指定一个返回boolean值的SpEL表达式，当该表达式返回true时，Spring就不缓存方法返回值(跟condition相反)<br></li></ul><p>例如修改UserServiceImpl.java为如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.service.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.CacheEvict;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.Cacheable;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-meta\">@Service</span>(<span class=\"hljs-string\">\"userService\"</span>)\r\n<span class=\"hljs-meta\">@Cacheable</span>(value=<span class=\"hljs-string\">\"users\"</span>,key=<span class=\"hljs-string\">\"#name\"</span>,condition=<span class=\"hljs-string\">\"#age&lt;100\"</span>)\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserService</span></span>{\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUsersByNameAndAge</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getAnotherUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>)	<span class=\"hljs-comment\">//从users缓存区中清除含有指定参数的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"---正在清空(\"</span>+name+<span class=\"hljs-string\">\",\"</span>+age+<span class=\"hljs-string\">\")对应的缓存---\"</span>);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>,allEntries=<span class=\"hljs-keyword\">true</span>)		<span class=\"hljs-comment\">//清除users缓存区中所有的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictAll</span><span class=\"hljs-params\">()</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"--正在清空整个缓存--\"</span>);\r\n	}\r\n\r\n}\r\n</code></pre><p>重写测试类：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CacheTest</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-cache.xml\"</span>);\r\n		UserService us = ctx.getBean(<span class=\"hljs-string\">\"userService\"</span>,UserService.class);\r\n		User user1 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		User user2 = us.getUsersByNameAndAge(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">12</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user2? \"</span>+(user1==user2));	<span class=\"hljs-comment\">//即使age不同，但name相同，所以输出true</span>\r\n		\r\n		User user3 = us.getAnotherUser(<span class=\"hljs-string\">\"李四\"</span>, <span class=\"hljs-number\">11</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user3? \"</span>+(user1==user3));	<span class=\"hljs-comment\">//name不同，输出false</span>\r\n		\r\n		User user4 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">200</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user4? \"</span>+(user1==user4));	<span class=\"hljs-comment\">//即使name相同，但user4的age大于100，所以输出false</span>\r\n		\r\n		User user5 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">200</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user5==user4? \"</span>+(user5==user4));	<span class=\"hljs-comment\">//不满足condition的条件的都不进行缓存，输出false</span>\r\n	}\r\n	\r\n}\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/cf5189c4-6e73-4985-a142-11014f63c27e.png\" alt=\"搜狗截图20161017133650\" style=\"max-width:100%;\"></p><p><br></p><p>当然，@Cacheable一样可以修饰方法，例如把UserServiceImpl.java修改为：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.service.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.CacheEvict;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.cache.annotation.Cacheable;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-meta\">@Service</span>(<span class=\"hljs-string\">\"userService\"</span>)\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UserService</span></span>{\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@Cacheable</span>(value=<span class=\"hljs-string\">\"users\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getUsersByNameAndAge</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@Cacheable</span>(value=<span class=\"hljs-string\">\"users1\"</span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title\">getAnotherUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> User(name, age);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>)	<span class=\"hljs-comment\">//从users缓存区中清除含有指定参数的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictUser</span><span class=\"hljs-params\">(String name, <span class=\"hljs-keyword\">int</span> age)</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"---正在清空(\"</span>+name+<span class=\"hljs-string\">\",\"</span>+age+<span class=\"hljs-string\">\")对应的缓存---\"</span>);\r\n	}\r\n\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-meta\">@CacheEvict</span>(value=<span class=\"hljs-string\">\"users\"</span>,allEntries=<span class=\"hljs-keyword\">true</span>)		<span class=\"hljs-comment\">//清除users缓存区中所有的缓存</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">evictAll</span><span class=\"hljs-params\">()</span> </span>{\r\n		System.out.println(<span class=\"hljs-string\">\"--正在清空整个缓存--\"</span>);\r\n	}\r\n\r\n}\r\n</code></pre><p>上面的两个方法返回值放在不同的缓存区(user和user1)</p><p>测试类：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.cache.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.entity.User;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.cache.service.UserService;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CacheTest</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-cache.xml\"</span>);\r\n		UserService us = ctx.getBean(<span class=\"hljs-string\">\"userService\"</span>,UserService.class);\r\n		User user1 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		User user2 = us.getUsersByNameAndAge(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user2? \"</span>+(user1==user2));	<span class=\"hljs-comment\">//不再同一缓存区，参数相同也输出false</span>\r\n		User user3 = us.getAnotherUser(<span class=\"hljs-string\">\"张三\"</span>, <span class=\"hljs-number\">11</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"user1==user3? \"</span>+(user1==user3)); 	<span class=\"hljs-comment\">//方法相同，输出true</span>\r\n	}\r\n	\r\n}\r\n</code></pre><p><br></p><p>@CacheEvict注解用于清除缓存，该注解有如下属性：</p><ul><li>必须属性。用于指定该方法用于清除那个缓存区的数据</li><li>allEntries：该属性指定是否清空整个缓存区。</li><li>beforeInvocation：该属性指定是否在执行方法之前清除缓存。默认是在方法完成成功之后才清除缓存。</li><li>condition：<span>该属性指定一个SpEL表达式，只有当该表达式为true时才清除缓存。</span></li><li><span>key：通过SpEL表达式显式指定缓存的key。<br></span></li></ul><p><br></p>','2016-10-17 11:53:44','Spring 缓存','原创','Spring缓存机制——EhCache缓存配置和实现','2018-03-18 18:07:38','所有人可见',9),(8,'<p>Spring同时支持编程式事务策略和声明式事务策略，通常推荐采用声明式事务策略。下面通过一个简单的实例来测试Spring的事务功能。</p><p>1、定义一个接口类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.transaction.dao;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">NewsDao</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span>  <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(String title,String content)</span></span>;\r\n	\r\n}\r\n</code></pre><p>2、实现接口类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.transaction.dao.impl;\r\n\r\n<span class=\"hljs-keyword\">import</span> javax.sql.DataSource;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.jdbc.core.JdbcTemplate;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.transaction.dao.NewsDao;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NewsDaoImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NewsDao</span></span>{\r\n	\r\n	<span class=\"hljs-keyword\">private</span> DataSource ds;\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setDs</span><span class=\"hljs-params\">(DataSource ds)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.ds = ds;\r\n	}\r\n	\r\n	<span class=\"hljs-meta\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(String title, String content)</span> </span>{\r\n		JdbcTemplate jt = <span class=\"hljs-keyword\">new</span> JdbcTemplate(ds);\r\n		jt.update(<span class=\"hljs-string\">\"insert into news_inf values(1,?,?)\"</span>,title,content);\r\n		<span class=\"hljs-comment\">//两次插入的数据违反了唯一性约束</span>\r\n		jt.update(<span class=\"hljs-string\">\"insert into news_inf values(1,?,?)\"</span>,title,content);\r\n		<span class=\"hljs-comment\">//如果没有事务，则第一条记录可以被插入</span>\r\n		<span class=\"hljs-comment\">//如果增加事务控制，将发现第一条记录也插不进去</span>\r\n	}\r\n}\r\n</code></pre><p>3、定义配置文件bean-transaction.xml</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"utf-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n	<span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\"</span>\r\n	<span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/aop\"</span>\r\n	<span class=\"hljs-attr\">xmlns:p</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/p\"</span>\r\n	<span class=\"hljs-attr\">xmlns:cache</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/cache\"</span>\r\n	<span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/context\"</span>\r\n	<span class=\"hljs-attr\">xmlns:tx</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/tx\"</span>\r\n	<span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">\"http://www.springframework.org/schema/beans\r\n	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd\r\n	http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context-4.0.xsd\r\n    http://www.springframework.org/schema/aop\r\n    http://www.springframework.org/schema/aop/spring-aop.xsd\r\n    http://www.springframework.org/schema/tx\r\n    http://www.springframework.org/schema/tx/spring-tx.xsd\r\n    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd\"</span>&gt;</span>\r\n    \r\n    \r\n    <span class=\"hljs-comment\">&lt;!-- 定义数据源Bean，使用C3P0数据源实现，并注入数据源的必要信息 --&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"dataSource\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.mchange.v2.c3p0.ComboPooledDataSource\"</span>\r\n    	<span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">\"close\"</span>\r\n    	<span class=\"hljs-attr\">p:driverClass</span>=<span class=\"hljs-string\">\"com.mysql.jdbc.Driver\"</span>\r\n    	<span class=\"hljs-attr\">p:jdbcUrl</span>=<span class=\"hljs-string\">\"jdbc:mysql://localhost/db_spring\"</span>\r\n    	<span class=\"hljs-attr\">p:user</span>=<span class=\"hljs-string\">\"root\"</span>\r\n    	<span class=\"hljs-attr\">p:password</span>=<span class=\"hljs-string\">\"111\"</span>\r\n    	<span class=\"hljs-attr\">p:maxPoolSize</span>=<span class=\"hljs-string\">\"40\"</span>\r\n    	<span class=\"hljs-attr\">p:minPoolSize</span>=<span class=\"hljs-string\">\"2\"</span>\r\n    	<span class=\"hljs-attr\">p:initialPoolSize</span>=<span class=\"hljs-string\">\"2\"</span>\r\n    	<span class=\"hljs-attr\">p:maxIdleTime</span>=<span class=\"hljs-string\">\"30\"</span>/&gt;</span>\r\n    \r\n    \r\n    <span class=\"hljs-comment\">&lt;!-- 配置JDBC 数据源的局部事务管理器，使用DataSourceTransactionManager类 --&gt;</span>\r\n    <span class=\"hljs-comment\">&lt;!-- 该类实现PlatformTransactionManager接口，是针对采用数据源连接的特定实现 --&gt;</span>\r\n    <span class=\"hljs-comment\">&lt;!-- 配置DataSourceTransactionManager时需要依赖注入DataSource的引用 --&gt;</span>\r\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"transactionManager\"</span>\r\n    	<span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span>\r\n    	<span class=\"hljs-attr\">p:dataSource-ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>/&gt;</span>\r\n    	\r\n   	<span class=\"hljs-comment\">&lt;!-- 配置一个业务逻辑Bean --&gt;</span>\r\n   	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"newsDao\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"com.hyq.transaction.dao.impl.NewsDaoImpl\"</span> <span class=\"hljs-attr\">p:ds-ref</span>=<span class=\"hljs-string\">\"dataSource\"</span>/&gt;</span>\r\n   	\r\n   	<span class=\"hljs-comment\">&lt;!-- \r\n   		如果想用注解来管理事务，则可以把下面关于事务的配置注释掉，换成下面这行xml代码：\r\n		&lt;tx:annotation-driven/&gt;	\r\n		其中&lt;tx:annotation-driven/&gt;的 transaction-manager属性的默认值为transactionManager，\r\n		然后在dao的实现类，即NewsDaoImpl.java的class前面加上事务的注释@Transactional()，\r\n		这样的话，该dao实现类的所有方法都具有事务性\r\n   	 --&gt;</span>\r\n   	\r\n   	<span class=\"hljs-comment\">&lt;!-- 配置事务增强处理Bean，指定事务管理器 --&gt;</span>\r\n   	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:advice</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"txAdvice\"</span>\r\n   		<span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">\"transactionManager\"</span>&gt;</span>\r\n   		<span class=\"hljs-comment\">&lt;!-- 用于配置详细的事务定义 --&gt;</span>\r\n   		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:attributes</span>&gt;</span>\r\n   			<span class=\"hljs-comment\">&lt;!-- 所有以get开头的方法都是只读的 --&gt;</span>\r\n   			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"get*\"</span> <span class=\"hljs-attr\">read-only</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\r\n   			<span class=\"hljs-comment\">&lt;!-- 其他方法用默认的事务设置，指定超时时长为5秒 --&gt;</span>\r\n   			<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:method</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"*\"</span> <span class=\"hljs-attr\">isolation</span>=<span class=\"hljs-string\">\"DEFAULT\"</span> <span class=\"hljs-attr\">propagation</span>=<span class=\"hljs-string\">\"REQUIRED\"</span> <span class=\"hljs-attr\">timeout</span>=<span class=\"hljs-string\">\"5\"</span>/&gt;</span>\r\n   		<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:attributes</span>&gt;</span>\r\n   	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tx:advice</span>&gt;</span>\r\n   	\r\n   	<span class=\"hljs-comment\">&lt;!-- AOP配置的元素 --&gt;</span>\r\n   	<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:config</span>&gt;</span>\r\n   		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:pointcut</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">\"execution(* com.hyq.transaction.dao.impl.*Impl.*(..))\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myPointcut\"</span>/&gt;</span>\r\n   		<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:advisor</span> <span class=\"hljs-attr\">advice-ref</span>=<span class=\"hljs-string\">\"txAdvice\"</span> <span class=\"hljs-attr\">pointcut-ref</span>=<span class=\"hljs-string\">\"myPointcut\"</span>/&gt;</span>\r\n   	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aop:config</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span></code></pre><p>4、定义一个测试类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.transaction.test;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;\r\n<span class=\"hljs-keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.transaction.dao.NewsDao;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SpringTest</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		ApplicationContext ctx = <span class=\"hljs-keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"hljs-string\">\"bean-transaction.xml\"</span>);\r\n		NewsDao dao = (NewsDao)ctx.getBean(<span class=\"hljs-string\">\"newsDao\"</span>,NewsDao.class);\r\n		dao.insert(<span class=\"hljs-string\">\"新闻标题\"</span>, <span class=\"hljs-string\">\"新闻内容\"</span>);\r\n	}\r\n}\r\n</code></pre><p>执行主程序后发现程序报错：</p><p><font color=\"#ff0000\">Exception&nbsp;in&nbsp;thread&nbsp;\"main\"&nbsp;<font color=\"#008080\">org.springframework.dao.DuplicateKeyException</font>:&nbsp;PreparedStatementCallback;&nbsp;SQL&nbsp;[insert&nbsp;into&nbsp;news_inf&nbsp;values(1,?,?)];</font></p><p><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Duplicate&nbsp;entry&nbsp;\'1\'&nbsp;for&nbsp;key&nbsp;\'PRIMARY\';&nbsp;nested&nbsp;exception&nbsp;is&nbsp;com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException:</font></p><p><font color=\"#ff0000\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Duplicate&nbsp;entry&nbsp;\'1\'&nbsp;for&nbsp;key&nbsp;\'PRIMARY\'</font></p><p>这表明不能插入两条主键相同的数据。同时查看数据库发现一条数据也没发现，说明事务生效。</p><p><font size=\"4\">附 </font>数据库表结构：</p><p><img src=\"/MyBlog/files/article_pic/3bc53cf0-a1fe-49db-b319-7f8568c91208.png\" alt=\"搜狗截图20161017182715\" style=\"max-width:100%;\"></p><p><br></p><p><font face=\"楷体\" size=\"4\" color=\"#808000\">注意</font>：如果要使用注解来实现事务，请看上面配置文件bean-transaction.xml中中间注释的那段说明</p><p>@Transaction注解有如下属性：</p><ul><li>isolation：用于指定事务的隔离级别。默认为底层事务的隔离级别。</li><li>noRollbackFor：指定遇到特定异常时强制不回滚事务。</li><li>noRollbackForClassName：指定遇到特定的多个异常时强制不回滚事务。该属性值可以指定多个异常类名。</li><li>propagation：指定事务的传播行为。</li><li>readOnly：指定事务是否只读。</li><li>rollbackFor：指定遇到特定异常时强制回滚事务。</li><li>rollbackForClassName：指定遇到特定的多个异常时强制回滚事务。该属性值可以指定多个异常类名。</li><li>timeout：指定事务的超时时长。</li></ul><p>如果使用@Transactional修饰Bean类，则表明这些事务设置对整个Bean类起作用；如果使用@Transactional修饰Bean类中的某个方法，则表明这些事务设置只对该方法有效。</p><p><br></p>','2016-10-17 18:27:36','Spring 事务，配置事务策略','原创','Spring事务——使用XML配置事务策略','2018-03-18 18:07:38','所有人可见',9),(9,'<p>这两天闲来无事在玩数独，碰到一道挺难解的数独，于是琢磨着写个程序来求解数独。一开始我在想能不能把所有解决数独的思路和推理方法写入到程序中，看能不能把所有数独破解了，后来试了一下，写不出来，，，因为有些推理思路是多不推理，我目前实在是抽象不出来把它写入程序中，所以目前我只把一些我能写的简单解题思路写入代码中，程序初步形成之后，我试了一下解决简单的数组，没问题。但我输入了一个较复杂的数组，这就解不出来了。。。。怎么办呢，网上一搜，看到有用深度优先搜索法求解的(一开始我也想过，但以为穷举会很耗时间，结果想多了)，于是我也琢磨了一下后来也用深度优先搜索解决了，下面是具体源码(代码比较乱，凑合看)：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.chapter03;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/10.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SolveNinePatch</span> </span>{\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">boolean</span> finish = <span class=\"hljs-keyword\">false</span>;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> temp = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">//记录方法执行次数</span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n\r\n        <span class=\"hljs-keyword\">int</span>[][] array = {\r\n                {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">9</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>}\r\n        };\r\n\r\n        initSolve(array);     <span class=\"hljs-comment\">//对数组进行初步求解</span>\r\n\r\n        <span class=\"hljs-comment\">//输出初步求解后的结果</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n                System.out.print(array[i][j]+<span class=\"hljs-string\">\" \"</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">\"----------------------\"</span>);   <span class=\"hljs-comment\">//分割线</span>\r\n\r\n        dfs(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,array);     <span class=\"hljs-comment\">//使用深度优先搜索递归求解</span>\r\n\r\n        <span class=\"hljs-comment\">//输出求解后的数组</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n                System.out.print(array[i][j]+<span class=\"hljs-string\">\" \"</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">\"---------------------------\"</span>);  <span class=\"hljs-comment\">//分割线</span>\r\n        System.out.println(<span class=\"hljs-string\">\"temp:\"</span>+temp);   <span class=\"hljs-comment\">//输出最终执行方法的次数</span>\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">//按照一些基本的排除法进行第一步处理,找出所有能确定的数字</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initSolve</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        <span class=\"hljs-comment\">/*tag用来标记该方法本次执行时是否找到新数据，如果找到有则再次执行该方法，直到找不到新数据*/</span>\r\n        <span class=\"hljs-keyword\">boolean</span> tag = <span class=\"hljs-keyword\">false</span>;\r\n\r\n        <span class=\"hljs-comment\">//遍历所有空格</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n\r\n                <span class=\"hljs-keyword\">if</span> (array[i][j]==<span class=\"hljs-number\">0</span>){\r\n                    <span class=\"hljs-comment\">/*获取当前空格所有不能填的数字*/</span>\r\n                    Set&lt;Integer&gt; nums = getCannotWriteNumber(i,j,array);\r\n\r\n                    <span class=\"hljs-comment\">/*在一个3X3的小格中，如果除了当前空格外的所有其他空格都不能填写某个当前空格可填的数字，则当前空格只能填写这个数字*/</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> kk=<span class=\"hljs-number\">1</span>;kk&lt;<span class=\"hljs-number\">10</span>;kk++){\r\n                        <span class=\"hljs-comment\">//前提是这个数字当前空格可填</span>\r\n                        <span class=\"hljs-keyword\">if</span> (!nums.contains(kk)){\r\n                            <span class=\"hljs-keyword\">boolean</span> tag2 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">//遍历3X3小表格中除当前空格外(!(a==i&amp;&amp;b==j))的所有空格</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>);a&lt;<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;a++){\r\n                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>);b&lt;<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;b++){\r\n                                    <span class=\"hljs-keyword\">if</span> (!(a==i&amp;&amp;b==j)&amp;&amp;array[a][b]==<span class=\"hljs-number\">0</span>){\r\n                                        <span class=\"hljs-comment\">/* 如果其他空格都不能填某一个数字kk时(这是下面if语句的为false)，表示当前空格只能填kk*/</span>\r\n                                        <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(i,j,array).contains(kk)){\r\n                                            tag2 = <span class=\"hljs-keyword\">false</span>;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag2){\r\n                                array[i][j]=kk;     <span class=\"hljs-comment\">//找到新数据</span>\r\n                                tag = <span class=\"hljs-keyword\">true</span>;     <span class=\"hljs-comment\">//该方法本次执行完之后再次执行</span>\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> kk=<span class=\"hljs-number\">1</span>;kk&lt;<span class=\"hljs-number\">10</span>;kk++){\r\n                        <span class=\"hljs-keyword\">if</span> (!nums.contains(kk)){\r\n                            <span class=\"hljs-keyword\">boolean</span> tag2 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">/*如果某一列上面的除当前空格外的其他所有空格都不能填写某一个当前空格可填写的数字kk，则当前空格一定为kk*/</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">0</span>;a&lt;array.length;a++){\r\n                                <span class=\"hljs-keyword\">if</span> (a!=i&amp;&amp;array[a][j]==<span class=\"hljs-number\">0</span>){\r\n                                    <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(a,j,array).contains(kk)){\r\n                                        tag2 = <span class=\"hljs-keyword\">false</span>;\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag2){\r\n                                array[i][j]=kk;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n\r\n                            <span class=\"hljs-keyword\">boolean</span> tag3 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">/*如果某一行上面的除当前空格外的其他所有空格都不能填写某一个当前空格可填写的数字kk，则当前空格一定为kk*/</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">0</span>;b&lt;array[i].length;b++){\r\n                                <span class=\"hljs-keyword\">if</span> (b!=j&amp;&amp;array[i][b]==<span class=\"hljs-number\">0</span>){\r\n                                    <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(i,b,array).contains(kk)){\r\n                                        tag3 = <span class=\"hljs-keyword\">false</span>;\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag3){\r\n                                array[i][j]=kk;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-comment\">/*如果当前空格不能填写的数字有八个，则当前空格只能填写剩下的那个数字*/</span>\r\n                    <span class=\"hljs-keyword\">if</span> (nums.size()==<span class=\"hljs-number\">8</span>){\r\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;<span class=\"hljs-number\">10</span>;k++){\r\n                            <span class=\"hljs-keyword\">if</span> (!nums.contains(k)){\r\n                                array[i][j]=k;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (tag){\r\n            initSolve(array);     <span class=\"hljs-comment\">//再次执行该方法</span>\r\n        }\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">//深度优先搜索</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j,<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        temp++;     <span class=\"hljs-comment\">//每次执行该方法时+1</span>\r\n\r\n        <span class=\"hljs-comment\">//判断是否已经全部解决</span>\r\n        <span class=\"hljs-keyword\">if</span> (i&gt;=<span class=\"hljs-number\">9</span>){\r\n            finish = <span class=\"hljs-keyword\">true</span>;\r\n            <span class=\"hljs-keyword\">return</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">if</span> (array[i][j]!=<span class=\"hljs-number\">0</span>){\r\n            <span class=\"hljs-comment\">//跳过非空格</span>\r\n            dfs(i + (j + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">9</span>, (j + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">9</span>,array);\r\n        }<span class=\"hljs-keyword\">else</span> {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> num=<span class=\"hljs-number\">1</span>;num&lt;=<span class=\"hljs-number\">9</span>;num++){\r\n                <span class=\"hljs-comment\">//遍历每个可填的数字</span>\r\n                <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(i,j,array).contains(num)){\r\n                    array[i][j] = num;\r\n                    <span class=\"hljs-comment\">//使用递归，处理下一个空格</span>\r\n                    dfs(i + (j + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">9</span>, (j + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">9</span>,array);\r\n                }\r\n                <span class=\"hljs-keyword\">if</span> (finish){\r\n                    <span class=\"hljs-keyword\">return</span>;\r\n                }\r\n            }\r\n            <span class=\"hljs-comment\">/*如果某个空格所有可填的数字均尝试后仍然没有解决全部空格的话，重置当前空格*/</span>\r\n            array[i][j] = <span class=\"hljs-number\">0</span>;\r\n        }\r\n\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//获取某个空格所有不能填的数字</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Set&lt;Integer&gt; <span class=\"hljs-title\">getCannotWriteNumber</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j,<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        Set&lt;Integer&gt; nums = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n\r\n        <span class=\"hljs-comment\">//找出当前空格所在的小格里面的所有非零的数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>);a&lt;<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;a++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>);b&lt;<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;b++){\r\n                <span class=\"hljs-keyword\">if</span> (array[a][b]!=<span class=\"hljs-number\">0</span>){\r\n                    nums.add(array[a][b]);\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">//找出当前空格所在列的所有非零数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">0</span>;n&lt;array.length;n++){\r\n            <span class=\"hljs-keyword\">if</span> (array[n][j]!=<span class=\"hljs-number\">0</span>){\r\n                nums.add(array[n][j]);\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">//找出当前空格所在行的所有非零数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> m=<span class=\"hljs-number\">0</span>;m&lt;array[i].length;m++){\r\n            <span class=\"hljs-keyword\">if</span> (array[i][m]!=<span class=\"hljs-number\">0</span>){\r\n                nums.add(array[i][m]);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> nums;\r\n    }\r\n}\r\n</code></pre><p></p><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/243b5e60-241d-481e-8d41-9e10ed808ba1.png\" alt=\"搜狗截图20161017194715\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-17 19:46:01','数独，深度优先','原创','使用深度优先搜索递归求解数独','2018-03-18 18:07:38','所有人可见',8),(10,'<p>上次写了个用深度优先搜索解决数独的程序，写完后试了好几个数独，感觉大部分都在递归10000次以内可以解决(前提是先用initSolve()进行初步解决)，但是递归毕竟耗内存，于是在想能不能用堆栈代替递归，琢磨了好久写了个凑合能看到程序<img src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/6a/laugh.gif\">，具体如下：<br></p><p>1、定义一个描述空格节点的类BlankNode.java</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.sudoku;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/15.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlankNode</span> </span>{\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> i;  <span class=\"hljs-comment\">//当前空格的i</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> j;  <span class=\"hljs-comment\">//当前空格的j</span>\r\n    <span class=\"hljs-comment\">//当前空格所有可填的数字的集合</span>\r\n    <span class=\"hljs-keyword\">private</span> List&lt;CanFillNum&gt; canFillNumList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BlankNode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i, <span class=\"hljs-keyword\">int</span> j, List&lt;CanFillNum&gt; canFillNumList)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.i = i;\r\n        <span class=\"hljs-keyword\">this</span>.j = j;\r\n        <span class=\"hljs-keyword\">this</span>.canFillNumList = canFillNumList;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getI</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setI</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.i = i;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getJ</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> j;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setJ</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> j)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.j = j;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;CanFillNum&gt; <span class=\"hljs-title\">getCanFillNumList</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> canFillNumList;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setCanFillNumList</span><span class=\"hljs-params\">(List&lt;CanFillNum&gt; canFillNumList)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.canFillNumList = canFillNumList;\r\n    }\r\n}\r\n</code></pre><p>2、定义一个描述空格顺序的节点</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.sudoku;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * 创建线性表用来表示空格的顺序\r\n * Created by Administrator on 2016/10/15.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlankOrder</span> </span>{\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> i;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> j;\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BlankOrder</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j)</span></span>{\r\n        <span class=\"hljs-keyword\">this</span>.i = i;\r\n        <span class=\"hljs-keyword\">this</span>.j = j;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getI</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> i;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setI</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.i = i;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getJ</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> j;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setJ</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> j)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.j = j;\r\n    }\r\n}\r\n</code></pre><p>3、定义一个某个空格节点可填数字的类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.sudoku;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/15.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CanFillNum</span> </span>{\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> num;    <span class=\"hljs-comment\">//空格里面可填的数字</span>\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> isVisit;    <span class=\"hljs-comment\">//该数字是否已经填过，是为true，否为false</span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CanFillNum</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num)</span></span>{\r\n        <span class=\"hljs-keyword\">this</span>.num = num;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getNum</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> num;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setNum</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> num)</span> </span>{\r\n        <span class=\"hljs-keyword\">this</span>.num = num;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isVisit</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\">return</span> isVisit;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setVisit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">boolean</span> visit)</span> </span>{\r\n        isVisit = visit;\r\n    }\r\n}\r\n</code></pre><p></p><p>4、定义主类</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.sudoku;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.*;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/10/15.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sudoku</span> </span>{\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">boolean</span> finish = <span class=\"hljs-keyword\">false</span>;\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> temp = <span class=\"hljs-number\">0</span>;    <span class=\"hljs-comment\">//记录循环的次数</span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n\r\n        <span class=\"hljs-keyword\">int</span>[][] array = {\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>},\r\n                {<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>}\r\n        };\r\n\r\n        initSolve(array);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n                System.out.print(array[i][j]+<span class=\"hljs-string\">\" \"</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">\"------------------\"</span>);\r\n\r\n        dfsUseStack(array);\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n                System.out.print(array[i][j]+<span class=\"hljs-string\">\" \"</span>);\r\n            }\r\n            System.out.println();\r\n        }\r\n\r\n        System.out.println(<span class=\"hljs-string\">\"------------------\"</span>);\r\n        System.out.println(<span class=\"hljs-string\">\"temp:\"</span>+temp);\r\n    }\r\n\r\n\r\n    <span class=\"hljs-comment\">//按照一些基本的排除法进行第一步处理,找出所有能确定的数字</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initSolve</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        <span class=\"hljs-comment\">/*tag用来标记该方法本次执行时是否找到新数据，如果找到有则再次执行该方法，直到找不到新数据*/</span>\r\n        <span class=\"hljs-keyword\">boolean</span> tag = <span class=\"hljs-keyword\">false</span>;\r\n\r\n        <span class=\"hljs-comment\">//遍历所有空格</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;array[i].length;j++){\r\n\r\n                <span class=\"hljs-keyword\">if</span> (array[i][j]==<span class=\"hljs-number\">0</span>){\r\n                    <span class=\"hljs-comment\">/*获取当前空格所有不能填的数字*/</span>\r\n                    Set&lt;Integer&gt; nums = getCannotWriteNumber(i,j,array);\r\n\r\n                    <span class=\"hljs-comment\">/*在一个3X3的小格中，如果除了当前空格外的所有其他空格都不能填写某个当前空格可填的数字，则当前空格只能填写这个数字*/</span>\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> kk=<span class=\"hljs-number\">1</span>;kk&lt;<span class=\"hljs-number\">10</span>;kk++){\r\n                        <span class=\"hljs-comment\">//前提是这个数字当前空格可填</span>\r\n                        <span class=\"hljs-keyword\">if</span> (!nums.contains(kk)){\r\n                            <span class=\"hljs-keyword\">boolean</span> tag2 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">//遍历3X3小表格中除当前空格外(!(a==i&amp;&amp;b==j))的所有空格</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>);a&lt;<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;a++){\r\n                                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>);b&lt;<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;b++){\r\n                                    <span class=\"hljs-keyword\">if</span> (!(a==i&amp;&amp;b==j)&amp;&amp;array[a][b]==<span class=\"hljs-number\">0</span>){\r\n                                        <span class=\"hljs-comment\">/* 如果其他空格都不能填某一个数字kk时(这是下面if语句的为false)，表示当前空格只能填kk*/</span>\r\n                                        <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(i,j,array).contains(kk)){\r\n                                            tag2 = <span class=\"hljs-keyword\">false</span>;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag2){\r\n                                array[i][j]=kk;     <span class=\"hljs-comment\">//找到新数据</span>\r\n                                tag = <span class=\"hljs-keyword\">true</span>;     <span class=\"hljs-comment\">//该方法本次执行完之后再次执行</span>\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> kk=<span class=\"hljs-number\">1</span>;kk&lt;<span class=\"hljs-number\">10</span>;kk++){\r\n                        <span class=\"hljs-keyword\">if</span> (!nums.contains(kk)){\r\n                            <span class=\"hljs-keyword\">boolean</span> tag2 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">/*如果某一列上面的除当前空格外的其他所有空格都不能填写某一个当前空格可填写的数字kk，则当前空格一定为kk*/</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">0</span>;a&lt;array.length;a++){\r\n                                <span class=\"hljs-keyword\">if</span> (a!=i&amp;&amp;array[a][j]==<span class=\"hljs-number\">0</span>){\r\n                                    <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(a,j,array).contains(kk)){\r\n                                        tag2 = <span class=\"hljs-keyword\">false</span>;\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag2){\r\n                                array[i][j]=kk;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n\r\n                            <span class=\"hljs-keyword\">boolean</span> tag3 = <span class=\"hljs-keyword\">true</span>;\r\n                            <span class=\"hljs-comment\">/*如果某一行上面的除当前空格外的其他所有空格都不能填写某一个当前空格可填写的数字kk，则当前空格一定为kk*/</span>\r\n                            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">0</span>;b&lt;array[i].length;b++){\r\n                                <span class=\"hljs-keyword\">if</span> (b!=j&amp;&amp;array[i][b]==<span class=\"hljs-number\">0</span>){\r\n                                    <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(i,b,array).contains(kk)){\r\n                                        tag3 = <span class=\"hljs-keyword\">false</span>;\r\n                                    }\r\n                                }\r\n                            }\r\n                            <span class=\"hljs-keyword\">if</span> (tag3){\r\n                                array[i][j]=kk;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    <span class=\"hljs-comment\">/*如果当前空格不能填写的数字有八个，则当前空格只能填写剩下的那个数字*/</span>\r\n                    <span class=\"hljs-keyword\">if</span> (nums.size()==<span class=\"hljs-number\">8</span>){\r\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;<span class=\"hljs-number\">10</span>;k++){\r\n                            <span class=\"hljs-keyword\">if</span> (!nums.contains(k)){\r\n                                array[i][j]=k;\r\n                                tag = <span class=\"hljs-keyword\">true</span>;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (tag){\r\n            initSolve(array);     <span class=\"hljs-comment\">//再次执行该方法</span>\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//使用栈代替深度优先搜索</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfsUseStack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        <span class=\"hljs-comment\">/*把所有空格按顺序存入线性表中*/</span>\r\n        List&lt;BlankOrder&gt; blankOrderList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\r\n        <span class=\"hljs-keyword\">int</span> currentBlankOrder = <span class=\"hljs-number\">0</span>;      <span class=\"hljs-comment\">//当前空格的索引</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;array.length;i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; array[i].length; j++) {\r\n                <span class=\"hljs-keyword\">if</span> (array[i][j]==<span class=\"hljs-number\">0</span>){\r\n                    blankOrderList.add(<span class=\"hljs-keyword\">new</span> BlankOrder(i,j));\r\n                }\r\n            }\r\n        }\r\n\r\n        Stack&lt;BlankNode&gt; stack = <span class=\"hljs-keyword\">new</span> Stack&lt;&gt;();     <span class=\"hljs-comment\">//存储空格的栈</span>\r\n\r\n        <span class=\"hljs-comment\">//如果存在空格，进入下面语句</span>\r\n        <span class=\"hljs-keyword\">if</span> (blankOrderList.size()&gt;<span class=\"hljs-number\">0</span>){\r\n            <span class=\"hljs-keyword\">int</span> i=blankOrderList.get(currentBlankOrder).getI();<span class=\"hljs-comment\">//获取当前空格的i</span>\r\n            <span class=\"hljs-keyword\">int</span> j=blankOrderList.get(currentBlankOrder).getJ();<span class=\"hljs-comment\">//获取当前空格的j</span>\r\n            currentBlankOrder++; <span class=\"hljs-comment\">//当前空格指针向后移一位</span>\r\n\r\n            <span class=\"hljs-comment\">/*获取当前空格可填的所有数字*/</span>\r\n            Set&lt;Integer&gt; temp = getCanWriteNumber(getCannotWriteNumber(i,j,array));\r\n            List&lt;CanFillNum&gt; canFillNumList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;(); <span class=\"hljs-comment\">//存入线性表中</span>\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> t:temp){\r\n                canFillNumList.add(<span class=\"hljs-keyword\">new</span> CanFillNum(t));\r\n            }\r\n\r\n            stack.push(<span class=\"hljs-keyword\">new</span> BlankNode(i,j,canFillNumList));<span class=\"hljs-comment\">//把当前空格节点压入栈中</span>\r\n\r\n            <span class=\"hljs-keyword\">while</span> (stack.size()&gt;<span class=\"hljs-number\">0</span>){\r\n                <span class=\"hljs-keyword\">boolean</span> tage = <span class=\"hljs-keyword\">true</span>;    <span class=\"hljs-comment\">//如果当前循环没有元素压入则为true，否则为false</span>\r\n\r\n                <span class=\"hljs-comment\">//遍历栈顶元素可填的所有数字</span>\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">0</span>;a&lt;stack.peek().getCanFillNumList().size();a++){\r\n\r\n                    <span class=\"hljs-comment\">//如果当前数字可填并且没有填过进入下面语句</span>\r\n                    <span class=\"hljs-keyword\">if</span> (!getCannotWriteNumber(stack.peek().getI(),stack.peek().getJ(),array).contains(stack.peek().getCanFillNumList().get(a).getNum())&amp;&amp;!stack.peek().getCanFillNumList().get(a).isVisit()){\r\n                        array[stack.peek().getI()][stack.peek().getJ()] = stack.peek().getCanFillNumList().get(a).getNum();\r\n                        stack.peek().getCanFillNumList().get(a).setVisit(<span class=\"hljs-keyword\">true</span>); <span class=\"hljs-comment\">//设置为已经访问过</span>\r\n\r\n                        Sudoku.temp++;\r\n\r\n                        <span class=\"hljs-comment\">//满足下面条件表示数组已解决</span>\r\n                        <span class=\"hljs-keyword\">if</span> (currentBlankOrder==blankOrderList.size()){\r\n                            <span class=\"hljs-keyword\">return</span>;\r\n                        }\r\n\r\n                        <span class=\"hljs-keyword\">int</span> ii = blankOrderList.get(currentBlankOrder).getI();<span class=\"hljs-comment\">//获取下一个空格的i</span>\r\n                        <span class=\"hljs-keyword\">int</span> jj = blankOrderList.get(currentBlankOrder).getJ();<span class=\"hljs-comment\">//获取下一个空格的j</span>\r\n                        <span class=\"hljs-comment\">/*获取下一个空格所有可填的数字*/</span>\r\n                        Set&lt;Integer&gt; ttemp = getCanWriteNumber(getCannotWriteNumber(ii,jj,array));\r\n                        List&lt;CanFillNum&gt; canFillNumList1 = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<span class=\"hljs-comment\">//存储所有可填的数字</span>\r\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> t:ttemp){\r\n                            canFillNumList1.add(<span class=\"hljs-keyword\">new</span> CanFillNum(t));\r\n                        }\r\n                        stack.push(<span class=\"hljs-keyword\">new</span> BlankNode(ii,jj,canFillNumList1));       <span class=\"hljs-comment\">//把下一个空格压入栈中</span>\r\n                        currentBlankOrder++;        <span class=\"hljs-comment\">//指针再次下移一位</span>\r\n                        tage = <span class=\"hljs-keyword\">false</span>;\r\n                        <span class=\"hljs-keyword\">break</span>;\r\n                    }\r\n                }\r\n\r\n                <span class=\"hljs-comment\">//如果本次循环没有新元素压入栈中进入下面if语句</span>\r\n                <span class=\"hljs-keyword\">if</span> (tage){\r\n                    <span class=\"hljs-comment\">//删除栈顶元素和重置栈顶元素对应的空格</span>\r\n                    BlankNode blankNode = stack.pop();\r\n                    array[blankNode.getI()][blankNode.getJ()]=<span class=\"hljs-number\">0</span>;\r\n                    currentBlankOrder--;\r\n                }\r\n            }\r\n        }<span class=\"hljs-keyword\">else</span>{\r\n            System.out.println(<span class=\"hljs-string\">\"该数独已解决\"</span>);\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//获取某个空格所有不能填的数字</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Set&lt;Integer&gt; <span class=\"hljs-title\">getCannotWriteNumber</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i,<span class=\"hljs-keyword\">int</span> j,<span class=\"hljs-keyword\">int</span>[][] array)</span></span>{\r\n        Set&lt;Integer&gt; nums = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n        <span class=\"hljs-comment\">//找出当前空格所在的小格里面的所有非零的数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> a=<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>);a&lt;<span class=\"hljs-number\">3</span>*(i/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;a++){\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> b=<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>);b&lt;<span class=\"hljs-number\">3</span>*(j/<span class=\"hljs-number\">3</span>)+<span class=\"hljs-number\">3</span>;b++){\r\n                <span class=\"hljs-keyword\">if</span> (array[a][b]!=<span class=\"hljs-number\">0</span>){\r\n                    nums.add(array[a][b]);\r\n                }\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">//找出当前空格所在列的所有非零数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> n=<span class=\"hljs-number\">0</span>;n&lt;array.length;n++){\r\n            <span class=\"hljs-keyword\">if</span> (array[n][j]!=<span class=\"hljs-number\">0</span>){\r\n                nums.add(array[n][j]);\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">//找出当前空格所在行的所有非零数字</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> m=<span class=\"hljs-number\">0</span>;m&lt;array[i].length;m++){\r\n            <span class=\"hljs-keyword\">if</span> (array[i][m]!=<span class=\"hljs-number\">0</span>){\r\n                nums.add(array[i][m]);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> nums;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">//获取某个节点可填的数字集合</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Set&lt;Integer&gt; <span class=\"hljs-title\">getCanWriteNumber</span><span class=\"hljs-params\">(Set&lt;Integer&gt; nums)</span></span>{\r\n        Set&lt;Integer&gt; n = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-number\">10</span>;i++){\r\n            <span class=\"hljs-keyword\">if</span> (!nums.contains(i)){\r\n                n.add(i);\r\n            }\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> n;\r\n    }\r\n}\r\n</code></pre><p>上面类中initSolve()方法和<a href=\"/blog/article_foreDetail?articleId=26\" target=\"_blank\" style=\"\">使用深度优先搜素递归求解数组</a><span> 中的方法一样，</span>都用于初步求解(下面结果可以看出初步求解已经求出了很多数字)。程序输出如下：</p><p><span><img src=\"/MyBlog/files/article_pic/bfa51fa2-4c56-4537-8c52-106fd3c9510b.png\" alt=\"搜狗截图20161017201855\" style=\"max-width:100%;\"></span></p><p>值得说明的是：相同数组使用深度优先搜索的temp大约是使用栈的2倍（我估计的），就上面这道数组题使用深度优先搜索求解后的temp为：</p><p><img src=\"/MyBlog/files/article_pic/7a0cde28-32ac-42fe-9016-5abfe9dbee30.png\" alt=\"搜狗截图20161017202624\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-17 20:19:31','使用栈代替深度优先搜索','原创','使用栈代替深度优先搜索解决数独','2018-03-18 18:07:38','所有人可见',8),(11,'<p class=\"cye-lm-tag\"><font color=\"#ff0000\"><font face=\"楷体\" size=\"5\">学习类网站</font>：</font></p><p class=\"cye-lm-tag\">1、<a href=\"http://ifeve.com/\" target=\"_blank\" style=\"\">并发编程网</a></p><p class=\"cye-lm-tag\">2、<a href=\"http://www.mybatis.org/mybatis-3/zh/index.html\" target=\"_blank\">MyBatis入门文档中文版</a></p><p class=\"cye-lm-tag\"><br></p><p class=\"cye-lm-tag\"><font face=\"楷体\" size=\"5\" color=\"#ff0000\">个人博客类：</font></p><p class=\"cye-lm-tag\">1、<a href=\"http://coolshell.cn/\" target=\"_blank\" style=\"\">酷壳网</a>&nbsp;&nbsp;&nbsp;&nbsp;——陈皓</p><p class=\"cye-lm-tag\">2、<a href=\"http://www.yinwang.org/\" target=\"_blank\" style=\"\">当然我在扯淡</a>&nbsp;&nbsp;&nbsp;&nbsp;——王垠</p><p class=\"cye-lm-tag\">3、<a href=\"https://program-think.blogspot.com/\" target=\"_blank\" \"=\"\" style=\"\">编程随想</a></p><p class=\"cye-lm-tag\"><br></p><p class=\"cye-lm-tag\"><font color=\"#ff0000\" size=\"5\" face=\"楷体\">资源下载：</font></p><p class=\"cye-lm-tag\">1、<a href=\"http://repo.springsource.org/libs-release-local/\" target=\"_blank\">spring下载 </a>&nbsp; &nbsp;——沿着org—&gt;springframework—&gt;spring路径进入，即<a href=\"http://repo.springsource.org/libs-release-local/org/springframework/spring/\" target=\"_blank\">这里</a></p><p class=\"cye-lm-tag\">2、<a href=\"http://struts.apache.org/download.cgi\" target=\"_blank\">struts下载</a></p><p class=\"cye-lm-tag\">3、<a href=\"https://github.com/mybatis/mybatis-3/releases\" target=\"_blank\">MyBatis下载</a></p><p class=\"cye-lm-tag\"><br></p><p class=\"cye-lm-tag\"><font face=\"楷体\" size=\"5\" color=\"#ff0000\">其他网站</font>：</p><p class=\"cye-lm-tag\">1、<a href=\"http://www.txt2re.com/index.php3\" target=\"_blank\" style=\"\">正则表达式生成器</a></p><p class=\"cye-lm-tag\">2、<span style=\"\" class=\"cye-lm-tag\"><span style=\"\" class=\"cye-lm-tag\"><a href=\"http://www.regexlab.com/zh/regref.htm\" target=\"_blank\">正则表达式参考文档</a></span></span><br></p><p class=\"cye-lm-tag\">3、<a href=\"http://ipaddress.com/\" target=\"_blank\">网站ip查询</a></p><p class=\"cye-lm-tag\"><br></p>','2016-10-19 00:58:55','学习收藏','原创','收集的学习网站','2018-03-07 17:46:36','所有人可见',10),(12,'<p>Java8对接口进行了改进，允许在接口中定义默认方法，默认方法可以提供方法实现。</p><p>接口定义的基本语法如下：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\">[修饰符]  <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span>  接口名  <span class=\"hljs-keyword\">extends</span>  父接口1,父接口2...</span>{\r\n	零个到多个常量定义....\r\n	零个到多个抽象方法定义....\r\n	零个到多个内部类、接口、枚举定义....\r\n	零个到多个默认方法或类方法定义....\r\n}</code></pre><p>对上面语法的详细说明如下：</p><ul><li>修饰符可以是public或者省略，如果省略了public访问控制符，则默认采用包权限访问控制符，即只有在相同包结构下才能访问该接口。</li><li>接口名应与类名采用相同的命名规则。</li><li>一个接口可以有多个直接父接口，但接口只能继承接口，不能继承类。</li></ul><div><br></div><div><br></div><p>因为接口里定义的是多个类共同的公共行为规范，因此接口里的所有成员，包括常量、方法、内部类和内部枚举都是public访问权限。定义接口成员时，可以省略访问控制修饰符，如果指定访问控制修饰符，则只能使用public。例如下面两行代码的结果完全一样：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">int</span> MAX_SIZE = <span class=\"hljs-number\">50</span>;\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> MAX_SIZE = <span class=\"hljs-number\">50</span>;</code></pre><p><br></p><p>接口定义的方法只能是抽象方法、类方法或默认方法，因此如果不是定义默认方法，系统将自动为普通方法增加abstract修饰符；定义接口里的普通方法时不过是否使用public abstract修饰符，接口里的普通方法总是使用public abstract来修饰。普通方法不能有方法实现；但类方法、默认方法都必须有方法实现。下面定义一个接口：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.test;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">MyInterface</span> </span>{\r\n\r\n	<span class=\"hljs-comment\">//接口里定义的只能是常量</span>\r\n	<span class=\"hljs-keyword\">int</span> MAX_NUM = <span class=\"hljs-number\">100</span>;\r\n	\r\n	<span class=\"hljs-comment\">//接口里定义的普通方法只能是public的抽象方法</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method01</span><span class=\"hljs-params\">()</span></span>;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method02</span><span class=\"hljs-params\">(String param)</span></span>;\r\n	\r\n	<span class=\"hljs-comment\">//在接口中定义默认方法，需要使用default修饰</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method03</span><span class=\"hljs-params\">(String...msgs)</span></span>{\r\n		<span class=\"hljs-keyword\">for</span>(String msg : msgs){\r\n			System.out.println(msg);\r\n		}\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method04</span><span class=\"hljs-params\">()</span></span>{\r\n		System.out.println(<span class=\"hljs-string\">\"默认方法method04\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-comment\">//接口中定义类方法，需要使用static修饰</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">method05</span><span class=\"hljs-params\">()</span></span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"接口中的类方法\"</span>;\r\n	}\r\n	\r\n}\r\n</code></pre><p>Java8允许在接口中定义默认方法，默认方法必须使用default修饰，默认方法不能使用static修饰，而且无论程序是否指定，默认方法总是使用public修饰符。</p><p>Java8允许在接口中定义类方法，类方法必须使用static修饰，该方法不能使用default修饰，而且无论程序是否指定，默认方法总是使用public</p><p><br></p>','2016-10-20 21:19:36','java接口','原创','关于Java8改进的接口','2018-03-07 17:46:36','所有人可见',7),(13,'<p>Lambda表达式是Java8的重要更新，也是被广大开发者期待已久的新特性。Lambda表达式支持将代码块作为方法参数，Lambda表达式允许使用更简洁的代码来创建只有一个抽象方法的接口（这种接口被称为函数式接口）的实例。</p><p><font size=\"5\" color=\"#008000\">1、Lambda表达式入门</font></p><p>下面通过一个简单的例子初步了解Lambda表达式，代码如下：</p><p>Product接口只有一个抽象方法</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.lambda;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Product</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getProductDesc</span><span class=\"hljs-params\">(String buyer)</span></span>;\r\n	\r\n}\r\n</code></pre><p>People类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.lambda;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">People</span> </span>{\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">buy</span><span class=\"hljs-params\">(String buyer,Product product)</span></span>{\r\n		System.out.println(product.getProductDesc(buyer));\r\n	}\r\n	\r\n}\r\n</code></pre><p>测试类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.lambda;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test01</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		\r\n		People people = <span class=\"hljs-keyword\">new</span> People();\r\n		\r\n		<span class=\"hljs-comment\">//使用匿名内部类</span>\r\n		people.buy(<span class=\"hljs-string\">\"买家一\"</span>,<span class=\"hljs-keyword\">new</span> Product() {\r\n			<span class=\"hljs-meta\">@Override</span>\r\n			<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getProductDesc</span><span class=\"hljs-params\">(String buyer)</span> </span>{\r\n				<span class=\"hljs-comment\">// TODO Auto-generated method stub</span>\r\n				<span class=\"hljs-keyword\">return</span> buyer+<span class=\"hljs-string\">\"：一件衣服，￥99.9\"</span>;\r\n			}\r\n		});\r\n		\r\n		<span class=\"hljs-comment\">//使用Lambda表达式</span>\r\n		people.buy(<span class=\"hljs-string\">\"买家二\"</span>,(lambda)-&gt;{\r\n			<span class=\"hljs-keyword\">return</span> lambda+<span class=\"hljs-string\">\"：一条裤子，￥80\"</span>;\r\n		});\r\n		\r\n	}\r\n}\r\n</code></pre><p>输出如下：</p><p><img src=\"/MyBlog/files/article_pic/82b430d1-72bd-4c48-8352-bd8f28c041d2.png\" alt=\"搜狗截图20161020225022\" style=\"max-width:100%;\"></p><p>当使用Lambda表达式代替匿名内部类创建对象时，Lambda表达式的代码块将会代替实现抽象方法的方法体，Lambda表达式就相当于一个匿名方法。</p><p>从上面语法格式可以看出，Lambda表达式的主要作用就是代替匿名内部类的繁琐语法。它由下面三部分组成：</p><p></p><ul><li>形参列表。形参列表允许省略形参类型。如果形参列表中只有一个参数，甚至连形参列表的圆括号也可以省略。</li><li>箭头(-&gt;)。必须通过英文中画线号和大于符号组成。</li><li>代码块。如果代码块只包含一条语句，Lambda表达式允许省略代码块的花括号，那么这条语句就不要用花括号表示语句结束。Lambda代码块只有一条return语句，甚至可以省略return关键字。Lambda表达式需要返回值，而它的代码块中仅有一条省略了return的语句，Lambda表达式会自动返回这条语句的值。</li></ul><p></p><p><br></p>','2016-10-20 22:51:09','Lambda表达式','原创','Java8新增的Lambda表达式','2018-03-18 18:07:38','所有人可见',7),(14,'<p>具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.util;\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> java.text.SimpleDateFormat;\r\n<span class=\"hljs-keyword\">import</span> java.util.Date;\r\n<span class=\"hljs-comment\">/**\r\n * 日期工具类\r\n * <span class=\"hljs-doctag\">@author</span> Administrator\r\n *\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DateUtil</span> </span>{\r\n\r\n	<span class=\"hljs-comment\">//把日期类型转换为String</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">formatDate</span><span class=\"hljs-params\">(Date date,String format)</span></span>{\r\n		String result=<span class=\"hljs-string\">\"\"</span>;\r\n		SimpleDateFormat sdf=<span class=\"hljs-keyword\">new</span> SimpleDateFormat(format);\r\n		<span class=\"hljs-keyword\">if</span>(date!=<span class=\"hljs-keyword\">null</span>){\r\n			result=sdf.format(date);\r\n		}\r\n		<span class=\"hljs-keyword\">return</span> result;\r\n	}\r\n\r\n	<span class=\"hljs-comment\">//把字符串转换为日期类型</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Date <span class=\"hljs-title\">formatString</span><span class=\"hljs-params\">(String str,String format)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>{\r\n		<span class=\"hljs-keyword\">if</span>(str==<span class=\"hljs-keyword\">null</span>&amp;&amp;<span class=\"hljs-string\">\"\"</span>.equals(str)){\r\n			<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\r\n		}<span class=\"hljs-keyword\">else</span>{\r\n			SimpleDateFormat sdf=<span class=\"hljs-keyword\">new</span> SimpleDateFormat(format);\r\n			<span class=\"hljs-keyword\">return</span> sdf.parse(str);\r\n		}\r\n	}\r\n\r\n	<span class=\"hljs-comment\">//获取当前日期字符串(年月日时分秒)</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getCurrentDateStr</span><span class=\"hljs-params\">()</span><span class=\"hljs-keyword\">throws</span> Exception</span>{\r\n		Date date=<span class=\"hljs-keyword\">new</span> Date();\r\n		SimpleDateFormat sdf=<span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyyMMddHHmmss\"</span>);\r\n		<span class=\"hljs-keyword\">return</span> sdf.format(date);\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\r\n		System.out.println(formatDate(<span class=\"hljs-keyword\">new</span> Date(), <span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>));\r\n		Date date = formatString(<span class=\"hljs-string\">\"2016-12-10 22:38:09\"</span>, <span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);\r\n		System.out.println(date);\r\n		System.out.println(getCurrentDateStr());\r\n	}\r\n	\r\n}\r\n\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/bd1f3a2c-84b0-4e67-b441-199f51462813.png\" alt=\"搜狗截图20161021231216\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-21 23:12:55','java 日期工具类','原创','关于时间的util类：DateUtil.java','2018-03-18 18:07:38','所有人可见',11),(15,'<p>具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.util;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.PrintWriter;\r\n<span class=\"hljs-keyword\">import</span> java.io.StringWriter;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/8/3.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExceptionUtil</span> </span>{\r\n	<span class=\"hljs-comment\">//获取异常信息字符串</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getStackTrace</span><span class=\"hljs-params\">(Exception e)</span> </span>{\r\n        StringWriter writer = <span class=\"hljs-keyword\">new</span> StringWriter();\r\n        e.printStackTrace(<span class=\"hljs-keyword\">new</span> PrintWriter(writer,<span class=\"hljs-keyword\">true</span>));\r\n        <span class=\"hljs-keyword\">return</span> writer.toString();\r\n    }\r\n    \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		<span class=\"hljs-keyword\">try</span>{\r\n			<span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">0</span>;\r\n		}<span class=\"hljs-keyword\">catch</span>(Exception e){\r\n			e.printStackTrace();\r\n			System.out.println(<span class=\"hljs-string\">\"---------------------------------------------------------\"</span>);\r\n			System.out.println(getStackTrace(e));\r\n		}\r\n	}\r\n}\r\n</code></pre><p></p><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/2b37ea6c-7efe-4ed0-af38-865a7fa0862c.png\" alt=\"搜狗截图20161021232108\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-21 23:21:52','Exception异常工具类','原创','获取异常信息工具类','2018-03-18 18:07:38','所有人可见',11),(16,'<p>代码如下：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.app.utils;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.UUID;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UUIDUtil</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getUUID</span><span class=\"hljs-params\">()</span></span>{\r\n		UUID uuid=UUID.randomUUID();\r\n		<span class=\"hljs-comment\">/*return uuid.toString().replace(\"-\",\"\");	//去掉“-”*/</span>\r\n		<span class=\"hljs-keyword\">return</span> uuid.toString();\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		System.out.println(UUIDUtil.getUUID());\r\n	}\r\n\r\n}\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/b02c5364-240e-498a-9bf6-2c39a1076769.png\" alt=\"搜狗截图20161021233005\" style=\"max-width:100%;\"></p><p><font face=\"楷体\" size=\"5\"><b><font color=\"#008000\">该工具类可用于生成唯一的文件名，或者生成数据库中的主键值</font></b></font><br></p><p><br></p>','2016-10-21 23:36:31','文件名工具类','原创','字符串工具类：获取唯一的字符串（永不重复）','2018-03-18 18:07:38','所有人可见',11),(17,'<p>代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.util;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StringUtil</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">(String str)</span></span>{\r\n		<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"\"</span>.equals(str)|| str==<span class=\"hljs-keyword\">null</span>){\r\n			<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\r\n		}<span class=\"hljs-keyword\">else</span>{\r\n			<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\r\n		}\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isNotEmpty</span><span class=\"hljs-params\">(String str)</span></span>{\r\n		<span class=\"hljs-keyword\">return</span> !isEmpty(str);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		String string1 = <span class=\"hljs-string\">\"\"</span>;\r\n		System.out.println(<span class=\"hljs-string\">\"string1是否为空：\"</span>+isEmpty(string1));\r\n		String string2 = <span class=\"hljs-keyword\">null</span>;\r\n		System.out.println(<span class=\"hljs-string\">\"string2是否为空：\"</span>+isEmpty(string2));\r\n		String string3 = <span class=\"hljs-string\">\"随便\"</span>;\r\n		System.out.println(<span class=\"hljs-string\">\"string3是否为空：\"</span>+isEmpty(string3));\r\n	}\r\n	\r\n}\r\n</code></pre><p>输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/c6cbb07b-e340-439c-9a5e-ae66ad22bd1b.png\" alt=\"搜狗截图20161022100729\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-22 10:08:06','StringUtil，字符串工具类','原创','字符串工具类：StringUtil.java判断字符串是否为空','2018-03-18 18:07:38','所有人可见',11),(18,'<p>代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.util;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\r\n<span class=\"hljs-keyword\">import</span> java.io.InputStream;\r\n<span class=\"hljs-keyword\">import</span> java.util.Properties;\r\n<span class=\"hljs-comment\">/*\r\n *该类用于获取配置文件中的键值对 \r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PropertiesUtil</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getValue</span><span class=\"hljs-params\">(String key)</span></span>{\r\n		Properties prop = <span class=\"hljs-keyword\">new</span> Properties();\r\n		InputStream input = <span class=\"hljs-keyword\">new</span> PropertiesUtil().getClass().getResourceAsStream(<span class=\"hljs-string\">\"/xxx.properties\"</span>);\r\n		<span class=\"hljs-keyword\">try</span> {\r\n			prop.load(input);\r\n		} <span class=\"hljs-keyword\">catch</span> (IOException e) {\r\n			e.printStackTrace();\r\n		}\r\n		<span class=\"hljs-keyword\">return</span> (String)prop.get(key);\r\n	}\r\n}\r\n</code></pre><p>其中配置文件xxx.properties要放在项目的根目录下面<br></p><p><br></p>','2016-10-22 10:13:17','配置文件工具类','原创','配置文件工具类：PropertiesUtil.java','2018-03-07 17:46:36','所有人可见',11),(19,'<p>详情看下面代码：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.servlet;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\r\n<span class=\"hljs-keyword\">import</span> java.io.PrintWriter;\r\n\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.annotation.WebServlet;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpSession;\r\n\r\n<span class=\"hljs-annotation\">@WebServlet</span>(value=<span class=\"hljs-string\">\"/index\"</span>)\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IndexServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span></span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{\r\n		<span class=\"hljs-keyword\">this</span>.doPost(request, response);\r\n	}\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{\r\n		response.setContentType(<span class=\"hljs-string\">\"text/plain;charset=utf-8\"</span>);\r\n		request.setCharacterEncoding(<span class=\"hljs-string\">\"utf-8\"</span>);\r\n		response.setCharacterEncoding(<span class=\"hljs-string\">\"utf-8\"</span>);\r\n		\r\n		PrintWriter out = response.getWriter();\r\n		out.println(<span class=\"hljs-string\">\"Protocol : \"</span> + request.getProtocol());   \r\n		out.println(<span class=\"hljs-string\">\"Scheme : \"</span> + request.getScheme());   \r\n		out.println(<span class=\"hljs-string\">\"Server Name : \"</span> + request.getServerName() );   \r\n		out.println(<span class=\"hljs-string\">\"Server Port : \"</span> + request.getServerPort());   \r\n		out.println(<span class=\"hljs-string\">\"Protocol : \"</span> + request.getProtocol());   \r\n		out.println(<span class=\"hljs-string\">\"Server Info : \"</span> + getServletConfig().getServletContext().getServerInfo());   \r\n		out.println(<span class=\"hljs-string\">\"Remote Addr : \"</span> + request.getRemoteAddr());   \r\n		out.println(<span class=\"hljs-string\">\"Remote Host : \"</span> + request.getRemoteHost());   \r\n		out.println(<span class=\"hljs-string\">\"Character Encoding : \"</span> + request.getCharacterEncoding());   \r\n		out.println(<span class=\"hljs-string\">\"Content Length : \"</span> + request.getContentLength());   \r\n		out.println(<span class=\"hljs-string\">\"Content Type : \"</span>+ request.getContentType());   \r\n		out.println(<span class=\"hljs-string\">\"Auth Type : \"</span> + request.getAuthType());   \r\n		out.println(<span class=\"hljs-string\">\"HTTP Method : \"</span> + request.getMethod());   \r\n		out.println(<span class=\"hljs-string\">\"Path Info : \"</span> + request.getPathInfo());   \r\n		out.println(<span class=\"hljs-string\">\"Path Trans : \"</span> + request.getPathTranslated());   \r\n		out.println(<span class=\"hljs-string\">\"Query String : \"</span> + request.getQueryString());   \r\n		out.println(<span class=\"hljs-string\">\"Remote User : \"</span> + request.getRemoteUser());   \r\n		out.println(<span class=\"hljs-string\">\"Session Id : \"</span> + request.getRequestedSessionId());   \r\n		out.println(<span class=\"hljs-string\">\"Request URI : \"</span> + request.getRequestURI());   \r\n		out.println(<span class=\"hljs-string\">\"Servlet Path : \"</span> + request.getServletPath());   \r\n		out.println(<span class=\"hljs-string\">\"Accept : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Accept\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Host : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Host\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Referer : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Referer\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Accept-Language : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Accept-Language\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Accept-Encoding : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Accept-Encoding\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"User-Agent : \"</span> + request.getHeader(<span class=\"hljs-string\">\"User-Agent\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Connection : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Connection\"</span>));   \r\n		out.println(<span class=\"hljs-string\">\"Cookie : \"</span> + request.getHeader(<span class=\"hljs-string\">\"Cookie\"</span>));   \r\n		out.println();\r\n		HttpSession session = request.getSession();\r\n		out.println(<span class=\"hljs-string\">\"Created : \"</span> + session.getCreationTime());   \r\n		out.println(<span class=\"hljs-string\">\"LastAccessed : \"</span> + session.getLastAccessedTime());\r\n		\r\n		out.println();\r\n		out.println(<span class=\"hljs-string\">\"ContextPath : \"</span>+request.getContextPath());\r\n		out.println(<span class=\"hljs-string\">\"RequestURL : \"</span>+request.getRequestURL());\r\n		\r\n		StringBuffer sb = request.getRequestURL();\r\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String contextPath = request.getContextPath();\r\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; <span class=\"hljs-keyword\">int</span> tag = sb.toString().indexOf(contextPath);\r\n        &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; String result = sb.toString().substring(<span class=\"hljs-number\">0</span>,tag);\r\n		out.println(<span class=\"hljs-string\">\"只获取域名：\"</span>+result);\r\n		out.println(<span class=\"hljs-string\">\"获取域名+项目名：\"</span>+result+request.getContextPath());\r\n	}\r\n}\r\n</code></pre><p>访问<span style=\"\">http://localhost:8080/ServletTestProject/index后输出如下：</span></p><p><span style=\"\"><img src=\"/MyBlog/files/article_pic/11a7c08a-7dae-4610-a884-eba6941132c8.png\" alt=\"搜狗截图20161022120514\" style=\"max-width:100%;\"></span></p><p><br></p>','2016-10-22 12:11:05','HttpServletRequest','原创','关于HttpServletRequest中的一些方法','2018-03-18 18:07:38','所有人可见',12),(20,'<p>在些项目过程中，我们有时候需要提取html代码中的纯文本内容，忽略其中的标签。这个工具类的作用就是提取html代码中的纯文本。首先，在写代码之前要先添加这两个jar包：<a href=\"https://mvnrepository.com/artifact/org.htmlparser/htmllexer/2.1\" target=\"_blank\" style=\"\">htmllexer-2.1.jar</a>、<a href=\"https://mvnrepository.com/artifact/org.htmlparser/htmlparser/2.1\" target=\"_blank\" style=\"\">htmlparser-2.1.jar</a>。具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.util;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.htmlparser.Parser;\r\n<span class=\"hljs-keyword\">import</span> org.htmlparser.visitors.TextExtractingVisitor;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/7/20.\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HtmlUtil</span> </span>{\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>{\r\n		String htmlText01 = <span class=\"hljs-string\">\"&lt;div id=\'signals\' class=\'content\'&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-align: center;\'&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;img src=\'http://tu.qiumibao.com/uploads/day_161022/201610221022518879.png\'\"</span>+\r\n				<span class=\"hljs-string\">\"alt=\'\'&gt;&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;北京时间10月22日，快船球星布雷克-格里芬在接受采访时表示，自己已经完全恢复健康，并且感觉状态不错。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;“我感觉不错，就像在过去几年的感觉一样，事实上还是有点吃惊的，”格里芬说到。“训练营的时候感觉不错，但你永远不知道在实际比赛中的情况和高强度训练下会有什么反应。但我感觉还不错。”&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;快船明星前锋上赛季因伤仅打了35场常规赛比赛，又在季后赛中再次受伤，他在今年4月底接受了左腿股四头肌撕裂修复手术。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;格里芬在季前赛场均23.1分钟可以贡献16.4分5.6篮板，格里芬表示，自己现在的心态和状态都还不错。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;“打过了背靠背的比赛或者连续几天艰苦训练后打比赛，仍然在第二天感觉不错。我仍然可以投入训练，甚至做得更多，这些都让我很放心。”格里芬说到。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;格里芬也表示，他在今夏恢复健康后改变了一些自己的训练习惯。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;“(伤病)触发了所有的事情，”格里芬说到。“可能双腿会承担更大的重量，过去几个赛季我都没这么做，但今夏重新这么做了。”格里芬说到。&lt;/p&gt;\"</span>+\r\n				<span class=\"hljs-string\">\"&lt;p style=\'text-indent: 2em;\'&gt;(Gankson)&lt;/p&gt;&lt;/div&gt;\"</span>;\r\n\r\n		String result = getHtmlParser(htmlText01);\r\n		System.out.println(result);\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">getHtmlParser</span><span class=\"hljs-params\">(String string)</span><span class=\"hljs-keyword\">throws</span> Exception</span>{\r\n		Parser parser = <span class=\"hljs-keyword\">new</span> Parser(string);\r\n		TextExtractingVisitor visitor = <span class=\"hljs-keyword\">new</span> TextExtractingVisitor();\r\n		parser.visitAllNodesWith(visitor);\r\n		<span class=\"hljs-keyword\">return</span> visitor.getExtractedText();\r\n	}\r\n}\r\n</code></pre><p>输出结果为：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"apache hljs\" codemark=\"1\">北京时间<span class=\"hljs-keyword\">10</span>月22日，快船球星布雷克-格里芬在接受采访时表示，自己已经完全恢复健康，并且感觉状态不错。“我感觉不错，就像在过去几年的感觉一样，事实上还是有点吃惊的，”格里芬说到。“训练营的时候感觉不错，但你永远不知道在实际比赛中的情况和高强度训练下会有什么反应。但我感觉还不错。”快船明星前锋上赛季因伤仅打了35场常规赛比赛，又在季后赛中再次受伤，他在今年4月底接受了左腿股四头肌撕裂修复手术。格里芬在季前赛场均23.1分钟可以贡献16.4分5.6篮板，格里芬表示，自己现在的心态和状态都还不错。“打过了背靠背的比赛或者连续几天艰苦训练后打比赛，仍然在第二天感觉不错。我仍然可以投入训练，甚至做得更多，这些都让我很放心。”格里芬说到。格里芬也表示，他在今夏恢复健康后改变了一些自己的训练习惯。“(伤病)触发了所有的事情，”格里芬说到。“可能双腿会承担更大的重量，过去几个赛季我都没这么做，但今夏重新这么做了。”格里芬说到。(Gankson)\r\n</code></pre><p>从上面结果可以看出，夹杂大量标签的html代码经过工具类处理后只输出标签中的纯文本内容。<br></p><p><br></p>','2016-10-22 13:55:56','解析html代码，提取纯文本','原创','提取html代码中的纯文本：HtmlUtil.java','2018-03-07 17:46:36','所有人可见',11),(21,'<p>首先需要定义一个文件进行文件上传的页面upload.jsp，具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"cs hljs\" codemark=\"1\">&lt;%@ page language=<span class=\"hljs-string\">\"java\"</span> contentType=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span>\r\n    pageEncoding=<span class=\"hljs-string\">\"UTF-8\"</span>%&gt;\r\n&lt;!DOCTYPE html PUBLIC <span class=\"hljs-string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"hljs-string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;meta http-equiv=<span class=\"hljs-string\">\"Content-Type\"</span> content=<span class=\"hljs-string\">\"text/html; charset=UTF-8\"</span>&gt;\r\n&lt;title&gt;文件上传&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n	&lt;form method=<span class=\"hljs-string\">\"post\"</span> action=<span class=\"hljs-string\">\"${pageContext.request.contextPath }/upload\"</span> enctype=<span class=\"hljs-string\">\"multipart/form-data\"</span>&gt;\r\n		&lt;span&gt;文件名：&lt;/span&gt;&lt;input type=<span class=\"hljs-string\">\"text\"</span> id=<span class=\"hljs-string\">\"name\"</span> name=<span class=\"hljs-string\">\"name\"</span>&gt;\r\n		&lt;p&gt;&lt;/p&gt;\r\n		&lt;span&gt;选择文件：&lt;/span&gt;&lt;input type=<span class=\"hljs-string\">\"file\"</span> name=<span class=\"hljs-string\">\"file\"</span>&gt;\r\n		&lt;p&gt;&lt;/p&gt;\r\n		&lt;input type=<span class=\"hljs-string\">\"submit\"</span> <span class=\"hljs-keyword\">value</span>=<span class=\"hljs-string\">\"上传\"</span>&gt;\r\n	&lt;/form&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre><span></span><p>然后定义一个处理文件上传的servlet类：UploadServlet.java，具体代码如下：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.servlet;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\r\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\r\n\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.annotation.MultipartConfig;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.annotation.WebServlet;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServlet;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;\r\n<span class=\"hljs-keyword\">import</span> javax.servlet.http.Part;\r\n\r\n<span class=\"hljs-annotation\">@WebServlet</span>(name=<span class=\"hljs-string\">\"upload\"</span>,urlPatterns=<span class=\"hljs-string\">\"/upload\"</span>)\r\n<span class=\"hljs-annotation\">@MultipartConfig</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span></span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">1L</span>;\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doGet</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{\r\n		<span class=\"hljs-keyword\">this</span>.doPost(request, response);\r\n	}\r\n	\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doPost</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException </span>{\r\n		request.setCharacterEncoding(<span class=\"hljs-string\">\"utf-8\"</span>);\r\n		response.setContentType(<span class=\"hljs-string\">\"text/plain;charset=utf-8\"</span>);\r\n		\r\n		String name = request.getParameter(<span class=\"hljs-string\">\"name\"</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"普通的name参数为：\"</span>+name);\r\n		\r\n		Part part = request.getPart(<span class=\"hljs-string\">\"file\"</span>);\r\n		\r\n		<span class=\"hljs-comment\">//下面两种情况均表示用户没有选择文件</span>\r\n		<span class=\"hljs-keyword\">if</span>(part==<span class=\"hljs-keyword\">null</span>||part.getSubmittedFileName()==<span class=\"hljs-string\">\"\"</span>){\r\n			System.out.println(<span class=\"hljs-string\">\"文件为空\"</span>);\r\n			System.out.println(<span class=\"hljs-string\">\"---------------------------------------\"</span>);\r\n			<span class=\"hljs-keyword\">return</span>;\r\n		}\r\n		String oldFileName = part.getSubmittedFileName();\r\n		System.out.println(<span class=\"hljs-string\">\"原文件名：\"</span>+oldFileName);\r\n		System.out.println(<span class=\"hljs-string\">\"上传文件的类型为：\"</span>+part.getContentType());\r\n		System.out.println(<span class=\"hljs-string\">\"上传文件的大小为：\"</span>+part.getSize()+<span class=\"hljs-string\">\"(byte)\"</span>);\r\n		Collection&lt;String&gt; headerNames = part.getHeaderNames();\r\n		<span class=\"hljs-keyword\">for</span>(String headerName : headerNames){\r\n			System.out.println(headerName+<span class=\"hljs-string\">\" --&gt; \"</span>+part.getHeader(headerName));\r\n		}\r\n		\r\n		<span class=\"hljs-comment\">//对文件进行重命名</span>\r\n		StringBuffer newFileName = <span class=\"hljs-keyword\">new</span> StringBuffer(System.currentTimeMillis()+<span class=\"hljs-string\">\"\"</span>);\r\n		<span class=\"hljs-comment\">//如果原文件有后缀名，则把后缀名追加到新文件名上</span>\r\n		<span class=\"hljs-keyword\">if</span>(oldFileName.lastIndexOf(<span class=\"hljs-string\">\".\"</span>)!=-<span class=\"hljs-number\">1</span>){\r\n			newFileName.append(oldFileName.substring(oldFileName.lastIndexOf(<span class=\"hljs-string\">\".\"</span>)));\r\n		}\r\n		\r\n		part.write(getServletContext().getRealPath(<span class=\"hljs-string\">\"/files/\"</span>)+newFileName);\r\n		System.out.println(getServletContext().getRealPath(<span class=\"hljs-string\">\"/files/\"</span>)+newFileName);\r\n		System.out.println(<span class=\"hljs-string\">\"---------------------------------------\"</span>);\r\n	}\r\n}\r\n</code></pre><p></p><p>然后进行三次测试，其中第一次上传文件为空，第二次上传的文件没有后缀名，第三次上传一张图片，具体控制台输出结果如下：</p><p><img src=\"/MyBlog/files/article_pic/b4acbda3-a39b-4505-aed3-7342487ef8f7.png\" alt=\"搜狗截图20161022173302\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-22 17:00:44','servlet文件上传，图片上传','原创','使用servlet3.0进行文件上传','2018-03-18 18:07:38','所有人可见',12),(22,'<p><font face=\"宋体\" size=\"4\" color=\"#808000\">1、正则表达式所支持的合法字符</font></p><table style=\"color:gray;\" class=\"\" border=\"1\"><tbody><tr><td style=\"width:20%;\" align=\"center\"><span><font color=\"#880000\">&nbsp;字符</font><br></span></td><td align=\"center\" style=\"text-align: center;\"><span><font color=\"#880000\">解释 </font><br></span></td></tr><tr><td align=\"center\"><span></span>x<br></td><td><span></span>字符x（x可代表任何合法的字符）<br></td></tr><tr><td align=\"center\"><span>\\0mnn</span></td><td><span></span>八进制数0mnn所表示的字符<br></td></tr><tr><td align=\"center\"><span>\\xhh</span></td><td><span>十六进制值0xhh所表示的字符</span></td></tr><tr><td align=\"center\"><span>\\uhhhh</span></td><td><span>十六进制值0xhhhh所表示的Unicode字符</span></td></tr><tr><td align=\"center\"><span>\\t</span></td><td><span>制表符(\'\\u0009\')</span></td></tr><tr><td align=\"center\"><span>\\n</span></td><td><span>换行符(\'\\u000A\')</span></td></tr><tr><td align=\"center\"><span>\\r</span></td><td><span>回车符(\'\\u000D\')</span></td></tr><tr><td valign=\"top\" align=\"center\">\\f<br></td><td valign=\"top\">换页符(\'\\u000C\')<br></td></tr><tr><td valign=\"top\" align=\"center\">\\a<br></td><td valign=\"top\">报警(bell)符(\'\\u0007\')<br></td></tr><tr><td valign=\"top\" align=\"center\">\\e<br></td><td valign=\"top\">Escape符(\'\\u001B\')<br></td></tr><tr><td valign=\"top\" align=\"center\">\\cx<br></td><td valign=\"top\">x对应的控制符。例如，\\cM匹配Ctrl-M。x值必须为A~Z或a~z之一<br></td></tr></tbody></table><p><br></p><p><font face=\"宋体\" size=\"4\" color=\"#808000\">2、正则表达式中的特殊字符</font></p><p><img src=\"/MyBlog/files/article_pic/f270343b-cfb9-4f59-b24a-f39402f66da8.png\" alt=\"搜狗截图20161022233513\" style=\"max-width:100%;\"></p><p><br></p><p><font size=\"4\" color=\"#808000\">3、预定义字符</font></p><table style=\"color:gray;\" class=\"\" border=\"1\"><tbody><tr><td style=\"text-align: center;\">&nbsp;<font color=\"#880000\">预定义字符</font></td><td style=\"text-align: center;\"><font color=\"#880000\">说明&nbsp;</font></td></tr><tr><td style=\"text-align: center;\">&nbsp;.</td><td>&nbsp;可以匹配任何字符</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\d</td><td>&nbsp;匹配0~9的所有数字</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\D</td><td>&nbsp;匹配非数字</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\s</td><td>&nbsp;匹配所有的空白字符，包括空格、制表符、回车符、换页符、换行符等</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\S</td><td>&nbsp;匹配所有的非空白字符</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\w</td><td>&nbsp;匹配所有的单词字符，包括0~9所有数字、26个大小写英文字母和下划线(_)</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\W</td><td>&nbsp;匹配所有的非单词字符</td></tr></tbody></table><br><p><font color=\"#008080\">上面七个预定义字符其实很容易记忆——d是digit的意思，代表数字；s是space的意思，代表空格；w是word的意思，代表单词。d、s、w的大写形式恰好匹配与之前相反的字符。</font></p><p><br></p><p><font color=\"#808000\" size=\"4\">4、方括号表达式</font></p><table style=\"color:gray;\" class=\"\" border=\"1\"><tbody><tr><td style=\"text-align: center;\">&nbsp;<font color=\"#880000\">方括号表达式</font></td><td style=\"text-align: center;\"><font color=\"#880000\">说明</font>&nbsp;</td></tr><tr><td style=\"text-align: center;\">&nbsp;表示枚举</td><td>&nbsp;例如[abc]，表示a、b、c其中任意一个字符；[gz]，表示g、z其中任意一个字符&nbsp;</td></tr><tr><td style=\"text-align: center;\">&nbsp;表示范围</td><td>&nbsp;例如[a-f]，表示a~f范围内的任意字符；[\\\\u0041-\\\\u0056]，表示十六进制字符\\u0041到\\u0056范围的字符。<br>&nbsp;范围可以和枚举结合使用，如[a-cx-z]，表示a~c、x~z范围内的任意字符</td></tr><tr><td style=\"text-align: center;\">&nbsp;表示求否：^</td><td>&nbsp;例如[^abc]，表示非a、b、c的任意字符；[^a-f]，表示不是a~f范围内的任意字符</td></tr><tr><td style=\"text-align: center;\">&nbsp;表示\"与\"运算符：&&amp;</td><td>&nbsp;例如[a-z&amp;&amp;[def]]，求a~z的[def]的交集，表示d、e或f<br>&nbsp;[a-z&amp;&amp;[^bc]]，a~z范围内的所有字符，除了b和c之外，即[ad-z]<br>&nbsp;[a-z&amp;&amp;[^m-p]]，a~z范围内的所有字符，除了m~p范围之外的字符，即[a-lq-z]</td></tr><tr><td>&nbsp;表示“并”运算符</td><td>&nbsp;并运算与前面的枚举类似。例如[a-d[m-p]]，表示[a-dm-p]</td></tr></tbody></table><br><p><font color=\"#008080\">正则表达式还支持圆括号表达式，用于将多个表达式组成一个子表达式，圆括号中可以使用“或”运算符(|)，例如，正则表达式\"((public)|(protected)|(private))\"用于匹配java的三个访问控制符其中一个。</font></p><p><br></p><p><font size=\"4\" color=\"#808000\">5、边界匹配符</font></p><table style=\"color:gray;\" class=\"\" border=\"1\"><tbody><tr><td style=\"text-align: center;\">&nbsp;<font color=\"#880000\">边界匹配符</font></td><td style=\"text-align: center;\">&nbsp;<font color=\"#880000\">说明</font></td></tr><tr><td style=\"text-align: center;\">&nbsp;^</td><td>&nbsp;行的开头</td></tr><tr><td style=\"text-align: center;\">&nbsp;$</td><td>&nbsp;行的结尾</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\b</td><td>&nbsp;单词的边界</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\B</td><td>&nbsp;非单词的边界</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\A</td><td>&nbsp;输入的开头&nbsp;</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\G</td><td>&nbsp;前一个匹配的结尾</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\Z</td><td>&nbsp;输入的结尾，仅用于最后的结束符</td></tr><tr><td style=\"text-align: center;\">&nbsp;\\z</td><td>&nbsp;输入的结尾</td></tr></tbody></table><br><p><font color=\"#008080\">对上面的匹配符作进一步说明：</font></p><p><img src=\"/MyBlog/files/article_pic/e890c19e-19c8-4b62-a57f-8333a6fd5714.png\" alt=\"搜狗截图20161024103532\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-22 23:23:47','正则表达式','原创','正则表达式基础篇','2018-03-18 18:07:38','所有人可见',7),(23,'<p>今天在学习正则表达式的时候，看到使用正则表达式匹配网址和图片url，也是心血来潮想用java简单实现爬取网页图片，废话不多说，直接贴代码：</p><pre style=\"max-width:100%;overflow-x:auto;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.urlResource;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.File;\r\n<span class=\"hljs-keyword\">import</span> java.io.FileOutputStream;\r\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\r\n<span class=\"hljs-keyword\">import</span> java.io.InputStream;\r\n<span class=\"hljs-keyword\">import</span> java.io.OutputStream;\r\n<span class=\"hljs-keyword\">import</span> java.net.HttpURLConnection;\r\n<span class=\"hljs-keyword\">import</span> java.net.URL;\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n<span class=\"hljs-keyword\">import</span> java.util.regex.Matcher;\r\n<span class=\"hljs-keyword\">import</span> java.util.regex.Pattern;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * 抓取图片\r\n * <span class=\"hljs-doctag\">@author</span> Administrator\r\n *\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CatchImg</span> </span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;String&gt; urlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();	<span class=\"hljs-comment\">//存储网址</span>\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span>  <span class=\"hljs-keyword\">int</span> index = <span class=\"hljs-number\">0</span>;		<span class=\"hljs-comment\">//urlList的当前索引</span>\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CatchImg</span><span class=\"hljs-params\">(String url)</span></span>{\r\n		urlList.add(url);	<span class=\"hljs-comment\">//初始化实例的时候添加一个url</span>\r\n	}\r\n\r\n	<span class=\"hljs-comment\">//获取新的网页url</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getUrl</span><span class=\"hljs-params\">()</span></span>{\r\n		<span class=\"hljs-keyword\">try</span>{\r\n			URL url = <span class=\"hljs-keyword\">new</span> URL(urlList.get(index));	<span class=\"hljs-comment\">//获取当前要抓取图片的页面url</span>\r\n			StringBuffer sb = <span class=\"hljs-keyword\">new</span> StringBuffer();\r\n			HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();\r\n			InputStream input = urlConnection.getInputStream();	<span class=\"hljs-comment\">//获取输入流</span>\r\n			String contentType = urlConnection.getContentType();<span class=\"hljs-comment\">//获取网页内容类型</span>\r\n			<span class=\"hljs-keyword\">int</span> tempIndex = -<span class=\"hljs-number\">1</span>;\r\n			String ecoding = <span class=\"hljs-string\">\"utf-8\"</span>;		<span class=\"hljs-comment\">//默认网页编码为utf-8</span>\r\n			<span class=\"hljs-keyword\">if</span>(contentType!=<span class=\"hljs-keyword\">null</span>){\r\n				tempIndex = contentType.lastIndexOf(<span class=\"hljs-string\">\"charset=\"</span>);\r\n				<span class=\"hljs-keyword\">if</span>(tempIndex!=-<span class=\"hljs-number\">1</span>){\r\n					ecoding = contentType.substring(tempIndex+<span class=\"hljs-number\">8</span>);<span class=\"hljs-comment\">//获取网页真正的编码</span>\r\n				}\r\n			}\r\n			System.out.println(<span class=\"hljs-string\">\"当前网址：\"</span>+urlList.get(index)+<span class=\"hljs-string\">\"，编码：\"</span>+ecoding);\r\n			<span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">1024</span>];\r\n			<span class=\"hljs-keyword\">int</span> hasRead = <span class=\"hljs-number\">0</span>;\r\n			<span class=\"hljs-keyword\">while</span>((hasRead=input.read(buffer))!=-<span class=\"hljs-number\">1</span>){\r\n				<span class=\"hljs-comment\">//按照指定的编码获取网页文本</span>\r\n				sb.append(<span class=\"hljs-keyword\">new</span> String(buffer,<span class=\"hljs-number\">0</span>,hasRead,ecoding));\r\n			}\r\n			<span class=\"hljs-keyword\">if</span>(input!=<span class=\"hljs-keyword\">null</span>){\r\n				input.close();\r\n			}\r\n			\r\n			String patternString = <span class=\"hljs-string\">\"[a-zA-z]+://[^\\\\s\\\"\']*\"</span>;<span class=\"hljs-comment\">//	匹配网址</span>\r\n			List&lt;String&gt; imgUrlList = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\r\n\r\n			Matcher m = Pattern.compile(patternString).matcher(sb.toString());\r\n			<span class=\"hljs-keyword\">while</span>(m.find()){\r\n				String newUrl = m.group();\r\n				<span class=\"hljs-comment\">//匹配图片和网址的url</span>\r\n				<span class=\"hljs-keyword\">if</span>(newUrl.endsWith(<span class=\"hljs-string\">\".jpg\"</span>)||newUrl.endsWith(<span class=\"hljs-string\">\".JPG\"</span>)||\r\n					newUrl.endsWith(<span class=\"hljs-string\">\".jpeg\"</span>)||newUrl.endsWith(<span class=\"hljs-string\">\".JPEG\"</span>)||\r\n					newUrl.endsWith(<span class=\"hljs-string\">\".bmp\"</span>)||newUrl.endsWith(<span class=\"hljs-string\">\".BMP\"</span>)||\r\n					newUrl.endsWith(<span class=\"hljs-string\">\".png\"</span>)||newUrl.endsWith(<span class=\"hljs-string\">\".PNG\"</span>)||\r\n					newUrl.endsWith(<span class=\"hljs-string\">\".gif\"</span>)||newUrl.endsWith(<span class=\"hljs-string\">\".GIF\"</span>)){\r\n				&nbsp;&nbsp;&nbsp; imgUrlList.add(newUrl);<span class=\"hljs-comment\">//如果满足条件，则加入到存储图片的线性表中</span>\r\n				}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!urlList.contains(newUrl)){\r\n					<span class=\"hljs-comment\">//如果存储网址的线性表中不存在当前url，则把url加入线性表中</span>\r\n					<span class=\"hljs-comment\">//并且该只能是本站的网址</span>\r\n					<span class=\"hljs-keyword\">if</span>(newUrl.contains(<span class=\"hljs-string\">\"http://picxw.com\"</span>)){\r\n						urlList.add(newUrl);\r\n					}\r\n				}\r\n			}\r\n			\r\n			<span class=\"hljs-comment\">/*\r\n			 * 下面表达式匹配“/uploads/allimg/c131124/13U291Y5195F-245919.jpg”\r\n			 * 这样src是相对路径的图片，下面如果其他网址遇到类似情况也可相同方式处理\r\n			 * */</span>\r\n			Matcher m2 = Pattern.compile(<span class=\"hljs-string\">\"/uploads/allimg/\\\\w*[^\\\\.]*\\\\.jpg\"</span>).matcher(sb.toString());\r\n			<span class=\"hljs-keyword\">while</span>(m2.find()){\r\n				<span class=\"hljs-comment\">//手动拼接成完整的域名</span>\r\n				imgUrlList.add(<span class=\"hljs-string\">\"http://picxw.com\"</span>+m2.group());\r\n			}\r\n			\r\n			downloadImg(imgUrlList);	<span class=\"hljs-comment\">//下载已经查找到url的图片</span>\r\n			index++;		<span class=\"hljs-comment\">//索引后移一位，处理下一个网址url</span>\r\n			\r\n			<span class=\"hljs-comment\">//如果网址线性表中还存在未处理的网址，则继续执行该方法，否则退出</span>\r\n			<span class=\"hljs-keyword\">if</span>(index&lt;urlList.size()){\r\n				getUrl();\r\n			}<span class=\"hljs-keyword\">else</span>{\r\n				<span class=\"hljs-keyword\">return</span>;\r\n			}\r\n		}<span class=\"hljs-keyword\">catch</span>(Exception e){\r\n			<span class=\"hljs-comment\">//无论发生什么异常，索引都向后移动一位(即跳过当前url，处理下一个)</span>\r\n			index++;\r\n			<span class=\"hljs-keyword\">if</span>(index&lt;urlList.size()-<span class=\"hljs-number\">1</span>){\r\n				getUrl();\r\n			}<span class=\"hljs-keyword\">else</span>{\r\n				<span class=\"hljs-keyword\">return</span>;\r\n			}\r\n		}\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">downloadImg</span><span class=\"hljs-params\">(List&lt;String&gt; imgUrlList)</span> <span class=\"hljs-keyword\">throws</span> IOException, InterruptedException</span>{\r\n		<span class=\"hljs-comment\">//遍历存储图片url的线性表</span>\r\n		<span class=\"hljs-keyword\">for</span>(String imgUrl : imgUrlList){\r\n			URL url = <span class=\"hljs-keyword\">new</span> URL(imgUrl);\r\n			String fileName = url.getFile();\r\n			fileName = fileName.substring(fileName.lastIndexOf(<span class=\"hljs-string\">\"/\"</span>), fileName.length());\r\n			\r\n			System.out.println(fileName);\r\n			\r\n			OutputStream output = <span class=\"hljs-keyword\">new</span> FileOutputStream(<span class=\"hljs-keyword\">new</span> File(<span class=\"hljs-string\">\"image03\"</span>+fileName));\r\n			InputStream input = url.openStream();\r\n			<span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">1024</span>];\r\n			<span class=\"hljs-keyword\">int</span> hasRead = <span class=\"hljs-number\">0</span>;\r\n			<span class=\"hljs-keyword\">while</span>((hasRead=input.read(buffer))!=-<span class=\"hljs-number\">1</span>){\r\n				output.write(buffer, <span class=\"hljs-number\">0</span>, hasRead);\r\n			}\r\n			input.close();\r\n			output.close();\r\n		}\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException, InterruptedException </span>{\r\n		CatchImg catchImg = <span class=\"hljs-keyword\">new</span> CatchImg(<span class=\"hljs-string\">\"http://picxw.com/meitui/\"</span>);\r\n		catchImg.getUrl();\r\n	}\r\n	\r\n}\r\n</code></pre><br><p>上面代码中选用要爬取图片的网址是<a href=\"http://picxw.com/meitui/\" target=\"_blank\" style=\"\">http://picxw.com/meitui/</a><span> （好吧，我找了好久终于找到一个漂亮妹子很多的网站....）；然后运行程序，就可以看到网站中的图片不断下载到<b><font color=\"#008080\">image03</font></b>文件夹里面。下面是控制台的输出：</span></p><p><span><img src=\"/MyBlog/files/article_pic/db45eb12-63ad-46a5-9b24-f36214ca2a91.png\" alt=\"搜狗截图20161023221840\" style=\"max-width:100%;\"><br></span></p><p>然后查看文件夹：</p><p><img src=\"/MyBlog/files/article_pic/07f5ecaa-7668-49ae-bb05-fdb13ee55027.png\" alt=\"搜狗截图20161023221955\" style=\"max-width:100%;\"><br><span></span></p><p><font face=\"楷体\" size=\"4\" color=\"#ff00ff\">可以看到网站里面的美女已经一个个进入我的文件夹了</font><img src=\"http://img.t.sinajs.cn/t4/appstyle/expression/ext/normal/6d/yx_thumb.gif\"><br></p><p><br></p>','2016-10-23 22:20:20','正则表达式匹配网址，爬取图片，java爬虫','原创','爬取网页图片——使用java简单实现(V1.0)','2018-03-18 18:07:38','所有人可见',7),(24,'<p><font size=\"5\" color=\"#008000\">1、使用Lambda表达式遍历集合和Iterator</font></p><p>java8为Iterable接口新增了一个forEach(Consumer action)默认方法，该方法所需参数的类型是一个函数式接口，而Iterable接口是Collection接口的父接口，因此Collection集合也可直接调用该方法。看下面实例：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.collection;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\r\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\r\n<span class=\"hljs-keyword\">import</span> java.util.Iterator;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CollectionEach</span> </span>{\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		Collection&lt;String&gt; books = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n		books.add(<span class=\"hljs-string\">\"设计模式\"</span>);\r\n		books.add(<span class=\"hljs-string\">\"算法导论\"</span>);\r\n		books.add(<span class=\"hljs-string\">\"Think in java\"</span>);\r\n		books.forEach(book -&gt; System.out.println(<span class=\"hljs-string\">\"遍历元素：\"</span>+book));\r\n		System.out.println();\r\n		Iterator&lt;String&gt; it = books.iterator();\r\n		it.forEachRemaining(obj -&gt; System.out.println(<span class=\"hljs-string\">\"遍历Iterator：\"</span>+obj));\r\n	}\r\n}</code></pre><p>控制台输出：</p><p></p><p><img src=\"/MyBlog/files/article_pic/84e3eee5-9398-4a04-b8f9-8734fa52c10d.png\" alt=\"搜狗截图20161024134454\" style=\"max-width:100%;\"></p><p><br></p><p><font color=\"#008000\" size=\"5\">2、使用Java8新增的Predicate操作集合</font></p><p>Java8为Collection集合新增了一个removeIf(Predicate filter)方法，该方法将会批量删除符合filter条件的所有元素。该方法需要一个Predicate(谓词)对象作为参数，Predicate也是函数式接口，因此使用Lambda表达式作为参数。具体看下面示例：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.collection;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Collection;\r\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\r\n<span class=\"hljs-keyword\">import</span> java.util.function.Predicate;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PredicateTest</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		Collection&lt;String&gt; books1 = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n		books1.add(<span class=\"hljs-string\">\"设计模式\"</span>);\r\n		books1.add(<span class=\"hljs-string\">\"算法导论\"</span>);\r\n		books1.add(<span class=\"hljs-string\">\"Think in java\"</span>);\r\n		books1.add(<span class=\"hljs-string\">\"Spring MVC学习指南\"</span>);\r\n		books1.add(<span class=\"hljs-string\">\"Effective java\"</span>);\r\n		books1.add(<span class=\"hljs-string\">\"java 语言程序设计\"</span>);\r\n		<span class=\"hljs-comment\">//复制books1中的所有元素到books2中</span>\r\n		Collection&lt;String&gt; books2 = <span class=\"hljs-keyword\">new</span> HashSet&lt;&gt;();\r\n		books2.addAll(books1);\r\n		\r\n		<span class=\"hljs-comment\">//删除长度小于10的元素</span>\r\n		books1.removeIf(ele -&gt; ele.length()&lt;<span class=\"hljs-number\">10</span>);\r\n		books1.forEach(ele -&gt; System.out.println(ele));\r\n		System.out.println(<span class=\"hljs-string\">\"-----------------\"</span>);	<span class=\"hljs-comment\">//分割线</span>\r\n		\r\n		<span class=\"hljs-comment\">/*下面这两种需求如果按照以前的编程方式需要两个方法，现在采用Predicate只需要一个方法*/</span>\r\n		System.out.println(<span class=\"hljs-string\">\"包含“设计”的书有：\"</span>+calAll(books2 , book -&gt; book.contains(<span class=\"hljs-string\">\"设计\"</span>))+<span class=\"hljs-string\">\"本\"</span>);\r\n		System.out.println(<span class=\"hljs-string\">\"包含“java”的书有：\"</span>+calAll(books2 , book -&gt; book.contains(<span class=\"hljs-string\">\"java\"</span>))+<span class=\"hljs-string\">\"本\"</span>);\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">calAll</span><span class=\"hljs-params\">(Collection&lt;String&gt; books,Predicate&lt;String&gt; p)</span></span>{\r\n		<span class=\"hljs-keyword\">int</span> total = <span class=\"hljs-number\">0</span>;\r\n		<span class=\"hljs-keyword\">for</span>(String book : books){\r\n			<span class=\"hljs-keyword\">if</span>(p.test(book)){\r\n				total++;\r\n			}\r\n		}\r\n		<span class=\"hljs-keyword\">return</span> total;\r\n	}\r\n}\r\n</code></pre><p>控制台输出如下：</p><p><img src=\"/MyBlog/files/article_pic/e9cd84ee-ba88-4bf7-a933-3011547b1a9b.png\" alt=\"搜狗截图20161024141315\" style=\"max-width:100%;\"></p><p><br></p>','2016-10-24 13:16:47','Lambda表达式遍历集合、java8新增特性','原创','Java8中新增的有关集合的操作','2018-03-18 18:07:38','所有人可见',7),(25,'<p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 最近吧，感觉自己退步了，真的。这次不是因为懒，不是因为学习，这次是思想上，真的退步了。我好想渐渐地受到了周围人的影响，一点一点的降低了对自己的要求，变得越来越普通了，如果这样下去，那么我这一生注定碌碌无为，平庸至极。这其实是一件非常危险的事情，可惜我好像并没有强烈的危机感，反而有点顺其自然的意思。在此闭眼鄙视自己5分钟ing...，我渴望进步，渴望变强，我也享受折磨自己。</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 其实我并不知道我现在这种状态(没有一点危机感和紧迫感)是因为自己自信增强了还是自己膨胀了，嗯，现在想想应该是膨胀了。以为以前比别人努力了一点就甩开别人很远了。感觉自己真是愚蠢。现在好怀念以前那个喜欢思考人生，喜欢踏实努力的自己，也不确定自己的下一波努力啥时候回到了，尽快吧，尽快进入那种让自己陶醉的状态，有目标，无杂念的状态。<br></p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 目前最最困扰我的就是到底什么时候去出去找实习，甚至自己对要找的实习有哪些要求也没明确。其实吧，有时候我也挺想下学期再找实习，但也有点怕会不会有点太迟了。总之现在是非常纠结...</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 我现在越来越明白，真的，人在不同的时间段都会有烦恼的，每个时间段肯定会有或大或小的事在困扰着你。我现在迫切需要从中跳出来！！！</p><p>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 最后，我现在没有喜欢的人了，我已经放下了。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 2016/11/03 &nbsp; &nbsp;仿佛就像要自我放弃</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 2016/11/18 &nbsp; &nbsp;昨天去杭州云图科技有限公司做了笔试，笔试完后他们就面试我，而且面试官叫我下周一开始正式去报道，其实我内心好纠结的，因为有点突然。但我也知道其实也差不多到开始实习的时间了。他们那边叫我利用这周末把学校该处理的事情尽快处理掉，并且最后在那边租房子住(因为实在离学校太远了，四十公里左右呢，早去晚归肯定会搞死我的)，所以这导致我下午又得往那边跑一趟，去看房子，希望下午不要太坑。其实一想到自己此番搬出学校去住也就意味着基本告别校园生活，踏入社会了就会有一点小小的伤感，有时候感觉真的一个人的力量好小好小的。我们曾经都有过梦想，愿它不被岁月所消磨！珍惜&amp;加油！</p><p>&nbsp; &nbsp; 2016/11/30 今天已经是11月份的最后一天了，现在我正在滨江自己租的房子里面，明天是周四，要早起上班，但我还是打算熬一会夜。讲真最近真的好惨，出门在外什么都是一个人。但是男人在外要坚强，实在不行就多读几遍“假如生活欺骗了你”。言归正传，我现在正在杭州云图有限科技公司实习，具体感觉怎么样其实自己也说不清楚，现阶段公司叫我们这些实习生熟悉和学习他们公司自己的框架，但是我感觉好抽象啊，大部分的标签和属性我都不认识，但是我又觉得这很厉害，好像知道这其中的原理。公司有一点的好处是公司的股东啊老板啊啥的全是搞技术的，这让我觉得在这种公司里面可以学到很多东西。其实最近的时间也没有得到充分的利用，来到这边觉得自己真的好平庸啊，但是心里我还是觉得自己终究是跟别人不一样的，没其他，因为我比别人努力。即使是仅仅是我觉得。还有就是我觉得自己应该好好改变一下自己的性格，讲道理实在是有点过于内向了。最后说一件坑爹的事情，我他妈大冬天的还要洗冷水澡(都怪那个垃圾热水器)。好了今天就乱七八糟的瞎逼逼这些东西，希望自己12月份好好努力加油，可以的。附：假如生活欺骗了你，不要悲伤，不要心急！忧郁的日子里需要镇静：相信吧，快乐的日子将会来临！心儿永远向往着未来；现在却常是忧郁。一切都是瞬息，一切都将会过去；而那过去了的，就会成为亲切的怀恋。</p><p>&nbsp; &nbsp; 2016/12/26 转眼，好快，2016就要过去了。这段时间对我来说简直是失败，不想说太多，只希望这是自己人生中最后的一次堕落。2017加油吧！</p><p>&nbsp; &nbsp; 2017/1/1 23:48，终于，来到了人生中关键的一年。2017，感觉这一年会发生很多事情。新的一年，有些许迷茫，但又充满期待。2016年终究过去了，现在回过头来看，感觉只能说过得一般般。前半年还好，过得挺踏实的，但是好像从九月份之后，整个人就懒了起来，到现在已经四个月都过去了，大概真的慢慢适应了这种堕落的生活。现在开始我一定要拼了命的回归到以前那种努力的日子去。加油吧，从此刻开始。还有，我最近不知怎么了，感觉一直在掉头发，真害怕过不久就要秃掉了，哭死，怎么办，完全不知道原因啊。这几天我又回学校来了，毕竟跨年，如果一个人在实习那边，感觉多少有点凄惨，想想还是回来算了，顺便把回家的火车票去了。妈的，我要到年28才能回到家，真是可伶，都怪自己太粗心错过了买票时间。还有一件事就是我到现在都还不知道要不要一直待在现在实习的公司。有时感觉挺好的，但有时又有点担心到时他们开的工资会有点低。真是非常困扰我，不知过完年怎么办，估计还是会一直在那边实习吧。前两天房东跟我说有一间要好一点的房子空出来，问我要不要搬过去。我现在也超纠结，不知怎么办，因为虽然房子要比现在的好，但是房租整整要贵250啊，心疼。而且明天就要做决定了。烦！</p><p>总之，希望2017年的自己找到一份自己喜欢而且满意的工作，也希望韩远强能够身体健康，开开心心，晚安！</p><p>&nbsp; &nbsp; 2018/03/13 2:19&nbsp; &nbsp; 呵呵，2017年3月到现在，整整一年，呵呵，多么梦幻的一年，那种暗无天日，彻底颓废的日子，怕是一辈子都忘不了。整整一年啊，可能这世上也就只有我会如此疯狂吧。回头看看，甚至怀疑自己有病，可能真的有吧。余生我将不再抱怨任何人，无论以后怎样，好的，心怀感恩！坏的，都是自作自受！活该吧！唉，本该是人生中非常精彩的一年，却被自己活成上面短短几行满是自嘲的loser！</p><p>&nbsp; &nbsp; 2018/03/19 18:32&nbsp; &nbsp; 今天基本上把博客弄完了，跟以前一样能够同步到github上面去！希望以后都有写博客的习惯，对于现在的自己其他的我也不知道怎么说。</p><p><br></p>','2016-10-24 23:59:37','瞎逼逼、有病吧','原创','听我瞎逼逼','2018-03-19 20:17:37','仅自己可见',13),(26,'<p class=\"cye-lm-tag\"><font size=\"3\" face=\"宋体\">最近在捣鼓通过 java.net.URL 抓取网页内容的时候，遇到一个非常奇怪的问题，就是在我抓取下来的内容中99%的字符编码都是对的，但是就是有几个地方会出现??或者???这样乱码的情况，起初我一直以为是我编码弄错了，于是换各种编码都试了一遍，结果发现用其他编码的时候网页内容是完全乱码的，只有使用原编码UTF-8的时候才能使内容基本正常显示(虽然有几个地方乱码)，所以我觉得编码没问题，就是UTF-8，但是我又有点强迫症，看到内容里面夹杂着???这样的乱码就很难受，所以我迫使自己一定要找到原因，后来通过反反复复的调试，发现乱码的地方无一不是原本应该是汉字显示的地方，而且是每次字符流读取写入的交接点，于是我就寻思着是不是编码处汉字占的字节刚好被buffer截断，然后把不完整的字节转码写入导致乱码。为了验证这个设想我就增大的buffer的数组长度，发现果然乱码的地方变了，有时候把buffer设置的足够大的话还有可能可以消除乱码。下面我将写个例子来演示乱码情况以及解决方法：</font></p><p class=\"cye-lm-tag\"><font size=\"5\" color=\"#008080\">1、首先是会出现乱码的情况，代码如下：</font></p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.urlResource;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.io.InputStream;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.net.HttpURLConnection;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.net.URL;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">InputStreamTest01</span> </span>{\r\n\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> <span class=\"hljs-keyword cye-lm-tag\">void</span> <span class=\"hljs-title cye-lm-tag\">main</span><span class=\"hljs-params cye-lm-tag\">(String[] args)</span> <span class=\"hljs-keyword cye-lm-tag\">throws</span> Exception </span>{\r\n		String targetUrl = <span class=\"hljs-string cye-lm-tag\">\"http://baike.baidu.com/view/53154.htm\"</span>;\r\n		System.out.println(method01(targetUrl));\r\n	}\r\n	\r\n	<span class=\"hljs-comment cye-lm-tag\">//该方法获取的文本中可能存在乱码</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> String <span class=\"hljs-title cye-lm-tag\">method01</span><span class=\"hljs-params cye-lm-tag\">(String targetUrl)</span> <span class=\"hljs-keyword cye-lm-tag\">throws</span> Exception</span>{\r\n		URL url = <span class=\"hljs-keyword cye-lm-tag\">new</span> URL(targetUrl);\r\n		HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();\r\n		InputStream input = urlConnection.getInputStream();	<span class=\"hljs-comment cye-lm-tag\">//获取输入流</span>\r\n		<span class=\"hljs-keyword cye-lm-tag\">byte</span>[] buffer = <span class=\"hljs-keyword cye-lm-tag\">new</span> <span class=\"hljs-keyword cye-lm-tag\">byte</span>[<span class=\"hljs-number cye-lm-tag\">1024</span>];\r\n		<span class=\"hljs-keyword cye-lm-tag\">int</span> hasRead = <span class=\"hljs-number cye-lm-tag\">0</span>;\r\n		StringBuffer sb = <span class=\"hljs-keyword cye-lm-tag\">new</span> StringBuffer();\r\n		<span class=\"hljs-keyword cye-lm-tag\">while</span>((hasRead=input.read(buffer))!=-<span class=\"hljs-number cye-lm-tag\">1</span>){\r\n			<span class=\"hljs-comment cye-lm-tag\">//把buffer数组按照UTF-8编码转换为字符串，并且追加到sb中</span>\r\n			sb.append(<span class=\"hljs-keyword cye-lm-tag\">new</span> String(buffer,<span class=\"hljs-number cye-lm-tag\">0</span>,hasRead,<span class=\"hljs-string cye-lm-tag\">\"utf-8\"</span>));\r\n		}\r\n		input.close();\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> sb.toString();\r\n	}\r\n	\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">上面程序输入内容中存在如下几处乱码：</p><p class=\"cye-lm-tag\"><img src=\"/MyBlog/files/article_pic/ae22e487-f04e-4233-96c3-840d1091760e.png\" alt=\"搜狗截图20161101192801\" style=\"max-width:100%;\" class=\"\">&nbsp; &nbsp;</p><p class=\"cye-lm-tag\"><img src=\"/MyBlog/files/article_pic/660d08ca-59df-43ae-a510-4f723b486471.png\" alt=\"搜狗截图20161101192154\" style=\"max-width: 100%;\"></p><p class=\"cye-lm-tag\"><img src=\"/MyBlog/files/article_pic/6b9530ab-9e91-476e-b5a4-5b2d88203277.png\" alt=\"搜狗截图20161101192226\" style=\"max-width: 100%;\"></p><p class=\"cye-lm-tag\"><img src=\"/MyBlog/files/article_pic/701c83e3-9c24-4857-affe-c4c0321e2ef5.png\" alt=\"搜狗截图20161101192207\" style=\"max-width: 100%;\"></p><p>可以看出出现乱码的地方都原本应该是单个汉字出现的地方，个人猜想可能原因是上面代码中input.read(buffer)读取字符流的时候，本次读取刚好把某个汉字的字符流截断，导致后面转码失败，出现乱码。</p><p><br></p><p><font size=\"5\" color=\"#008080\">2、改进读取字符流的方法，代码如下：</font></p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.urlResource;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.io.InputStream;\r\n<span class=\"hljs-keyword\">import</span> java.net.HttpURLConnection;\r\n<span class=\"hljs-keyword\">import</span> java.net.URL;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InputStreamTest02</span> </span>{\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\r\n		String targetUrl = <span class=\"hljs-string\">\"http://baike.baidu.com/view/53154.htm\"</span>;\r\n		System.out.println(method02(targetUrl));\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title\">method02</span><span class=\"hljs-params\">(String targetUrl)</span> <span class=\"hljs-keyword\">throws</span> Exception</span>{\r\n		URL url = <span class=\"hljs-keyword\">new</span> URL(targetUrl);\r\n		HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();\r\n		InputStream input = urlConnection.getInputStream();	<span class=\"hljs-comment\">//获取输入流</span>\r\n\r\n		StringBuffer sb = <span class=\"hljs-keyword\">new</span> StringBuffer();\r\n		<span class=\"hljs-keyword\">byte</span>[] buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[<span class=\"hljs-number\">627560</span>];\r\n		<span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>;   <span class=\"hljs-comment\">//存储从流中读取的总字节数</span>\r\n		<span class=\"hljs-keyword\">boolean</span> streamTag = <span class=\"hljs-keyword\">true</span>;\r\n		<span class=\"hljs-keyword\">boolean</span> flag = <span class=\"hljs-keyword\">false</span>;   \r\n		<span class=\"hljs-keyword\">while</span>(streamTag){\r\n			<span class=\"hljs-keyword\">int</span> byteNumbers = input.available();    <span class=\"hljs-comment\">//本次从字节流中读取的字节数</span>\r\n			System.out.println(<span class=\"hljs-string\">\"本次读取字节数：\"</span>+byteNumbers);\r\n			<span class=\"hljs-keyword\">if</span>(byteNumbers&gt;<span class=\"hljs-number\">0</span>){\r\n				input.read(buffer, size, byteNumbers);\r\n				size +=byteNumbers;\r\n				flag = <span class=\"hljs-keyword\">false</span>;\r\n			}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(byteNumbers==<span class=\"hljs-number\">0</span>){\r\n				<span class=\"hljs-comment\">//第一次读取字节数为0时，线程睡眠700，防止由于网络原因造成判别错误</span>\r\n				<span class=\"hljs-comment\">//连续两次读取字节数均为0则表示InputStream中的字节流读取完毕</span>\r\n				<span class=\"hljs-keyword\">if</span>(!flag){\r\n					Thread.sleep(<span class=\"hljs-number\">700</span>);\r\n					flag=<span class=\"hljs-keyword\">true</span>;\r\n					<span class=\"hljs-keyword\">continue</span>;\r\n				}<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(flag){\r\n					streamTag = <span class=\"hljs-keyword\">false</span>;\r\n					sb.append(<span class=\"hljs-keyword\">new</span> String(buffer,<span class=\"hljs-number\">0</span>,size,<span class=\"hljs-string\">\"utf-8\"</span>));\r\n				}\r\n			}\r\n		}\r\n		input.close();\r\n		<span class=\"hljs-keyword\">return</span> sb.toString();\r\n	}\r\n\r\n}\r\n</code></pre><p>可以看到控制台有如下输出：</p><p><img src=\"/MyBlog/files/article_pic/a9b358f2-7d07-4b10-b080-7866d9dc828a.png\" alt=\"搜狗截图20161101194531\" style=\"max-width:100%;\"></p><p>可看出buffer每次从输入流中读取的数据都有可能不一样，所以该问题的解决办法本质上是先不输入流中的所有字节读取到buffer中，然后统一转码为utf-8格式的字符串，这样就不会出现局部乱码问题。</p><p>值得注意的是，上面程序中出现了用Thread.sleep(700)，使用线程睡眠是为了防止由于读取速度过快导致读取的字节数为零(如上面输出结果中有些读取操作就为0)，适当延迟是为了从输入流中读取更多的字节数。上面程序只有当两次读取均为0字节时才认为输入流中的字节全部读取完毕。</p><p><br></p>','2016-11-01 19:14:25','InputStream流','原创','关于从InputStream流中读取汉字不完整的问题','2018-03-18 18:07:38','所有人可见',7),(27,'<p>1、启动数据库：net start mysql&nbsp;</p><p>2、关闭数据库：net stop mysql</p><p>3、备份数据库：mysqldump -uroot -p123456 db_name &gt; new_dbName.sql &nbsp; &nbsp; &nbsp; &nbsp;其中db_name是要备份的数据库名，new_dbName.sql是新文件名</p><p>4、恢复数据库：先选中某个数据库，然后执行&nbsp;<em>source</em>&nbsp;xxx.sql; 命令</p><p>5、查看mysql编码命令：show&nbsp;variables&nbsp;like&nbsp;\'char%\';</p><p><img src=\"/MyBlog/files/article_pic/22272cd3-b58b-4dc1-891b-d93964decfb1.png\" alt=\"搜狗截图20161102094108\" style=\"max-width:100%;\"></p><p>6、查询超时语句：show&nbsp;variables&nbsp;like&nbsp;\'%timeout%\';</p><p><img src=\"/MyBlog/files/article_pic/d63038a4-7068-4ee2-ac42-2c1e96b7b735.png\" alt=\"搜狗截图20161102094209\" style=\"max-width:100%;\"></p><p><br></p>','2016-11-01 22:47:49','mysql常用命令','原创','关于mysql数据库的一些常用操作命令','2018-03-18 18:07:38','所有人可见',14),(28,'<p class=\"cye-lm-tag\">配置一个Spring MVC只需要三个步骤：1.在web.xml中配置Servlet；2.创建Spring MVC的xml配置文件；3.创建Controller和view。具体介绍如下：</p><p class=\"cye-lm-tag\">1、在web.xml中配置Servlet</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi cye-lm-tag\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">web-app</span> <span class=\"hljs-attribute cye-lm-tag\">xmlns</span>=<span class=\"hljs-value cye-lm-tag\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span>\r\n         <span class=\"hljs-attribute cye-lm-tag\">xmlns:xsi</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\r\n         <span class=\"hljs-attribute cye-lm-tag\">xsi:schemaLocation</span>=<span class=\"hljs-value cye-lm-tag\">\"http://xmlns.jcp.org/xml/ns/javaee &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"</span>\r\n         <span class=\"hljs-attribute cye-lm-tag\">version</span>=<span class=\"hljs-value cye-lm-tag\">\"3.1\"</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">display-name</span>&gt;</span>TEST<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">display-name</span>&gt;</span>\r\n\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">welcome-file-list</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">welcome-file</span>&gt;</span>index<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">welcome-file</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">welcome-file-list</span>&gt;</span>\r\n\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-class</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">load-on-startup</span>&gt;</span>1<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">load-on-startup</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-mapping</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">url-pattern</span>&gt;</span>/<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">url-pattern</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-mapping</span>&gt;</span>\r\n\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">web-app</span>&gt;</span></code></pre><p class=\"cye-lm-tag\">上面配置了一个叫springmvc的Servlet，自动启动，然后mapping到所有请求。所配置的Servlet是DispatcherServlet类型，它是Spring MVC的入口，Spring MVC的本质就是一个Servlet。在配置DispatcherServlet的时候可以设置contextConfigLocation参数来指定Spring MVC配置文件的位置，例如：</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-class</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">init-param</span>&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">param-name</span>&gt;</span>contextConfigLocation<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">param-name</span>&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">param-value</span>&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">init-param</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">load-on-startup</span>&gt;</span>1<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">load-on-startup</span>&gt;\r\n</span><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet</span>&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-mapping</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>springmvc<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-name</span>&gt;</span>\r\n        <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">url-pattern</span>&gt;</span>/<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">url-pattern</span>&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">servlet-mapping</span>&gt;</span></code></pre><p class=\"cye-lm-tag\">上面配置表示Spring MVC配置文件为WEB-INF/spring-mvc.xml，如果不指定就默认使用WEB-INF/[ServletName]-servlet.xml文件，这里使用默认值，也就是WEB-INF/springmvc-servlet.xml</p><p class=\"cye-lm-tag\">2、创建Spring MVC的xml配置文件spring-mvc.xml</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi cye-lm-tag\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">beans</span> <span class=\"hljs-attribute cye-lm-tag\">default-lazy-init</span>=<span class=\"hljs-value cye-lm-tag\">\"true\"</span>\r\n       <span class=\"hljs-attribute cye-lm-tag\">xmlns</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.springframework.org/schema/beans\"</span> <span class=\"hljs-attribute cye-lm-tag\">xmlns:p</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.springframework.org/schema/p\"</span>\r\n       <span class=\"hljs-attribute cye-lm-tag\">xmlns:xsi</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"hljs-attribute cye-lm-tag\">xmlns:context</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.springframework.org/schema/context\"</span>\r\n       <span class=\"hljs-attribute cye-lm-tag\">xmlns:mvc</span>=<span class=\"hljs-value cye-lm-tag\">\"http://www.springframework.org/schema/mvc\"</span>\r\n       <span class=\"hljs-attribute cye-lm-tag\">xsi:schemaLocation</span>=<span class=\"hljs-value cye-lm-tag\">\"\r\n       http://www.springframework.org/schema/beans\r\n       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n       http://www.springframework.org/schema/mvc\r\n       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\r\n       http://www.springframework.org/schema/context\r\n       http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span>\r\n\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">mvc:annotation-driven</span>/&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">context:component-scan</span> <span class=\"hljs-attribute cye-lm-tag\">base-package</span>=<span class=\"hljs-value cye-lm-tag\">\"com.hyq.mvc\"</span>/&gt;</span>\r\n\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">beans</span>&gt;</span></code></pre><p class=\"cye-lm-tag\">&lt;mvc:annotation-driven/&gt;是Spring MVC提供的一键式的配置方法，配置此标签后Spring MVC会帮我们自动做一些注册组件之类的事。</p><p class=\"cye-lm-tag\">3、创建Controller和view</p><p class=\"cye-lm-tag\">在com.hyq.mvc包下建一个GoController.java类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.mvc;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.commons.logging.Log;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.commons.logging.LogFactory;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.springframework.stereotype.Controller;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.springframework.ui.Model;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.springframework.web.bind.annotation.RequestMapping;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.springframework.web.bind.annotation.RequestMethod;\r\n\r\n<span class=\"hljs-comment cye-lm-tag\">/**\r\n * Created by Administrator on 2016/11/2.\r\n */</span>\r\n<span class=\"hljs-annotation cye-lm-tag\">@Controller</span>\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">GoController</span> </span>{\r\n\r\n    <span class=\"hljs-keyword cye-lm-tag\">private</span> <span class=\"hljs-keyword cye-lm-tag\">final</span> Log logger = LogFactory.getLog(GoController.class);\r\n\r\n    <span class=\"hljs-comment cye-lm-tag\">//处理HEAD类型的\"/\"请求</span>\r\n    <span class=\"hljs-annotation cye-lm-tag\">@RequestMapping</span>(value = {<span class=\"hljs-string cye-lm-tag\">\"/\"</span>},method = {RequestMethod.HEAD})\r\n    <span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> String <span class=\"hljs-title cye-lm-tag\">head</span><span class=\"hljs-params cye-lm-tag\">()</span></span>{\r\n        logger.info(<span class=\"hljs-string cye-lm-tag\">\"----head----\"</span>);\r\n        <span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-string cye-lm-tag\">\"go.jsp\"</span>;\r\n    }\r\n\r\n    <span class=\"hljs-annotation cye-lm-tag\">@RequestMapping</span>(value = {<span class=\"hljs-string cye-lm-tag\">\"/index\"</span>,<span class=\"hljs-string cye-lm-tag\">\"/\"</span>},method = {RequestMethod.GET})\r\n    <span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> String <span class=\"hljs-title cye-lm-tag\">index</span><span class=\"hljs-params cye-lm-tag\">(Model model)</span><span class=\"hljs-keyword cye-lm-tag\">throws</span> Exception</span>{\r\n        logger.info(<span class=\"hljs-string cye-lm-tag\">\"--------processed by index---------\"</span>);\r\n        model.addAttribute(<span class=\"hljs-string cye-lm-tag\">\"msg\"</span>,<span class=\"hljs-string cye-lm-tag\">\"GO GO GO!!!\"</span>);\r\n        <span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-string cye-lm-tag\">\"go.jsp\"</span>;\r\n    }\r\n\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">在根目录下建一个go.jsp页面：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\">&lt;%--\r\n  Created by IntelliJ IDEA.\r\n  User: Administrator\r\n  Date: <span class=\"hljs-number cye-lm-tag\">2016</span>/<span class=\"hljs-number cye-lm-tag\">11</span>/<span class=\"hljs-number cye-lm-tag\">2</span>\r\n  Time: <span class=\"hljs-number cye-lm-tag\">10</span>:<span class=\"hljs-number cye-lm-tag\">54</span>\r\n  To change <span class=\"hljs-keyword cye-lm-tag\">this</span> template use File | Settings | File Templates.\r\n--%&gt;\r\n&lt;%@ page contentType=<span class=\"hljs-string cye-lm-tag\">\"text/html;charset=UTF-8\"</span> language=<span class=\"hljs-string cye-lm-tag\">\"java\"</span> %&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n    &lt;title&gt;Let<span class=\"hljs-string cye-lm-tag\">\'s GO&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n${msg}\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</span></code></pre><p class=\"cye-lm-tag\">部署到tomcat中，运行结果如下：</p><p class=\"cye-lm-tag\"><img src=\"/MyBlog/files/article_pic/36cbf42a-ff3e-47b7-b5ed-2826d25a8f89.png\" alt=\"搜狗截图20161102130815\" style=\"max-width:100%;\" class=\"\"></p><p class=\"cye-lm-tag\"><br></p>','2016-11-02 12:51:49','','原创','Spring MVC 配置步骤','2018-03-18 18:07:38','所有人可见',16),(29,'<p class=\"cye-lm-tag\">&lt;url-pattern&gt;/&lt;/url-pattern&gt; &nbsp;会匹配到/login这样的路径型url，不会匹配到模式为*.jsp这样的后缀型url<br>&lt;url-pattern&gt;/*&lt;/url-pattern&gt; 会匹配所有url：路径型的和后缀型的url(包括/login,*.jsp,*.js和*.html等)</p><p class=\"cye-lm-tag\"><br></p>','2016-11-03 00:54:11','','原创','Servlet里Url-Mapping中/* 和/的区别','2018-03-07 17:46:36','所有人可见',12),(30,'<p class=\"cye-lm-tag\">首先给出一个使用MyBatis操作数据库的主程序，然后进行具体分析，主程序代码如下：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"javascript hljs cye-lm-tag\" codemark=\"1\">package com.hyq.service;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSession;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.log4j.Logger;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.mappers.StudentMapper;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.util.SqlSessionFactoryUtil;\r\n\r\npublic <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">StudentTest</span> </span>{\r\n	private static Logger logger = Logger.getLogger(StudentTest.class);\r\n	public static <span class=\"hljs-keyword cye-lm-tag\">void</span> main(<span class=\"hljs-built_in cye-lm-tag\">String</span>[] args) {\r\n		SqlSession sqlSession = SqlSessionFactoryUtil.openSession();\r\n		StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\r\n		Student student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student(<span class=\"hljs-string cye-lm-tag\">\"王五\"</span>,<span class=\"hljs-number cye-lm-tag\">33</span>);\r\n		int result = studentMapper.add(student);\r\n		sqlSession.commit();\r\n		<span class=\"hljs-keyword cye-lm-tag\">if</span>(result&gt;<span class=\"hljs-number cye-lm-tag\">0</span>){\r\n			logger.info(<span class=\"hljs-string cye-lm-tag\">\"添加成功\"</span>);\r\n		}\r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">下面是上面代码的具体实现：</p><p class=\"cye-lm-tag\">1、获取SqlSession的工具类，即上面代码中的：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\">SqlSession sqlSession = SqlSessionFactoryUtil.openSession();</code></pre><p class=\"cye-lm-tag\">其中SqlSessionFactoryUtil类的代码如下：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.util;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.io.InputStream;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.io.Resources;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSession;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSessionFactory;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">SqlSessionFactoryUtil</span> </span>{\r\n\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> SqlSessionFactory sqlSessionFactory;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> SqlSessionFactory <span class=\"hljs-title cye-lm-tag\">getSqlSessionFactory</span><span class=\"hljs-params cye-lm-tag\">()</span></span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">if</span>(sqlSessionFactory==<span class=\"hljs-keyword cye-lm-tag\">null</span>){\r\n			InputStream input = <span class=\"hljs-keyword cye-lm-tag\">null</span>;\r\n			<span class=\"hljs-keyword cye-lm-tag\">try</span>{\r\n				input = Resources.getResourceAsStream(<span class=\"hljs-string cye-lm-tag\">\"mybatis-config.xml\"</span>);\r\n				sqlSessionFactory = <span class=\"hljs-keyword cye-lm-tag\">new</span> SqlSessionFactoryBuilder().build(input);\r\n			}<span class=\"hljs-keyword cye-lm-tag\">catch</span>(Exception e){\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> sqlSessionFactory;\r\n	}\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> SqlSession <span class=\"hljs-title cye-lm-tag\">openSession</span><span class=\"hljs-params cye-lm-tag\">()</span></span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> getSqlSessionFactory().openSession();\r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">其中mybatis-config.xml位于项目的根目录，具体内容如下：</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi cye-lm-tag\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype cye-lm-tag\">&lt;!DOCTYPE configuration\r\nPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">configuration</span>&gt;</span>\r\n	<span class=\"hljs-comment cye-lm-tag\">&lt;!-- 下面是配置properties的两种方式，推荐使用第一种 --&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">properties</span> <span class=\"hljs-attribute cye-lm-tag\">resource</span>=<span class=\"hljs-value cye-lm-tag\">\"jdbc.properties\"</span>/&gt;</span>\r\n	<span class=\"hljs-comment cye-lm-tag\">&lt;!-- &lt;properties&gt;\r\n		&lt;property name=\"jdbc.driverClassName\" value=\"com.mysql.jdbc.Driver\"/&gt;\r\n		&lt;property name=\"jdbc.url\" value=\"jdbc:mysql://localhost:3306/db_mybatis\"/&gt;\r\n		&lt;property name=\"jdbc.username\" value=\"root\"/&gt;\r\n		&lt;property name=\"jdbc.password\" value=\"123456\"/&gt;\r\n	&lt;/properties&gt; --&gt;</span>\r\n	\r\n	<span class=\"hljs-comment cye-lm-tag\">&lt;!-- 下面是配置别名的两种方式，推荐使用第二种 --&gt;</span>\r\n	<span class=\"hljs-comment cye-lm-tag\">&lt;!--\r\n	&lt;typeAliases&gt;\r\n		&lt;typeAlias alias=\"Student\" type=\"com.hyq.model.Student\"/&gt;\r\n	&lt;/typeAliases&gt;\r\n	 --&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">typeAliases</span>&gt;</span>\r\n	<span class=\"hljs-comment cye-lm-tag\">&lt;!-- 扫描指定的包，把该包下面的类名作为别名 --&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">package</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"com.hyq.model\"</span>/&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">typeAliases</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">environments</span> <span class=\"hljs-attribute cye-lm-tag\">default</span>=<span class=\"hljs-value cye-lm-tag\">\"development\"</span>&gt;</span>\r\n		<span class=\"hljs-comment cye-lm-tag\">&lt;!-- 配置多种环境，其中默认为开发环境 --&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">environment</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"development\"</span>&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">transactionManager</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"JDBC\"</span> /&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">dataSource</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"POOLED\"</span>&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"driver\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.driverClassName}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"url\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.url}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"username\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.username}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"password\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.password}\"</span> /&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">dataSource</span>&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">environment</span>&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">environment</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"test\"</span>&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">transactionManager</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"JDBC\"</span>/&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">dataSource</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"POOLED\"</span>&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"driver\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.driverClassName}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"url\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.url}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"username\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.username}\"</span> /&gt;</span>\r\n				<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">property</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"password\"</span> <span class=\"hljs-attribute cye-lm-tag\">value</span>=<span class=\"hljs-value cye-lm-tag\">\"${jdbc.password}\"</span> /&gt;</span>\r\n			<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">dataSource</span>&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">environment</span>&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">environments</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">mappers</span>&gt;</span>\r\n		<span class=\"hljs-comment cye-lm-tag\">&lt;!-- 下面是配置mapper的三种方式，推荐使用第三种 --&gt;</span>\r\n		<span class=\"hljs-comment cye-lm-tag\">&lt;!-- &lt;mapper resource=\"com/hyq/mappers/StudentMapper.xml\" /&gt; --&gt;</span>\r\n		<span class=\"hljs-comment cye-lm-tag\">&lt;!-- &lt;mapper class=\"com.hyq.mappers.StudentMapper\"/&gt; --&gt;</span>\r\n		<span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">package</span> <span class=\"hljs-attribute cye-lm-tag\">name</span>=<span class=\"hljs-value cye-lm-tag\">\"com.hyq.mappers\"</span>/&gt;</span>\r\n	<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">mappers</span>&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">configuration</span>&gt;</span>\r\n</code></pre><p class=\"cye-lm-tag\">而其中上面的jdbc.properties文件(同样放在根目录)的内容如下：</p><pre style=\"max-width: 100%;\"><code class=\"cs hljs\" codemark=\"1\">jdbc.driverClassName=com.mysql.jdbc.Driver\r\njdbc.url=jdbc:mysql:<span class=\"hljs-comment cye-lm-tag\">//localhost:3306/db_mybatis</span>\r\njdbc.username=root\r\njdbc.password=<span class=\"hljs-number cye-lm-tag\">123456</span></code></pre><p class=\"cye-lm-tag\"><br></p><p class=\"cye-lm-tag\">2、上面主程序中的如下代码：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\">StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</code></pre><p class=\"cye-lm-tag\">其中StudentMapper接口代码为：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">interface</span> <span class=\"hljs-title cye-lm-tag\">StudentMapper</span> </span>{\r\n\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">int</span> <span class=\"hljs-title cye-lm-tag\">add</span><span class=\"hljs-params cye-lm-tag\">(Student student)</span></span>;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">int</span> <span class=\"hljs-title cye-lm-tag\">update</span><span class=\"hljs-params cye-lm-tag\">(Student student)</span></span>;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">int</span> <span class=\"hljs-title cye-lm-tag\">delete</span><span class=\"hljs-params cye-lm-tag\">(Integer id)</span></span>;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Student <span class=\"hljs-title cye-lm-tag\">findById</span><span class=\"hljs-params cye-lm-tag\">(Integer id)</span></span>;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find</span><span class=\"hljs-params cye-lm-tag\">()</span></span>;\r\n	\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">同时还需要一个xml文件用于实现该接口，即StudentMapper.xml，代码如下：</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">mapper</span> <span class=\"hljs-attribute\">namespace</span>=<span class=\"hljs-value\">\"com.hyq.mappers.StudentMapper\"</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!--\r\n		下面这个标签标示一种结果集 ，该标签里面的autoMapping属性默认为true，即自动映射\r\n		所以该标签里面的三个子标签加不加都一样，但如果autoMapping设为false的话，则一定要加上\r\n	--&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resultMap</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"Student\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"StudentResult\"</span>&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"id\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"id\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"name\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"name\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"age\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"age\"</span>/&gt;</span>\r\n		<span class=\"hljs-comment\">&lt;!-- 上面三个标签可加可不加 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resultMap</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面标签中的id对应接口中的方法名，parameterType对应方法的参数类型，\r\n		如果需要多个参数，则通常把多个参数放在map中，然后把map传入方法中 \r\n	--&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">insert</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"add\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Student\"</span>&gt;</span>\r\n		insert into t_student(id,name,age) values(null,#{name},#{age})\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">insert</span>&gt;</span>\r\n\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">update</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"update\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Student\"</span>&gt;</span>\r\n		update t_student set name=#{name},age=#{age} where id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">update</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">delete</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"delete\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span>&gt;</span>\r\n		delete from t_student where id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">delete</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 下面标签中的resultType表示该接口返回值的类型 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"findById\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span> <span class=\"hljs-attribute\">resultType</span>=<span class=\"hljs-value\">\"Student\"</span> &gt;</span>\r\n		select * from t_student where id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 下面标签中的resultMap表示该接口返回的是一个集合 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"find\"</span> <span class=\"hljs-attribute\">resultMap</span>=<span class=\"hljs-value\">\"StudentResult\"</span>&gt;</span>\r\n		select * from t_student\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">mapper</span>&gt;</span> </code></pre><p class=\"cye-lm-tag\">通过上面这个配置文件，MyBatis会自动给StudentMapper接口提供具体的实现。</p><p class=\"cye-lm-tag\">最后附上Student.java类：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> Integer id;\r\n	<span class=\"hljs-keyword\">private</span> String name;\r\n	<span class=\"hljs-keyword\">private</span> Integer age;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(Integer id, String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.id = id;\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> id;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(Integer id)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.id = id;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> name;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Integer <span class=\"hljs-title\">getAge</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> age;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setAge</span><span class=\"hljs-params\">(Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Student [id=\"</span> + id + <span class=\"hljs-string\">\", name=\"</span> + name + <span class=\"hljs-string\">\", age=\"</span> + age + <span class=\"hljs-string\">\"]\"</span>;\r\n	}\r\n\r\n}\r\n</code></pre><p><br></p>','2016-11-05 01:01:00','记录MyBatis的一些基础','原创','MyBatis入门','2018-03-07 17:46:36','所有人可见',15),(31,'<p>使用Student和Address表示一对一关系，即一个学生对应一个地址，下面给出这两个实体类：</p><p>Student.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>{\r\n	<span class=\"hljs-keyword\">private</span> Integer id;\r\n	<span class=\"hljs-keyword\">private</span> String name;\r\n	<span class=\"hljs-keyword\">private</span> Integer age;\r\n	<span class=\"hljs-keyword\">private</span> Address address;\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(Integer id, String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.id = id;\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n	\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Student [id=\"</span> + id + <span class=\"hljs-string\">\", name=\"</span> + name + <span class=\"hljs-string\">\", age=\"</span> + age + <span class=\"hljs-string\">\", address=\"</span> + address + <span class=\"hljs-string\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment\">/**\r\n	 * 这里省略getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p>Address.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span> </span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> Integer id;\r\n	<span class=\"hljs-keyword\">private</span> String sheng;	<span class=\"hljs-comment\">//省份</span>\r\n	<span class=\"hljs-keyword\">private</span> String shi;	<span class=\"hljs-comment\">//市</span>\r\n	<span class=\"hljs-keyword\">private</span> String qu;	<span class=\"hljs-comment\">//区</span>\r\n	\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Address [id=\"</span> + id + <span class=\"hljs-string\">\", sheng=\"</span> + sheng + <span class=\"hljs-string\">\", shi=\"</span> + shi + <span class=\"hljs-string\">\", qu=\"</span> + qu + <span class=\"hljs-string\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment\">/**\r\n	 * 这里省略getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p><br></p><p>给出StudentMapper.java和AddressMapper.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Address;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">AddressMapper</span> </span>{\r\n	<span class=\"hljs-comment\">//通过id查找地址</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Address <span class=\"hljs-title\">findById</span><span class=\"hljs-params\">(Integer id)</span></span>;\r\n	\r\n}\r\n</code></pre><p><br></p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Student;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentMapper</span> </span>{\r\n\r\n	<span class=\"hljs-comment\">//获取所有学生</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Student&gt; <span class=\"hljs-title\">find</span><span class=\"hljs-params\">()</span></span>;\r\n	<span class=\"hljs-comment\">//通过id获取指定学生</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Student <span class=\"hljs-title\">findById</span><span class=\"hljs-params\">(Integer id)</span></span>;\r\n	\r\n}\r\n</code></pre><p><br></p><p>给出上面用于上面两个接口实现的xml文件</p><p>StudentMapper.xml</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">mapper</span> <span class=\"hljs-attribute\">namespace</span>=<span class=\"hljs-value\">\"com.hyq.mappers.StudentMapper\"</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resultMap</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"Student\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"StudentResult\"</span>&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"id\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"id\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"name\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"name\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"age\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"age\"</span>/&gt;</span>\r\n		<span class=\"hljs-comment\">&lt;!-- 上面三行配置也可不写(resultMap标签中默认autoMapping=\"true\") --&gt;</span>\r\n		<span class=\"hljs-comment\">&lt;!-- \r\n			下面这行配置会把从t_student表中查到的addressId列的值当做select属性指定方法的参数，\r\n			并把该方法的返回值赋给property属性指定的Student属性，如果没有这行配置，则查找到的student对象\r\n			的address为null\r\n		 --&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">association</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"address\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"addressId\"</span> <span class=\"hljs-attribute\">select</span>=<span class=\"hljs-value\">\"com.hyq.mappers.AddressMapper.findById\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">association</span>&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resultMap</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 根据id查询指定学生 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"findById\"</span> <span class=\"hljs-attribute\">resultMap</span>=<span class=\"hljs-value\">\"StudentResult\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span>&gt;</span>\r\n		select * from t_student t1,t_address t2 where t1.addressId=t2.id and t1.id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-comment\">&lt;!-- 查询所有学生 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"find\"</span> <span class=\"hljs-attribute\">resultMap</span>=<span class=\"hljs-value\">\"StudentResult\"</span>&gt;</span>\r\n		select * from t_student\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">mapper</span>&gt;</span> </code></pre><p>AddressMapper.xml</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">mapper</span> <span class=\"hljs-attribute\">namespace</span>=<span class=\"hljs-value\">\"com.hyq.mappers.AddressMapper\"</span>&gt;</span>\r\n\r\n	<span class=\"hljs-comment\">&lt;!-- 查找指定id的地址 --&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"findById\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span> <span class=\"hljs-attribute\">resultType</span>=<span class=\"hljs-value\">\"Address\"</span>&gt;</span>\r\n		select * from t_address where id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">mapper</span>&gt;</span> </code></pre><p><br></p><p>下面给出一个简单的测试类：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.service;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;\r\n<span class=\"hljs-keyword\">import</span> org.apache.log4j.Logger;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.mappers.StudentMapper;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Student;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.util.SqlSessionFactoryUtil;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentTest</span> </span>{\r\n	<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Logger logger = Logger.getLogger(StudentTest.class);\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		SqlSession sqlSession = SqlSessionFactoryUtil.openSession();\r\n		StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\r\n		List&lt;Student&gt; studentList = studentMapper.find();\r\n		studentList.forEach((student)-&gt;System.out.println(student));\r\n		System.out.println(<span class=\"hljs-string\">\"--------分割线--------\"</span>);\r\n		Student student = studentMapper.findById(<span class=\"hljs-number\">18</span>);\r\n		System.out.println(student);\r\n		logger.info(<span class=\"hljs-string\">\"查询完毕!\"</span>);\r\n	}\r\n}\r\n</code></pre><p><br></p><p>其他细节可以参考<a href=\"/blog/article_foreDetail?articleId=53\" target=\"_blank\">MyBatis基础</a></p><p><br></p>','2016-11-05 14:00:04','','原创','Mybatis基础 —— 一对一关系实现','2018-03-07 17:46:36','所有人可见',15),(32,'<p>下面用学生和年级演示一对多关系，即一个年级有多名学生，首先给出Student.java和Grade.java：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grade</span> </span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> Integer id;\r\n	<span class=\"hljs-keyword\">private</span> String gradeName;\r\n	<span class=\"hljs-keyword\">private</span> List&lt;Student&gt; students;\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Grade [id=\"</span> + id + <span class=\"hljs-string\">\", gradeName=\"</span> + gradeName + <span class=\"hljs-string\">\", students=\"</span> + students + <span class=\"hljs-string\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p><br></p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>{\r\n\r\n	<span class=\"hljs-keyword\">private</span> Integer id;\r\n	<span class=\"hljs-keyword\">private</span> String name;\r\n	<span class=\"hljs-keyword\">private</span> Integer age;\r\n	<span class=\"hljs-keyword\">private</span> Grade grade;\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-comment\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(Integer id, String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.id = id;\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n	\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword\">super</span>();\r\n		<span class=\"hljs-keyword\">this</span>.name = name;\r\n		<span class=\"hljs-keyword\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-annotation\">@Override</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\r\n		<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Student [id=\"</span> + id + <span class=\"hljs-string\">\", name=\"</span> + name + <span class=\"hljs-string\">\", age=\"</span> + age + <span class=\"hljs-string\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p><br></p><p>下面给出上面两个实体的接口类：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Student;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentMapper</span> </span>{\r\n	<span class=\"hljs-comment\">//通过gradeId查找学生</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Student&gt; <span class=\"hljs-title\">findByGradeId</span><span class=\"hljs-params\">(Integer gradeId)</span></span>;\r\n	<span class=\"hljs-comment\">//上面这行代码也可换成下面这行代码</span>\r\n	<span class=\"hljs-comment\">//public Student findByGradeId(Integer gradeId);</span>\r\n	<span class=\"hljs-comment\">/**\r\n	 * 但是具体为什么可以这样我还不是很清楚，个人猜想是MyBatis根据StudentMapper.xml文件中\r\n	 * 的实现，把查询到的每一条数据封装成一个对象，如果此处是Student，则把该对象添加到\r\n	 * 调用该方法的方法的返回结果中(即添加到Grade对象中的studentList属性中)，如果此处是\r\n	 * List&lt;Student&gt;，同样也加入到Grade对象中的studentList属性\r\n	 * 简单的说，当返回值是Student时是逐个逐个的加到studentList中\r\n	 * 当返回值是List&lt;Student&gt;时是把list加入到studentList中\r\n	 * \r\n	 * 最后注意：该方法返回值是Student仅限于该方法被一的一端调用，\r\n	 * 如果直接调用该方法则会因为返回结果数量不匹配而报错\r\n	 */</span>\r\n}\r\n</code></pre><p><br></p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Grade;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">GradeMapper</span> </span>{\r\n	<span class=\"hljs-comment\">//查找指定id的班级</span>\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Grade <span class=\"hljs-title\">findById</span><span class=\"hljs-params\">(Integer id)</span></span>;\r\n}\r\n</code></pre><p><br></p><p>下面是两个接口对应的xml文件:</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">mapper</span> <span class=\"hljs-attribute\">namespace</span>=<span class=\"hljs-value\">\"com.hyq.mappers.StudentMapper\"</span>&gt;</span>\r\n\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resultMap</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"Student\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"StudentResult\"</span>&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">id</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"id\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"id\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"name\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"name\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"age\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"age\"</span>/&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resultMap</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"findByGradeId\"</span> <span class=\"hljs-attribute\">resultMap</span>=<span class=\"hljs-value\">\"StudentResult\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span>&gt;</span>\r\n		select * from t_student where gradeId=#{gradeId}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">mapper</span>&gt;</span> </code></pre><p><br></p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-pi\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\r\n<span class=\"hljs-doctype\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\r\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">mapper</span> <span class=\"hljs-attribute\">namespace</span>=<span class=\"hljs-value\">\"com.hyq.mappers.GradeMapper\"</span>&gt;</span>\r\n\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">resultMap</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">\"Grade\"</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"GradeResult\"</span>&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"id\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"id\"</span>/&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"gradeName\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"gradeName\"</span>/&gt;</span>\r\n		<span class=\"hljs-comment\">&lt;!-- 下面这行配置用来配置一对多中多的一端，返回一个集合 --&gt;</span>\r\n		<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">collection</span> <span class=\"hljs-attribute\">property</span>=<span class=\"hljs-value\">\"students\"</span> <span class=\"hljs-attribute\">column</span>=<span class=\"hljs-value\">\"id\"</span> <span class=\"hljs-attribute\">select</span>=<span class=\"hljs-value\">\"com.hyq.mappers.StudentMapper.findByGradeId\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">collection</span>&gt;</span>\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">resultMap</span>&gt;</span>\r\n	\r\n	<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">select</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">\"findById\"</span> <span class=\"hljs-attribute\">parameterType</span>=<span class=\"hljs-value\">\"Integer\"</span> <span class=\"hljs-attribute\">resultMap</span>=<span class=\"hljs-value\">\"GradeResult\"</span>&gt;</span>\r\n		select * from t_grade where id=#{id}\r\n	<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">select</span>&gt;</span>\r\n\r\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">mapper</span>&gt;</span></code></pre><p><br></p><p>下面给出测试类Test.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword\">package</span> com.hyq.service;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.List;\r\n\r\n<span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;\r\n\r\n<span class=\"hljs-keyword\">import</span> com.hyq.mappers.GradeMapper;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.mappers.StudentMapper;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Grade;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.model.Student;\r\n<span class=\"hljs-keyword\">import</span> com.hyq.util.SqlSessionFactoryUtil;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\r\n		SqlSession sqlSession = SqlSessionFactoryUtil.openSession();\r\n		StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\r\n		GradeMapper gradeMapper = sqlSession.getMapper(GradeMapper.class);\r\n		\r\n		Grade grade = gradeMapper.findById(<span class=\"hljs-number\">1</span>);\r\n		System.out.println(grade);\r\n		System.out.println(<span class=\"hljs-string\">\"---------分割线---------\"</span>);\r\n		<span class=\"hljs-comment\">/*注意，如果StudentMapper中findByGradeId接口的返回值为Student的话执行studentMapper.findByGradeId(1);将会报错*/</span>\r\n		List&lt;Student&gt; studentList = studentMapper.findByGradeId(<span class=\"hljs-number\">1</span>);\r\n		studentList.forEach(student-&gt;System.out.println(student));\r\n	}\r\n}\r\n</code></pre><p>控制台输入如下内容：</p><pre style=\"max-width: 100%;\"><code class=\"cs hljs\" codemark=\"1\">Grade [id=<span class=\"hljs-number\">1</span>, gradeName=一年级, students=[Student [id=<span class=\"hljs-number\">1</span>, name=张珊, age=<span class=\"hljs-number\">10</span>], Student [id=<span class=\"hljs-number\">2</span>, name=大爷, age=<span class=\"hljs-number\">100</span>], Student [id=<span class=\"hljs-number\">16</span>, name=天才, age=<span class=\"hljs-number\">23</span>]]]\r\n---------分割线---------\r\nStudent [id=<span class=\"hljs-number\">1</span>, name=张珊, age=<span class=\"hljs-number\">10</span>]\r\nStudent [id=<span class=\"hljs-number\">2</span>, name=大爷, age=<span class=\"hljs-number\">100</span>]\r\nStudent [id=<span class=\"hljs-number\">16</span>, name=天才, age=<span class=\"hljs-number\">23</span>]\r\n</code></pre><p>参考<a href=\"/blog/article_foreDetail?articleId=53\" target=\"_blank\">MyBatis基础</a></p><p><br></p>','2016-11-05 14:33:32','','原创','Mybatis基础 —— 一对多关系实现','2018-03-07 17:46:36','所有人可见',15),(33,'<p class=\"cye-lm-tag\">MyBatis 的强大特性之一便是它的动态 SQL，利用动态 SQL 这一特性可以彻底摆脱根据不同条件拼接 SQL 语句的痛苦。</p><p class=\"cye-lm-tag\">通常使用动态 SQL 不可能是独立的一部分,MyBatis 当然使用一种强大的动态 SQL 语言来改进这种情形,这种语言可以被用在任意的 SQL 映射语句中。</p><p class=\"cye-lm-tag\">动态 SQL 元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似。在 MyBatis 之前的版本中,有很多的元素需要来了解。MyBatis 3 大大提升了它们,现在用不到原先一半的元素就可以了。MyBatis 采用功能强大的基于 OGNL 的表达式来消除其他元素。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><p class=\"cye-lm-tag\">&nbsp;废话不多说，下面直接贴代码：</p><p class=\"cye-lm-tag\">1、首先是实体类</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">Student</span> </span>{\r\n\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer id;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String name;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer age;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-comment cye-lm-tag\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">(Integer id, String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.id = id;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.name = name;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.age = age;\r\n	}\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">(String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.name = name;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-annotation cye-lm-tag\">@Override</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> String <span class=\"hljs-title cye-lm-tag\">toString</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-string cye-lm-tag\">\"Student [id=\"</span> + id + <span class=\"hljs-string cye-lm-tag\">\", name=\"</span> + name + <span class=\"hljs-string cye-lm-tag\">\", age=\"</span> + age + <span class=\"hljs-string cye-lm-tag\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment cye-lm-tag\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">2、接口类StudentMapper.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">interface</span> <span class=\"hljs-title cye-lm-tag\">StudentMapper</span> </span>{\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Student <span class=\"hljs-title cye-lm-tag\">findById</span><span class=\"hljs-params cye-lm-tag\">(Integer id)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试if语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find</span><span class=\"hljs-params cye-lm-tag\">(Student s_student)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试if语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find2</span><span class=\"hljs-params cye-lm-tag\">(Map&lt;String, Object&gt; map)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试choose, when, otherwise</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find3</span><span class=\"hljs-params cye-lm-tag\">(Student s_student)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试where语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find4</span><span class=\"hljs-params cye-lm-tag\">(Student s_student)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试trim语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">find5</span><span class=\"hljs-params cye-lm-tag\">(Student s_student)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试trim语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">int</span> <span class=\"hljs-title cye-lm-tag\">update</span><span class=\"hljs-params cye-lm-tag\">(Student student)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//测试set语句</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">int</span> <span class=\"hljs-title cye-lm-tag\">update2</span><span class=\"hljs-params cye-lm-tag\">(Student student)</span></span>;\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">3、用于接口实现的xml配置文件</p><pre style=\"max-width: 100%;\"><code class=\"markdown hljs\" codemark=\"1\"><span class=\"xml cye-lm-tag\"><span class=\"hljs-pi cye-lm-tag\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span>\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-doctype cye-lm-tag\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span>\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">mapper</span> <span class=\"hljs-attribute cye-lm-tag\">namespace</span>=<span class=\"hljs-value cye-lm-tag\">\"com.hyq.mappers.StudentMapper\"</span>&gt;</span></span>\r\n\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">resultMap</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">id</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"id\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"id\"</span>/&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">result</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"name\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"name\"</span>/&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">result</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"age\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"age\"</span>/&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">resultMap</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"find\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student where id&gt;0\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n			and age=#{age}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n			and name like #{name}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"find2\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Map\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student where id&gt;0\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n			and age=#{age}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n			and name like #{name}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"start!=null and size!=null\"</span>&gt;</span></span>\r\n			limit #{start},#{size}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"find3\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student where id&gt;0\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">choose</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">when</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n				and name like #{name}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">when</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">when</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n				and age=#{age}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">when</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">otherwise</span>&gt;</span></span>\r\n				and id=1\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">otherwise</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">choose</span>&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"find4\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">where</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n				name like #{name}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n				and age=#{age}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">where</span>&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"find5\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">trim</span> <span class=\"hljs-attribute cye-lm-tag\">prefix</span>=<span class=\"hljs-value cye-lm-tag\">\"where\"</span> <span class=\"hljs-attribute cye-lm-tag\">prefixOverrides</span>=<span class=\"hljs-value cye-lm-tag\">\"or|and\"</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n				and name like #{name}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n				and age=#{age}\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">trim</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-comment cye-lm-tag\">&lt;!-- \r\n			prefix：前缀　　　　　　\r\n　　			prefixoverride：去掉第一个and或者是or\r\n		 --&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">update</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"update\"</span>&gt;</span></span>\r\n		update t_student\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">trim</span> <span class=\"hljs-attribute cye-lm-tag\">prefix</span>=<span class=\"hljs-value cye-lm-tag\">\"set\"</span> <span class=\"hljs-attribute cye-lm-tag\">suffix</span>=<span class=\"hljs-value cye-lm-tag\">\"\"</span> <span class=\"hljs-attribute cye-lm-tag\">suffixOverrides</span>=<span class=\"hljs-value cye-lm-tag\">\",\"</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n				name=#{name},\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n				age=#{age},\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">trim</span>&gt;</span></span>\r\n		where id=#{id}\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">update</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">update</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"update2\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span>&gt;</span></span>\r\n		update t_student\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">set</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"name!=null\"</span>&gt;</span></span>\r\n				name=#{name},\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"age!=null\"</span>&gt;</span></span>\r\n				age=#{age},\r\n			<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">set</span>&gt;</span></span>\r\n		where id=#{id}\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">update</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"findById\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Integer\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultType</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span>&gt;</span></span>\r\n		select * from t_student where id=#{id}\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">mapper</span>&gt;</span></span> </code></pre><p class=\"cye-lm-tag\">4、测试类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.service;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.HashMap;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSession;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.mappers.StudentMapper;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.util.SqlSessionFactoryUtil;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">Test</span> </span>{\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> <span class=\"hljs-keyword cye-lm-tag\">void</span> <span class=\"hljs-title cye-lm-tag\">main</span><span class=\"hljs-params cye-lm-tag\">(String[] args)</span> </span>{\r\n		SqlSession sqlSession = SqlSessionFactoryUtil.openSession();\r\n		StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"----测试if(接口方法参数为Student)----\"</span>);\r\n		Student student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student();\r\n		student.setName(<span class=\"hljs-string cye-lm-tag\">\"%李%\"</span>);\r\n		<span class=\"hljs-comment cye-lm-tag\">//student.setAge(12);</span>\r\n		List&lt;Student&gt; studentList = studentMapper.find(student);\r\n		studentList.forEach(s-&gt;System.out.println(s));\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试if(接口方法参数为Map)-----\"</span>);\r\n		Map&lt;String, Object&gt; map = <span class=\"hljs-keyword cye-lm-tag\">new</span> HashMap&lt;&gt;();\r\n		<span class=\"hljs-comment cye-lm-tag\">//map.put(\"name\", \"%李%\");</span>\r\n		<span class=\"hljs-comment cye-lm-tag\">//map.put(\"age\", 12);</span>\r\n		map.put(<span class=\"hljs-string cye-lm-tag\">\"start\"</span>, <span class=\"hljs-number cye-lm-tag\">1</span>);\r\n		map.put(<span class=\"hljs-string cye-lm-tag\">\"size\"</span>, <span class=\"hljs-number cye-lm-tag\">2</span>);\r\n		studentList = studentMapper.find2(map);\r\n		studentList.forEach(s-&gt;System.out.println(s));\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试choose, when, otherwise-----\"</span>);\r\n		student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student();\r\n		student.setName(<span class=\"hljs-string cye-lm-tag\">\"%张%\"</span>);\r\n		studentList = studentMapper.find3(student);\r\n		studentList.forEach(s-&gt;System.out.println(s));\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试where语句-----\"</span>);\r\n		student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student();\r\n		student.setName(<span class=\"hljs-string cye-lm-tag\">\"%李%\"</span>);\r\n		student.setAge(<span class=\"hljs-number cye-lm-tag\">11</span>);\r\n		studentList = studentMapper.find4(student);\r\n		studentList.forEach(s-&gt;System.out.println(s));\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试trim语句(查询)-----\"</span>);\r\n		student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student();\r\n		student.setName(<span class=\"hljs-string cye-lm-tag\">\"%李%\"</span>);\r\n		student.setAge(<span class=\"hljs-number cye-lm-tag\">11</span>);\r\n		studentList = studentMapper.find5(student);\r\n		studentList.forEach(s-&gt;System.out.println(s));\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试trim语句(更新)-----\"</span>);\r\n		student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student(<span class=\"hljs-number cye-lm-tag\">1</span>,<span class=\"hljs-string cye-lm-tag\">\"new name\"</span>,<span class=\"hljs-number cye-lm-tag\">23</span>);\r\n		studentMapper.update(student);\r\n		student = studentMapper.findById(<span class=\"hljs-number cye-lm-tag\">1</span>);\r\n		System.out.println(student);\r\n		System.out.println();\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"-----测试set语句-----\"</span>);\r\n		student = <span class=\"hljs-keyword cye-lm-tag\">new</span> Student(<span class=\"hljs-number cye-lm-tag\">1</span>,<span class=\"hljs-string cye-lm-tag\">\"张三\"</span>,<span class=\"hljs-number cye-lm-tag\">12</span>);\r\n		studentMapper.update2(student);\r\n		student = studentMapper.findById(<span class=\"hljs-number cye-lm-tag\">1</span>);\r\n		System.out.println(student);\r\n		sqlSession.commit();\r\n		\r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">输出：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"cs hljs cye-lm-tag\" codemark=\"1\">----测试<span class=\"hljs-keyword cye-lm-tag\">if</span>(接口方法参数为Student)----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">2</span>, name=李四, age=<span class=\"hljs-number cye-lm-tag\">11</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">16</span>, name=小李, age=<span class=\"hljs-number cye-lm-tag\">23</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">17</span>, name=大李, age=<span class=\"hljs-number cye-lm-tag\">14</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">18</span>, name=老李, age=<span class=\"hljs-number cye-lm-tag\">15</span>]\r\n\r\n-----测试<span class=\"hljs-keyword cye-lm-tag\">if</span>(接口方法参数为Map)-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">2</span>, name=李四, age=<span class=\"hljs-number cye-lm-tag\">11</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">13</span>, name=王五, age=<span class=\"hljs-number cye-lm-tag\">12</span>]\r\n\r\n-----测试choose, <span class=\"hljs-keyword cye-lm-tag\">when</span>, otherwise-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">1</span>, name=小张, age=<span class=\"hljs-number cye-lm-tag\">12</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">19</span>, name=小张, age=<span class=\"hljs-number cye-lm-tag\">16</span>]\r\n\r\n-----测试<span class=\"hljs-keyword cye-lm-tag\">where</span>语句-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">2</span>, name=李四, age=<span class=\"hljs-number cye-lm-tag\">11</span>]\r\n\r\n-----测试trim语句(查询)-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">2</span>, name=李四, age=<span class=\"hljs-number cye-lm-tag\">11</span>]\r\n\r\n-----测试trim语句(更新)-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">1</span>, name=<span class=\"hljs-keyword cye-lm-tag\">new</span> name, age=<span class=\"hljs-number cye-lm-tag\">23</span>]\r\n\r\n-----测试<span class=\"hljs-keyword cye-lm-tag\">set</span>语句-----\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">1</span>, name=张三, age=<span class=\"hljs-number cye-lm-tag\">12</span>]\r\n</code></pre><p class=\"cye-lm-tag\"><br></p><p class=\"cye-lm-tag\">参考：<font size=\"3\" class=\"cye-lm-tag\"><a href=\"/blog/article_foreDetail?articleId=53\" target=\"_blank\">MyBatis基础</a></font>、<span style=\"color: inherit; font-family: inherit;\" class=\"cye-lm-tag\"><font size=\"3\"><a href=\"http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html\" target=\"_blank\">动态 SQL</a></font></span></p><p class=\"cye-lm-tag\"><br></p>','2016-11-06 12:46:59','MyBatis动态SQL','原创','Mybatis基础 —— 动态SQL','2018-03-07 17:46:36','所有人可见',15),(34,'<p class=\"cye-lm-tag\">MyBatis分页有两种方式：逻辑分页和物理分页。所谓逻辑分页就是先把数据库中所有数据取出放在内存中，然后从内存中获取所需要的分页数据。而物理分页则是直接从数据库中获取所需要的分页数据。具体看下面代码：</p><p class=\"cye-lm-tag\">1、实体类Student.java</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.model;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">Student</span> </span>{\r\n\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer id;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String name;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer age;\r\n	\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-comment cye-lm-tag\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">(Integer id, String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.id = id;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.name = name;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.age = age;\r\n	}\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Student</span><span class=\"hljs-params cye-lm-tag\">(String name, Integer age)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.name = name;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.age = age;\r\n	}\r\n\r\n	<span class=\"hljs-annotation cye-lm-tag\">@Override</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> String <span class=\"hljs-title cye-lm-tag\">toString</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-string cye-lm-tag\">\"Student [id=\"</span> + id + <span class=\"hljs-string cye-lm-tag\">\", name=\"</span> + name + <span class=\"hljs-string cye-lm-tag\">\", age=\"</span> + age + <span class=\"hljs-string cye-lm-tag\">\"]\"</span>;\r\n	}\r\n	\r\n	<span class=\"hljs-comment cye-lm-tag\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">2、接口类StudentMapper.java</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.mappers;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.RowBounds;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">interface</span> <span class=\"hljs-title cye-lm-tag\">StudentMapper</span> </span>{\r\n	<span class=\"hljs-comment cye-lm-tag\">//逻辑分页</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">findStudents</span><span class=\"hljs-params cye-lm-tag\">(RowBounds rowBounds)</span></span>;\r\n	<span class=\"hljs-comment cye-lm-tag\">//物理分页</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> List&lt;Student&gt; <span class=\"hljs-title cye-lm-tag\">findStudents2</span><span class=\"hljs-params cye-lm-tag\">(Map&lt;String,Object&gt; map)</span></span>;\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">3、用于接口实现的XML配置文件</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"markdown hljs cye-lm-tag\" codemark=\"1\"><span class=\"xml cye-lm-tag\"><span class=\"hljs-pi cye-lm-tag\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span>\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-doctype cye-lm-tag\">&lt;!DOCTYPE mapper\r\nPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span>\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">mapper</span> <span class=\"hljs-attribute cye-lm-tag\">namespace</span>=<span class=\"hljs-value cye-lm-tag\">\"com.hyq.mappers.StudentMapper\"</span>&gt;</span></span>\r\n\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-comment cye-lm-tag\">&lt;!--\r\n    	1，size:表示缓存cache中能容纳的最大元素数。默认是1024；\r\n    	2，flushInterval:定义缓存刷新周期，以毫秒计；\r\n     	3，eviction:定义缓存的移除机制；默认是LRU(least recently userd，最近最少使用),还有FIFO(first in first out，先进先出)\r\n     	4，readOnly:默认值是false，假如是true的话，缓存只能读。\r\n     --&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">cache</span> <span class=\"hljs-attribute cye-lm-tag\">size</span>=<span class=\"hljs-value cye-lm-tag\">\"1024\"</span> <span class=\"hljs-attribute cye-lm-tag\">flushInterval</span>=<span class=\"hljs-value cye-lm-tag\">\"60000\"</span> <span class=\"hljs-attribute cye-lm-tag\">eviction</span>=<span class=\"hljs-value cye-lm-tag\">\"LRU\"</span> <span class=\"hljs-attribute cye-lm-tag\">readOnly</span>=<span class=\"hljs-value cye-lm-tag\">\"false\"</span>/&gt;</span></span>\r\n\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">resultMap</span> <span class=\"hljs-attribute cye-lm-tag\">type</span>=<span class=\"hljs-value cye-lm-tag\">\"Student\"</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">id</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"id\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"id\"</span>/&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">result</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"name\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"name\"</span>/&gt;</span></span>\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">result</span> <span class=\"hljs-attribute cye-lm-tag\">property</span>=<span class=\"hljs-value cye-lm-tag\">\"age\"</span> <span class=\"hljs-attribute cye-lm-tag\">column</span>=<span class=\"hljs-value cye-lm-tag\">\"age\"</span>/&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">resultMap</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"findStudents\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span>&gt;</span></span>\r\n		select * from t_student\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">select</span> <span class=\"hljs-attribute cye-lm-tag\">id</span>=<span class=\"hljs-value cye-lm-tag\">\"findStudents2\"</span> <span class=\"hljs-attribute cye-lm-tag\">resultMap</span>=<span class=\"hljs-value cye-lm-tag\">\"StudentResult\"</span> <span class=\"hljs-attribute cye-lm-tag\">parameterType</span>=<span class=\"hljs-value cye-lm-tag\">\"Map\"</span>&gt;</span></span>\r\n		select * from t_student\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">if</span> <span class=\"hljs-attribute cye-lm-tag\">test</span>=<span class=\"hljs-value cye-lm-tag\">\"start!=null and size!=null\"</span>&gt;</span></span>\r\n			limit #{start},#{size}\r\n		<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">if</span>&gt;</span></span>\r\n	<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">select</span>&gt;</span></span>\r\n	\r\n<span class=\"xml cye-lm-tag\"><span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">mapper</span>&gt;</span></span> </code></pre><p class=\"cye-lm-tag\">4、测试类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.hyq.service;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.HashMap;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Map;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.RowBounds;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> org.apache.ibatis.session.SqlSession;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.mappers.StudentMapper;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.model.Student;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> com.hyq.util.SqlSessionFactoryUtil;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">Test</span> </span>{\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> <span class=\"hljs-keyword cye-lm-tag\">void</span> <span class=\"hljs-title cye-lm-tag\">main</span><span class=\"hljs-params cye-lm-tag\">(String[] args)</span> </span>{\r\n		SqlSession sqlSession = SqlSessionFactoryUtil.openSession();\r\n		StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"---------逻辑分页---------\"</span>);\r\n		<span class=\"hljs-keyword cye-lm-tag\">int</span> offset = <span class=\"hljs-number cye-lm-tag\">0</span>;\r\n		<span class=\"hljs-keyword cye-lm-tag\">int</span> limit =<span class=\"hljs-number cye-lm-tag\">3</span>;\r\n		RowBounds rowBounds = <span class=\"hljs-keyword cye-lm-tag\">new</span> RowBounds(offset,limit);\r\n		List&lt;Student&gt; studentList = studentMapper.findStudents(rowBounds);\r\n		studentList.forEach((student)-&gt;{\r\n			System.out.println(student);\r\n		});\r\n		System.out.println(<span class=\"hljs-string cye-lm-tag\">\"\\n---------物理分页---------\"</span>);\r\n		Map&lt;String , Object&gt; map = <span class=\"hljs-keyword cye-lm-tag\">new</span> HashMap&lt;&gt;();\r\n		map.put(<span class=\"hljs-string cye-lm-tag\">\"start\"</span>, <span class=\"hljs-number cye-lm-tag\">4</span>);\r\n		map.put(<span class=\"hljs-string cye-lm-tag\">\"size\"</span>, <span class=\"hljs-number cye-lm-tag\">3</span>);\r\n		studentList = studentMapper.findStudents2(map);\r\n		studentList.forEach((student)-&gt;{\r\n			System.out.println(student);\r\n		});\r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">输出结果：</p><pre style=\"max-width: 100%;\"><code class=\"cs hljs\" codemark=\"1\">---------逻辑分页---------\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">1</span>, name=张三, age=<span class=\"hljs-number cye-lm-tag\">12</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">2</span>, name=李四, age=<span class=\"hljs-number cye-lm-tag\">11</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">13</span>, name=王五, age=<span class=\"hljs-number cye-lm-tag\">12</span>]\r\n\r\n---------物理分页---------\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">17</span>, name=大李, age=<span class=\"hljs-number cye-lm-tag\">14</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">18</span>, name=老李, age=<span class=\"hljs-number cye-lm-tag\">15</span>]\r\nStudent [id=<span class=\"hljs-number cye-lm-tag\">19</span>, name=小张, age=<span class=\"hljs-number cye-lm-tag\">16</span>]\r\n</code></pre><p class=\"cye-lm-tag\"><br></p>','2016-11-06 13:48:42','MyBatis分页、缓存','原创','Mybatis基础 —— 分页和缓存','2018-03-07 17:46:36','所有人可见',15),(35,'<p><font color=\"#008080\" size=\"5\">1、Spring Mvc拦截器</font></p><p>Spring Mvc中如果要实现自己的拦截器，有两种方式：一是继承HandlerInterceptor接口，并且实现该接口的三个方法，二是通过实现HandlerInterceptorAdapter，并且重写所需方法。下面举例：</p><p>首先定义两个拦截器：MyInterceptor.java和MyInterceptor2.java</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs java\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">package</span></span> com.hyq.interceptor;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.HandlerInterceptor;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.ModelAndView;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletRequest;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletResponse;\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/11/11.\r\n */</span></span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">MyInterceptor</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">implements</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">HandlerInterceptor</span></span></span></span>{\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">preHandle</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor的preHandle方法...\"</span></span>);\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">true</span></span>;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">postHandle</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor的postHandle方法...\"</span></span>);\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">afterCompletion</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor的afterCompletion方法...\"</span></span>);\r\n    }\r\n}\r\n</code></pre><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs java\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">package</span></span> com.hyq.interceptor;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> com.hyq.mvc.UserController;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.ui.ModelMap;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.HandlerInterceptor;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.ModelAndView;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletRequest;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletResponse;\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/11/11.\r\n */</span></span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">MyInterceptor2</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">implements</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">HandlerInterceptor</span></span></span></span>{\r\n\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">preHandle</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor2的preHandle方法...\"</span></span>);\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">true</span></span>;\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">postHandle</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor2的postHandle方法...\"</span></span>);\r\n    }\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">afterCompletion</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"MyInterceptor2的afterCompletion方法...\"</span></span>);\r\n    }\r\n}</code></pre><p>然后在springMvc的配置文件中加入如下配置：</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptors</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--拦截所有请求--&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"com.hyq.interceptor.MyInterceptor2\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptors</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptors</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptor</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n            <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--拦截指定请求路径的请求--&gt;</span></span>\r\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:mapping</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">path</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/user/*\"</span></span></span><span class=\"hljs-tag\">/&gt;</span></span>\r\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"com.hyq.interceptor.MyInterceptor\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptor</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">mvc:interceptors</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>下面给出一个Controller类：UserController.java</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs java\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">package</span></span> com.hyq.mvc;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.stereotype.Controller;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.bind.annotation.RequestMapping;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.ModelAndView;\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/11/11.\r\n */</span></span>\r\n<span class=\"hljs-meta\"><span class=\"hljs-meta\">@Controller</span></span>\r\n<span class=\"hljs-meta\"><span class=\"hljs-meta\">@RequestMapping</span></span>(value = <span class=\"hljs-string\"><span class=\"hljs-string\">\"/user\"</span></span>)\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">UserController</span></span></span><span class=\"hljs-class\"> </span></span>{\r\n\r\n    <span class=\"hljs-meta\"><span class=\"hljs-meta\">@RequestMapping</span></span>(value = <span class=\"hljs-string\"><span class=\"hljs-string\">\"/add\"</span></span>)\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> ModelAndView </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">add</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">()</span></span></span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"添加用户操作...\"</span></span>);\r\n        ModelAndView modelAndView = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> ModelAndView();\r\n        modelAndView.addObject(<span class=\"hljs-string\"><span class=\"hljs-string\">\"name\"</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">\"张三\"</span></span>);\r\n        modelAndView.addObject(<span class=\"hljs-string\"><span class=\"hljs-string\">\"pass\"</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">\"1222\"</span></span>);\r\n        modelAndView.setViewName(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/userAdd.jsp\"</span></span>);\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> modelAndView;\r\n    }\r\n\r\n}\r\n</code></pre><p>然后在浏览器地址栏中请求：http://localhost:8080/user/add，可以看到控制台有如下输出：</p><p></p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs\">MyInterceptor2的preHandle方法...\r\nMyInterceptor的preHandle方法...\r\n添加用户操作...\r\nMyInterceptor的postHandle方法...\r\nMyInterceptor2的postHandle方法...\r\nMyInterceptor的afterCompletion方法...\r\nMyInterceptor2的afterCompletion方法...</code></pre><p>在postHandle方法处打个断点可以看到如下结果：</p><p><img src=\"http://localhost:8080/MyBlog/files/article_pic/63cde9fc-9418-4995-a0e7-77e88dcdcf80.png\" alt=\"搜狗截图20161111234628\"></p><p>说明在此处的modelAndView就是Controller中返回，view就是将要跳转的视图名(如果controller中没有指定要跳转的视图名，则view是controller的请求路径，即“user/add”)</p><p><font size=\"5\" color=\"#008080\">2、Spring Mvc 异常处理</font></p><ul><li><font size=\"4\" color=\"#808000\">使用Spring Mvc提供的SimpleMappingExceptionResolver</font></li></ul><div>该方法只需在spring mvc的配置文件中加入如下配置：</div><div></div><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs xml\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- 总错误处理--&gt;</span></span>\r\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">id</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"exceptionResolver\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--设置发生错误时的默认跳转页面,在jsp页面中可以使用${exception}来获取异常信息--&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"defaultErrorView\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>/error.jsp<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"defaultStatusCode\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>500<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--下面属性表示在发生异常时给出警告--&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"warnLogCategory\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">value</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>当Controller层发生异常时，SpringMvc会自动捕捉该异常，并且跳转到指定页面(此处是跳转到error.jsp页面)，并且可以在页面上通过EL表达式取得异常信息，即${exception}</p><ul><li><font size=\"4\" color=\"#808000\">通过实现Spring的异常处理接口HandlerExceptionResolver来自定义自己的异常处理器，如：</font></li></ul><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs java\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">package</span></span> com.hyq.exception;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.HandlerExceptionResolver;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.servlet.ModelAndView;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletRequest;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletResponse;\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">/**\r\n * Created by Administrator on 2016/11/11.\r\n */</span></span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">MyException</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">implements</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">HandlerExceptionResolver</span></span></span><span class=\"hljs-class\"> </span></span>{\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> ModelAndView </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">resolveException</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span></span></span><span class=\"hljs-function\"> </span></span>{\r\n        System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"下面输出异常信息....\"</span></span>);\r\n        e.printStackTrace();\r\n        ModelAndView modelAndView = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> ModelAndView();\r\n        modelAndView.addObject(<span class=\"hljs-string\"><span class=\"hljs-string\">\"exception\"</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">\"这是异常信息(自定义异常处理类)\"</span></span>);\r\n        modelAndView.setViewName(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/error.jsp\"</span></span>);\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> modelAndView;\r\n    }\r\n}\r\n</code></pre><p>在上面的UserController类中加find方法：</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs cs\">@RequestMapping(<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">value</span></span> = <span class=\"hljs-string\"><span class=\"hljs-string\">\"/find\"</span></span>)\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> ModelAndView </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">find</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">Integer id</span></span></span><span class=\"hljs-function\">) throws Exception </span></span>{\r\n        System.<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">out</span></span>.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"查找用户操作...\"</span></span>);\r\n        ModelAndView modelAndView = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> ModelAndView();\r\n        modelAndView.setViewName(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/userList.jsp\"</span></span>);\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(id==<span class=\"hljs-literal\"><span class=\"hljs-literal\">null</span></span>){\r\n            <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw</span></span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> Exception();\r\n        }\r\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> modelAndView;\r\n    }</code></pre><p>最后在Spring Mvc配置文件中加入如下配置：</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs javascript\">&lt;bean id=<span class=\"hljs-string\"><span class=\"hljs-string\">\"myException\"</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span></span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"com.hyq.exception.MyException\"</span></span>/&gt;</code></pre><p>浏览器地址栏中请求http://localhost:8080/user/find</p><p><img src=\"http://localhost:8080/MyBlog/files/article_pic/0ecceff7-95e6-4a46-9974-7e9374c7d76d.png\" alt=\"搜狗截图20161112132359\"></p><p>同时也可在控制台中看到异常信息的输出。</p><p><font size=\"5\" color=\"#008080\">3、Spring Mvc 上传图片</font></p><p>使用Spring Mvc进行文件上传时，需要在springmvc的配置文件中加入下面配置：</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs javascript\">&lt;bean id=<span class=\"hljs-string\"><span class=\"hljs-string\">\"multipartResolver\"</span></span>\r\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span></span>=<span class=\"hljs-string\"><span class=\"hljs-string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span></span>&gt;\r\n		<span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"defaultEncoding\"</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"UTF-8\"</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">/&gt;</span></span></span><span class=\"xml\">  \r\n	    </span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">property</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"maxUploadSize\"</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"10000000\"</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">/&gt;</span></span></span><span class=\"xml\">\r\n	</span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">bean</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span></code></pre><p>此外还要添加这两个jar包：<a href=\"https://mvnrepository.com/artifact/org.apache.commons/com.springsource.org.apache.commons.fileupload\" target=\"_blank\">com.springsource.org.apache.commons.fileupload-1.2.0.jar</a>、<a href=\"https://mvnrepository.com/artifact/org.apache.commons/com.springsource.org.apache.commons.io\" target=\"_blank\">com.springsource.org.apache.commons.io-1.4.0.jar</a></p><p>下面给出一个单文件上传和多文件上传的实例：</p><p>1、上传页面index.html</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs xml\"><span class=\"hljs-meta\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">meta</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">charset</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"UTF-8\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Insert title here<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n	<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">form</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">action</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"upload.do\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">method</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"post\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">enctype</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"multipart/form-data\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		选择文件：<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"submit\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"上传文件\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n	<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">form</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n	<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">hr</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n	<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">form</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">action</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"upload2.do\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">method</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"post\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">enctype</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"multipart/form-data\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n			文件1：<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n			文件2：<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n			文件3：<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">name</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"file\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n		<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">type</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"submit\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"上传文件\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n	<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">form</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\r\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>2、FileUploadController.java</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs java\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">package</span></span> com.java1234.controller;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> java.io.File;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> javax.servlet.http.HttpServletRequest;\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.stereotype.Controller;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.bind.annotation.RequestMapping;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.bind.annotation.RequestParam;\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span> org.springframework.web.multipart.MultipartFile;\r\n\r\n<span class=\"hljs-meta\"><span class=\"hljs-meta\">@Controller</span></span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">public</span></span> <span class=\"hljs-class\"><span class=\"hljs-keyword\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span></span><span class=\"hljs-class\"> </span><span class=\"hljs-title\"><span class=\"hljs-class\"><span class=\"hljs-title\">FileUploadController</span></span></span><span class=\"hljs-class\"> </span></span>{\r\n\r\n	<span class=\"hljs-meta\"><span class=\"hljs-meta\">@RequestMapping</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/upload\"</span></span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> String </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">uploadFile</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(@RequestParam(</span></span><span class=\"hljs-string\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-string\">\"file\"</span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-params\">)</span></span></span><span class=\"hljs-function\"> MultipartFile file,HttpServletRequest request) </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception</span></span>{\r\n		System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"单文件上传\"</span></span>);\r\n		String filePath = request.getServletContext().getRealPath(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/\"</span></span>);\r\n		System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"原文件名：--\"</span></span>+file.getOriginalFilename()+<span class=\"hljs-string\"><span class=\"hljs-string\">\"--\"</span></span>);\r\n		<span class=\"hljs-comment\"><span class=\"hljs-comment\">//可以根据下面语句判断上传的文件是否为空</span></span>\r\n		<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(!<span class=\"hljs-string\"><span class=\"hljs-string\">\"\"</span></span>.equals(file.getOriginalFilename())){\r\n			file.transferTo(<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> File(filePath+<span class=\"hljs-string\"><span class=\"hljs-string\">\"upload/\"</span></span>+file.getOriginalFilename()));\r\n		}<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">else</span></span>{\r\n			System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"未选择上传的文件\"</span></span>);\r\n		}\r\n		System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"------分割线------\"</span></span>);\r\n		<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"redirect:success.html\"</span></span>;\r\n	}\r\n	\r\n	<span class=\"hljs-meta\"><span class=\"hljs-meta\">@RequestMapping</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/upload2\"</span></span>)\r\n	<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span></span></span><span class=\"hljs-function\"> String </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">uploadFiles</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(@RequestParam(</span></span><span class=\"hljs-string\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-string\">\"file\"</span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-params\">)</span></span></span><span class=\"hljs-function\"> MultipartFile[] files,HttpServletRequest request) </span><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">throws</span></span></span><span class=\"hljs-function\"> Exception</span></span>{\r\n		System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"多文件上传\"</span></span>);\r\n		String filePath = request.getServletContext().getRealPath(<span class=\"hljs-string\"><span class=\"hljs-string\">\"/\"</span></span>);\r\n		<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">for</span></span>(MultipartFile file:files){\r\n			<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">\"\"</span></span>.equals(file.getOriginalFilename())){\r\n				System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"未选择上传的文件\"</span></span>);\r\n			}<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">else</span></span>{\r\n				System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"原文件名：--\"</span></span>+file.getOriginalFilename()+<span class=\"hljs-string\"><span class=\"hljs-string\">\"--\"</span></span>);\r\n				file.transferTo(<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> File(filePath+<span class=\"hljs-string\"><span class=\"hljs-string\">\"upload/\"</span></span>+file.getOriginalFilename()));\r\n			}\r\n		}\r\n		System.out.println(<span class=\"hljs-string\"><span class=\"hljs-string\">\"------分割线------\"</span></span>);\r\n		<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"redirect:success.html\"</span></span>;\r\n	}\r\n	\r\n}\r\n</code></pre><p>下面进行单文件上传和多文件上传测试可以看到控制台有如下输出：</p><pre id=\"preId\"><code codemark=\"1\" id=\"codeId\" class=\"hljs sql\">单文件上传\r\n原文件名：<span class=\"hljs-comment\"><span class=\"hljs-comment\">--3c782f4d7dd3de35-52f9737614ce151b-ae294a596652e94c94407941dce5c072_i.jpg--</span></span>\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">------分割线------</span></span>\r\n多文件上传\r\n原文件名：<span class=\"hljs-comment\"><span class=\"hljs-comment\">--1403951389938.jpg--</span></span>\r\n原文件名：<span class=\"hljs-comment\"><span class=\"hljs-comment\">--1403951390993.jpg--</span></span>\r\n原文件名：<span class=\"hljs-comment\"><span class=\"hljs-comment\">--201604071137298161.jpg--</span></span>\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">------分割线------</span></span></code></pre>','2016-11-11 23:30:25','Spring Mvc拦截器','原创','Spring Mvc知识点汇总(1)','2018-03-19 20:16:35','所有人可见',16),(36,'<p>1、对于Java Web应用而言，WEB-INF是一个特殊的文件夹，Web容器会包含该文件夹下的内容，客户端浏览器无法直接访问WEB-INF路径下的任何内容(这并不意味着资源文件不能放在路径下，可以通过后台程序内部跳转访问WEB-INF路径下的资源，这里注意：一定要内部转发访问，如果使用重定向的话，照样不可访问该路径下的任何内容)。</p><p>2、</p><p><br></p>','2016-11-15 23:09:02','','原创','Servlet和Jsp中的一些小知识点汇总','2018-03-07 17:46:36','所有人可见',12),(37,'<p class=\"cye-lm-tag\">在平时写项目中我们经常会用到josn-lib来把对象转为json格式数据，首先给出maven中要使用json所需的依赖(有时候特难找，所以这里直接给出)：</p><pre style=\"max-width: 100%;\"><code class=\"xml hljs\" codemark=\"1\"><span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">dependency</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">groupId</span>&gt;</span>net.sf.json-lib<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">groupId</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">artifactId</span>&gt;</span>json-lib<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">artifactId</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">version</span>&gt;</span>2.3<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">version</span>&gt;</span>\r\n    <span class=\"hljs-tag cye-lm-tag\">&lt;<span class=\"hljs-title cye-lm-tag\">classifier</span>&gt;</span>jdk15<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">classifier</span>&gt;</span>\r\n<span class=\"hljs-tag cye-lm-tag\">&lt;/<span class=\"hljs-title cye-lm-tag\">dependency</span>&gt;</span></code></pre><p class=\"cye-lm-tag\">下面通过一个示例来展示json-lib中的一些其他用法：</p><p class=\"cye-lm-tag\">首先给出一个实体类People.java：</p><pre style=\"max-width: 100%;\" class=\"cye-lm-tag\"><code class=\"java hljs cye-lm-tag\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.test.json;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Date;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">People</span> </span>{\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer id;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String name;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Date birth;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String hobby;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Book book;\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">People</span><span class=\"hljs-params cye-lm-tag\">(Integer id, String name, Date birth,String hobby)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.id = id;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.name = name;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.birth = birth;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.hobby = hobby;\r\n	}\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">People</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-comment cye-lm-tag\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	<span class=\"hljs-comment cye-lm-tag\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">相关联的Book.java类</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.test.json;\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">Book</span> </span>{\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Integer bookNo;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String bookName;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> <span class=\"hljs-keyword cye-lm-tag\">double</span> price;\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String bookAuthor;\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Book</span><span class=\"hljs-params cye-lm-tag\">(Integer bookNo, String bookName, <span class=\"hljs-keyword cye-lm-tag\">double</span> price, String bookAuthor)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.bookNo = bookNo;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.bookName = bookName;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.price = price;\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.bookAuthor = bookAuthor;\r\n	}\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">Book</span><span class=\"hljs-params cye-lm-tag\">()</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">super</span>();\r\n		<span class=\"hljs-comment cye-lm-tag\">// TODO Auto-generated constructor stub</span>\r\n	}\r\n	<span class=\"hljs-comment cye-lm-tag\">/**\r\n	 * 这里省略了getter和setter方法\r\n	 */</span>\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">下面直接先给出测试类JsonTest.java：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.test.json;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.Date;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.util.List;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.JSONArray;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.JsonConfig;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">JsonTest</span> </span>{\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-keyword cye-lm-tag\">static</span> <span class=\"hljs-keyword cye-lm-tag\">void</span> <span class=\"hljs-title cye-lm-tag\">main</span><span class=\"hljs-params cye-lm-tag\">(String[] args)</span> <span class=\"hljs-keyword cye-lm-tag\">throws</span> Exception</span>{\r\n		Book b1 = <span class=\"hljs-keyword cye-lm-tag\">new</span> Book(<span class=\"hljs-number cye-lm-tag\">11</span>,<span class=\"hljs-string cye-lm-tag\">\"java编程思想\"</span>,<span class=\"hljs-number cye-lm-tag\">99.2</span>,<span class=\"hljs-string cye-lm-tag\">\"作者1\"</span>);\r\n		People p1 = <span class=\"hljs-keyword cye-lm-tag\">new</span> People(<span class=\"hljs-number cye-lm-tag\">1</span>,<span class=\"hljs-string cye-lm-tag\">\"天才\"</span>,<span class=\"hljs-keyword cye-lm-tag\">new</span> Date(),<span class=\"hljs-string cye-lm-tag\">\"打篮球\"</span>);\r\n		p1.setBook(b1);\r\n		Thread.sleep(<span class=\"hljs-number cye-lm-tag\">2000</span>);\r\n		Book b2 = <span class=\"hljs-keyword cye-lm-tag\">new</span> Book(<span class=\"hljs-number cye-lm-tag\">18</span>,<span class=\"hljs-string cye-lm-tag\">\"设计模式\"</span>,<span class=\"hljs-number cye-lm-tag\">45.12</span>,<span class=\"hljs-string cye-lm-tag\">\"作者2\"</span>);\r\n		People p2 = <span class=\"hljs-keyword cye-lm-tag\">new</span> People(<span class=\"hljs-number cye-lm-tag\">2</span>,<span class=\"hljs-string cye-lm-tag\">\"天才2\"</span>,<span class=\"hljs-keyword cye-lm-tag\">new</span> Date(),<span class=\"hljs-string cye-lm-tag\">\"打乒乓球\"</span>);\r\n		p2.setBook(b2);\r\n		List&lt;People&gt; peopleList = <span class=\"hljs-keyword cye-lm-tag\">new</span> ArrayList&lt;&gt;();\r\n		peopleList.add(p1);\r\n		peopleList.add(p2);\r\n		JsonConfig jsonConfig = <span class=\"hljs-keyword cye-lm-tag\">new</span> JsonConfig();\r\n		jsonConfig.setExcludes(<span class=\"hljs-keyword cye-lm-tag\">new</span> String[]{<span class=\"hljs-string cye-lm-tag\">\"hobby\"</span>});	<span class=\"hljs-comment cye-lm-tag\">//忽略hobby属性</span>\r\n		jsonConfig.registerJsonValueProcessor(java.util.Date.class, <span class=\"hljs-keyword cye-lm-tag\">new</span> JsonDateProcesser(<span class=\"hljs-string cye-lm-tag\">\"yyyy-MM-dd HH:mm:ss\"</span>));\r\n		jsonConfig.registerJsonValueProcessor(Book.class, <span class=\"hljs-keyword cye-lm-tag\">new</span> JsonObjectValueProcessor(<span class=\"hljs-keyword cye-lm-tag\">new</span> String[]{<span class=\"hljs-string cye-lm-tag\">\"bookName\"</span>,<span class=\"hljs-string cye-lm-tag\">\"price\"</span>},Book.class));\r\n		<span class=\"hljs-comment cye-lm-tag\">//把对象转成json数组</span>\r\n		JSONArray rows = JSONArray.fromObject(peopleList, jsonConfig);\r\n		System.out.println(rows.toString());\r\n	}\r\n}\r\n\r\n</code></pre><p class=\"cye-lm-tag\">上面测试类中的JsonDateProcesser类代码如下：</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.test.json;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.text.SimpleDateFormat;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.JsonConfig;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.processors.JsonValueProcessor;\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">JsonDateProcesser</span>  <span class=\"hljs-keyword cye-lm-tag\">implements</span> <span class=\"hljs-title cye-lm-tag\">JsonValueProcessor</span></span>{\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String format;\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">JsonDateProcesser</span><span class=\"hljs-params cye-lm-tag\">(String format)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">this</span>.format = format;\r\n	}\r\n	<span class=\"hljs-annotation cye-lm-tag\">@Override</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Object <span class=\"hljs-title cye-lm-tag\">processArrayValue</span><span class=\"hljs-params cye-lm-tag\">(Object arg0, JsonConfig arg1)</span> </span>{\r\n		<span class=\"hljs-comment cye-lm-tag\">// TODO Auto-generated method stub</span>\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-keyword cye-lm-tag\">null</span>;\r\n	}\r\n	<span class=\"hljs-annotation cye-lm-tag\">@Override</span>\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Object <span class=\"hljs-title cye-lm-tag\">processObjectValue</span><span class=\"hljs-params cye-lm-tag\">(String key, Object value, JsonConfig config)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">if</span>(value == <span class=\"hljs-keyword cye-lm-tag\">null</span>){  \r\n            <span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-string cye-lm-tag\">\"\"</span>;  \r\n        }   \r\n        <span class=\"hljs-keyword cye-lm-tag\">if</span> (value <span class=\"hljs-keyword cye-lm-tag\">instanceof</span> java.util.Date){  \r\n            String str = <span class=\"hljs-keyword cye-lm-tag\">new</span> SimpleDateFormat(format).format((java.util.Date) value);  \r\n            <span class=\"hljs-keyword cye-lm-tag\">return</span> str;  \r\n        } \r\n        <span class=\"hljs-keyword cye-lm-tag\">return</span> value.toString(); \r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">上面这个类把People实体中的日期类型的字段birth进行格式化</p><p class=\"cye-lm-tag\">测试方法中的JsonObjectValueProcessor类的代码如下:</p><pre style=\"max-width: 100%;\"><code class=\"java hljs\" codemark=\"1\"><span class=\"hljs-keyword cye-lm-tag\">package</span> com.test.json;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.beans.PropertyDescriptor;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> java.lang.reflect.Method;\r\n\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.JSONObject;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.JsonConfig;\r\n<span class=\"hljs-keyword cye-lm-tag\">import</span> net.sf.json.processors.JsonValueProcessor;\r\n<span class=\"hljs-comment cye-lm-tag\">/**\r\n *该方法可用于解决对象级联问题\r\n */</span>\r\n<span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-class cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">class</span> <span class=\"hljs-title cye-lm-tag\">JsonObjectValueProcessor</span> <span class=\"hljs-keyword cye-lm-tag\">implements</span> <span class=\"hljs-title cye-lm-tag\">JsonValueProcessor</span></span>{\r\n	<span class=\"hljs-comment cye-lm-tag\">//指定类中需要保留的字段</span>\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> String[] properties;  \r\n	<span class=\"hljs-comment cye-lm-tag\">//指定的处理类型</span>\r\n	<span class=\"hljs-keyword cye-lm-tag\">private</span> Class&lt;?&gt; clazz;  \r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> <span class=\"hljs-title cye-lm-tag\">JsonObjectValueProcessor</span><span class=\"hljs-params cye-lm-tag\">(String[] properties,Class&lt;?&gt; clazz)</span></span>{  \r\n        <span class=\"hljs-keyword cye-lm-tag\">this</span>.properties = properties;  \r\n        <span class=\"hljs-keyword cye-lm-tag\">this</span>.clazz =clazz;  \r\n    }  \r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Object <span class=\"hljs-title cye-lm-tag\">processArrayValue</span><span class=\"hljs-params cye-lm-tag\">(Object arg0, JsonConfig arg1)</span> </span>{\r\n		<span class=\"hljs-keyword cye-lm-tag\">return</span> <span class=\"hljs-keyword cye-lm-tag\">null</span>;\r\n	}\r\n	<span class=\"hljs-function cye-lm-tag\"><span class=\"hljs-keyword cye-lm-tag\">public</span> Object <span class=\"hljs-title cye-lm-tag\">processObjectValue</span><span class=\"hljs-params cye-lm-tag\">(String key, Object value, JsonConfig jsonConfig)</span> </span>{\r\n		PropertyDescriptor pd = <span class=\"hljs-keyword cye-lm-tag\">null</span>;  \r\n        Method method = <span class=\"hljs-keyword cye-lm-tag\">null</span>;  \r\n        StringBuffer json = <span class=\"hljs-keyword cye-lm-tag\">new</span> StringBuffer(<span class=\"hljs-string cye-lm-tag\">\"{\"</span>);  \r\n        <span class=\"hljs-keyword cye-lm-tag\">try</span>{\r\n            <span class=\"hljs-keyword cye-lm-tag\">for</span>(<span class=\"hljs-keyword cye-lm-tag\">int</span> i=<span class=\"hljs-number cye-lm-tag\">0</span>;i&lt;properties.length;i++){\r\n            	<span class=\"hljs-comment cye-lm-tag\">//传入属性名和类即可获取读取该属性的方法</span>\r\n                pd = <span class=\"hljs-keyword cye-lm-tag\">new</span> PropertyDescriptor(properties[i], clazz);\r\n                method = pd.getReadMethod();\r\n                <span class=\"hljs-comment cye-lm-tag\">//通过执行该方法获取属性值</span>\r\n                String v = String.valueOf(method.invoke(value));\r\n                <span class=\"hljs-comment cye-lm-tag\">//手动拼接json字符串</span>\r\n                json.append(<span class=\"hljs-string cye-lm-tag\">\"\'\"</span>+properties[i]+<span class=\"hljs-string cye-lm-tag\">\"\':\'\"</span>+v+<span class=\"hljs-string cye-lm-tag\">\"\'\"</span>);\r\n                <span class=\"hljs-comment cye-lm-tag\">//判断是否处理到了最后一个元素</span>\r\n                json.append(i != properties.length-<span class=\"hljs-number cye-lm-tag\">1</span>?<span class=\"hljs-string cye-lm-tag\">\",\"</span>:<span class=\"hljs-string cye-lm-tag\">\"\"</span>);\r\n            }\r\n            json.append(<span class=\"hljs-string cye-lm-tag\">\"}\"</span>);  \r\n        }<span class=\"hljs-keyword cye-lm-tag\">catch</span> (Exception e) {  \r\n            e.printStackTrace();  \r\n        }  \r\n        <span class=\"hljs-keyword cye-lm-tag\">return</span> JSONObject.fromObject(json.toString());\r\n	}\r\n}\r\n</code></pre><p class=\"cye-lm-tag\">上面这个方法可以避免把实体转化为json格式数据时因为跟类中的字段有级联关系而陷入死循环。</p>','2016-11-17 23:58:43','json','原创','JSON格式相关知识点','2018-03-07 17:46:36','所有人可见',7),(38,'<p><font color=\"#00ff00\" size=\"5\">1、新创建的对象存储到什么地方？</font></p><p><b>1）寄存器</b>。这是最快的存储区，因为它位于不同于其他存储区的地方——处理器内部。但是寄存器的数量及其有限，所以寄存器根据需求进行分配。不能直接控制，也不能在程序中感觉到寄存器存在的任何迹象。</p><p><b>2）堆栈</b>。位于通用RAM(随机访问存储器)中，但通过堆栈指针可以从处理器那里获得直接支持。堆栈指针若向下移动，则分配新的内存；若向上移动，则释放那些内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时，Java系统必须知道存储在堆栈内所有项的确切生命周期，以便上下移动堆栈指针。这一约束限制了程序的灵活性，所以虽然某些java数据存储于堆栈中——特别是对象引用，但java对象并不存储于其中。</p><p><b>3）堆</b>。一种通用的内存池(也位于RAM区)，用于存放所有的java对象。堆不同于堆栈的好处是：编译器不需要知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当需要一个对象时，只需要用new写一行简单的代码，当执行这行代码时，会自动在堆里进行存储代码分配。当然，为了这种灵活性必须付出相应的代价：用堆进行存储分配和清理可能比用堆栈进行存储分配需要更多的时间。</p><p><b>4）常量存储</b>。常量值通常直接存放在程序代码内部，这样做是安全的，因为它永远不会被改变。有时，在嵌入式系统中，常量本身会和其他部分分隔离开，所以这种情况下可选择将其存放在ROM（只读存储器中）。</p><p><b>5）非RAM存储</b>。如果数据完全存活于程序之外，那么它可以不受程序的任何控制，在程序没有运行时也可以存在。其中两个基本的例子就是流对象和持久化对象。在流对象中，对象转化为字节流，通常被发送到另一台机器上。在持久化对象中，对象被存放于硬盘中，因此，即使程序终止，它们仍可以保持自己的状态。</p><p><br></p><p>2、Java中基本成员默认值</p><p>只有当变量作为类的成员时，Java才会确保给定其默认值，以确保那些是基本类型的成员变量得到初始化，防止产生程序错误。但是java不会给局部“变量”初始化(即并非某个类的变量)。</p><table border=\"1\"><tbody><tr><td style=\"text-align: center;\">&nbsp;基本类型</td><td>默认值&nbsp;</td></tr><tr><td>&nbsp;boolean</td><td>false&nbsp;</td></tr><tr><td>&nbsp;char</td><td>‘\\u0000’(null)&nbsp;</td></tr><tr><td>&nbsp;byte</td><td>(byte)0&nbsp;</td></tr><tr><td>&nbsp;short&nbsp;</td><td>(short)0&nbsp;</td></tr><tr><td>&nbsp;int</td><td>0&nbsp;</td></tr><tr><td>&nbsp;long</td><td>0L&nbsp;</td></tr><tr><td>&nbsp;float</td><td>0.0f&nbsp;</td></tr><tr><td>&nbsp;double</td><td>0.0d&nbsp;</td></tr></tbody></table><p><br></p>','2016-12-07 23:41:55','对象','原创','Thinking in java第二章——一切都是对象(学习笔记)','2018-03-07 17:46:36','所有人可见',17),(59,'<p>&nbsp;&nbsp;&nbsp;&nbsp;过了这么久，现在回想起来竟然不知该从何说起，仔细想想，那就从2月份回到杭州开始说起吧！</p><p>&nbsp;&nbsp;&nbsp;&nbsp;记得去年很早就回到了杭州，因为当时实习公司要求上班的时间比较早，所以过了年过了七八天就回来了。回来后直接开始继续实习，住的地方也是年前租好的。那时候其实实习做的工作也还好，可以接触公司整个后台框架，配合公司分配的任务，不得不说确实可以学到挺多东西的，同时也能接触到很多新东西。但是那个时候心里一直有个疙瘩，就是年前公司说年后回来开始谈合同的事情，所以我当时想快点从公司那得到他们的报价，如果自己觉得不满意也还有时间再继续找。就这样挨了一两周吧，等大家基本回来之后，公司终于开始挨个谈话了，我当时谈话的时候直接报价8k，当时自己觉得这个报价也有那么一点点高，但是为了不让公司压价太多，所以只能报的虚高一点。后来公司的恢复说实话我有点吃惊，因为他们很委婉的说出来我报的太高了，他们说应届生只能5.5k，听到这个数字我当时就决定辞了。再说自己的毕业设计也还没开始弄。再过了一周，我提出自己要回去做毕业设计，跟公司提出来伪辞职（请了一两个月的长假）。现在想想，这次辞职是这一整年噩梦的开始。</p><p>&nbsp; &nbsp; 回到学校后，我想好好放松一下，因为当时挺沮丧的。至于沮丧的原因，后来想想是因为落差太大，准确的来说是当时自己太无知了，真的天真的一位学了一点技术就可以月薪8k。回学校后宿舍只有阿毛和大神，他们天天玩王者荣耀，在此之前的我是从来不玩游戏的，因为我觉得玩游戏简直是浪费时间，没事可做才玩游戏消遣。但当时我也不知道自己哪根筋不对，竟然真的下了个王者荣耀开始玩了，不得不说，这个游戏，这次下载，直接贯穿了我的整个2017年。从一开始的消遣玩玩，到后来开始慢慢发现有点控制不住自己了，但是发现打游戏真的可以让人忘记现实中的不开始。可能是压抑自己太久了，我最终彻底沉迷了。虽然当时宿舍氛围以及大神的怂恿都对我沉迷游戏有挺大的影响，但是我从来没有怪过他们，其实就是我自己的问题，后来发生的事更加证明了这一点。可以说整个三月都在打游戏，就是偶尔写一下毕业设计的项目代码。那段时间可以说是人生中第一次体会到彻底放纵自己的滋味。</p><p>&nbsp; &nbsp; 时间来到四月份，但是其实有一点打算快点把毕业设计写完，然后开始出去找工作。但是，那时候玩游戏真的上瘾了，万万没想到，在最关键的时候，跌入谷底。所以事实上四月份我依然没有找到工作，甚至都没怎么去试。毕业设计也是一团糟，代码写写停停。不过好像四月份总归是吧毕业设计项目写完了。四月份的时候，我第一次感觉到了什么是拖延症，那时学校已经慢慢开始要交毕业设计的文献综述这些乱七八糟的东西了，我记得每次要交之前我都在拼命的打游戏，彻底让自己陷进去，直到把时间压缩到不能再少了的时候才开始动笔搞这些本来应该算是正事的东西。这个拖延症伴随了我整个毕业设计，甚至可以说，此时此刻，依然还在。如果问我那时候自己这么堕落有没有罪恶感，内疚感等，我可以肯定的回答：有，而且很强。但每次都安慰自己，诸如：等我把这个搞完我就一定出去找工作，我最后玩一天，绝对卸载游戏等等，可以说每次都被这些自我安慰麻醉。前段时间回看以前的备忘录，当时写了很多下大决心的话，现在想想真的非常讽刺！</p><p>&nbsp; &nbsp; 五月份学校的事情越来越多，毕业设计电子稿要开始弄了，但是我那时正陷入疯狂玩游戏中，四月份日的那份拖延症在五月份彻底放大，那时候宁愿睡少一点也要先玩游戏，直到离导师交代的上交电子稿日期只剩一点点时间才开始写，好在有模板，整个项目也搭建起来了，很多东西只要照着写就行了。因为整个项目都是自己写了，知网上类似的也很少，所以最终毕业设计查重率挺低的。五月份还去了浙江工业大学那边的一个挺大型的招聘会，当时好像投了也不多，回去后收到那么一两个要去面试的电话，但是我只去了一个（成功软件游戏公司？）,那时的我依然不甘心，报价的时候又是直接报了7.5k，结果跟上次基本一样，被当场说要价太高了，所以这次也凉了。经过这次后，我就开始有点逃避工作了，但是大概是觉得自己以前那么努力，凭什么跟那些水平那么差的人拿一样的工资。就是这种思想影响着我，看不清楚自己的现状。这次面试失败并没有让我冷静下来，也没有让我的游戏隐减少一点，甚至越陷越深，越来越沉迷。</p><p>&nbsp; &nbsp; 六月份可以说是在学校的最后一段时间了，那时候周围的同学毕业后的去向基本上都已经定了，我可能是当时唯一一个还在迷茫的人。时间来到这个节点依然没有让我放弃游戏回归现实，当时王者荣耀对我真的对我有点特殊的魔力。真的很喜欢玩，玩的时候什么都不会想，就一局一局的一直打。六月份好像就毕业设计答辩，毕业聚会还有拍毕业照这些事。鉴于当时的处境，这些事情本来应该是很伤感的，毕竟到处都充满着离愁别绪，可当时的我却感觉并不强烈，很多事情都是匆匆处理掉，然后回到寝室打游戏，记得六月份开始，我开始打王者荣耀的排位赛了，不得不说，这游戏的排位赛更加能拽住玩家，让玩家越陷越深。从开始玩游戏到现在这个点，期间我尝试去戒过好几次，每次都失败了，并且重新玩回去反而大大加深了我的隐，真的很奇怪。我就这样没心没肺的玩到毕业，玩到学校宿舍开始不能住人。舍友都走了，而我，有点迷茫和无助，也怨恨自己在关键的时候失足。后来学校实在不能住了，于是搬过来跟阿毛一起住。没想当时以为的暂住却变成了一住就住到现在....，但是不得不说感想阿毛收留了我这么久，期间应该也给他带来一些麻烦。</p><p>&nbsp; &nbsp; 在接下来七月份到元旦，我，无业，整体打游戏，期间患上了电话恐惧症，不想(敢)接任何人的电话，想逃避一切。值得一提的是七月份的时候哥来了一趟杭州来看我，大概是不放心我（毕业后无业），虽然哥跟我说了很多，也给了我很多建议，但这也仅仅使我在接下来的几天学习了一下，接下来依然是暗无天日的堕落。从七月份开始，我慢慢开始昼夜颠倒，因为晚上安静，没人打扰，这样我就可以心无旁骛的彻底沉入游戏中。这段时间其实没啥好说的，就是每天都是重复的颓废，讽刺的是期间无数次下过这样的决心：等到XXX时候，我绝对开始振作起来，好好学习。但是每一次成功的，每次到了时间总会找到下个安慰自己的时间，一直到元旦，准确的来说是一直到农历的过年。此外值得一提的是好像12月份的某一天，我的左腿不知怎么了感觉走路很别扭，后来发现是脚掌翘不起来，左腿外侧的肌肉无力收缩，走路的时候左脚都是整个脚掌着地，而不是正常的脚后跟先着地。发现这种情况后我去网上查了下，感觉跟腓总神经损伤的症状很像。</p><p><br></p>','2018-03-20 08:09:25','回忆有点痛','原创','2017年黑暗回忆录(全篇)','2018-03-21 12:56:01','仅自己可见',13);
/*!40000 ALTER TABLE `t_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_type`
--

DROP TABLE IF EXISTS `t_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `typeName` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_9227myhpywvg2mkr0niafcyj3` (`typeName`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_type`
--

LOCK TABLES `t_type` WRITE;
/*!40000 ALTER TABLE `t_type` DISABLE KEYS */;
INSERT INTO `t_type` VALUES (7,'Java基础'),(15,'MyBatis相关'),(14,'mysql相关'),(12,'Servlet&Jsp'),(16,'Spring Mvc相关'),(9,'Spring相关'),(17,'Thinking In Java 学习笔记'),(11,'Util类汇总'),(10,'学习网站收集'),(8,'数据结构和算法'),(13,'生活、杂想');
/*!40000 ALTER TABLE `t_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `account` varchar(25) NOT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `introduce` text,
  `nickName` varchar(255) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `signature` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_kh3p75uuyexsq7d6wb0gysukh` (`account`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
INSERT INTO `t_user` VALUES (1,'admin','/MyBlog/files/avatar/1ec399ed-7c7b-45d9-8ce3-ef8f36518833.jpg','看了很多，了解的却很少。知道的很多，懂的也很少！\r\n我不懂，也不问。我想，就这样也行吧！','挪威司机','85ec849137d719e09cdf1c115ef34af0','我再也不安慰自己了');
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-03-22  1:44:59
